
pwm_servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  08007d5c  08007d5c  00017d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800800c  0800800c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008014  08008014  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008014  08008014  00018014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800801c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c0c  20000060  0800807c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c6c  0800807c  00024c6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019909  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf7  00000000  00000000  000399dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  0003d5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106d  00000000  00000000  0003eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ada  00000000  00000000  0003fb85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a27c  00000000  00000000  0005965f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098419  00000000  00000000  000738db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf4  00000000  00000000  0010bcf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004a  00000000  00000000  001119e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d44 	.word	0x08007d44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08007d44 	.word	0x08007d44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x3c>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2105      	movs	r1, #5
 80005a2:	203a      	movs	r0, #58	; 0x3a
 80005a4:	f001 f9ae 	bl	8001904 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005a8:	203a      	movs	r0, #58	; 0x3a
 80005aa:	f001 f9c7 	bl	800193c <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of servo */
  servoHandle = osThreadNew(StartDefaultTask, NULL, &servo_attributes);
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <MX_FREERTOS_Init+0x38>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <MX_FREERTOS_Init+0x3c>)
 80005c6:	f004 f977 	bl	80048b8 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <MX_FREERTOS_Init+0x40>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of buzzer */
  buzzerHandle = osThreadNew(StartTask02, NULL, &buzzer_attributes);
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <MX_FREERTOS_Init+0x44>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	480b      	ldr	r0, [pc, #44]	; (8000604 <MX_FREERTOS_Init+0x48>)
 80005d6:	f004 f96f 	bl	80048b8 <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <MX_FREERTOS_Init+0x4c>)
 80005de:	6013      	str	r3, [r2, #0]

  /* creation of led */
  ledHandle = osThreadNew(StartTask03, NULL, &led_attributes);
 80005e0:	4a0a      	ldr	r2, [pc, #40]	; (800060c <MX_FREERTOS_Init+0x50>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	480a      	ldr	r0, [pc, #40]	; (8000610 <MX_FREERTOS_Init+0x54>)
 80005e6:	f004 f967 	bl	80048b8 <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a09      	ldr	r2, [pc, #36]	; (8000614 <MX_FREERTOS_Init+0x58>)
 80005ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08007f4c 	.word	0x08007f4c
 80005f8:	08000619 	.word	0x08000619
 80005fc:	2000007c 	.word	0x2000007c
 8000600:	08007f70 	.word	0x08007f70
 8000604:	08000651 	.word	0x08000651
 8000608:	20000080 	.word	0x20000080
 800060c:	08007f94 	.word	0x08007f94
 8000610:	080006b1 	.word	0x080006b1
 8000614:	20000084 	.word	0x20000084

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	int16_t servo_tick = 140;
 8000620:	238c      	movs	r3, #140	; 0x8c
 8000622:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  for(;;)
  {
  	servo_control(&servo_tick);
 8000624:	f107 030e 	add.w	r3, r7, #14
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f9ed 	bl	8000a08 <servo_control>
  	if(uart_rx_data=='a'||uart_rx_data=='s'){
 800062e:	4b07      	ldr	r3, [pc, #28]	; (800064c <StartDefaultTask+0x34>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b61      	cmp	r3, #97	; 0x61
 8000634:	d003      	beq.n	800063e <StartDefaultTask+0x26>
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <StartDefaultTask+0x34>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b73      	cmp	r3, #115	; 0x73
 800063c:	d102      	bne.n	8000644 <StartDefaultTask+0x2c>
  		uart_rx_data = 0;
 800063e:	4b03      	ldr	r3, [pc, #12]	; (800064c <StartDefaultTask+0x34>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
  	}
		osDelay(1);
 8000644:	2001      	movs	r0, #1
 8000646:	f004 f9c9 	bl	80049dc <osDelay>
  	servo_control(&servo_tick);
 800064a:	e7eb      	b.n	8000624 <StartDefaultTask+0xc>
 800064c:	200000c8 	.word	0x200000c8

08000650 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
  	buzzer_control();
 8000658:	f000 f8ce 	bl	80007f8 <buzzer_control>
  	if(uart_rx_data=='q'||uart_rx_data=='w'||uart_rx_data=='e'
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <StartTask02+0x5c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b71      	cmp	r3, #113	; 0x71
 8000662:	d01b      	beq.n	800069c <StartTask02+0x4c>
 8000664:	4b11      	ldr	r3, [pc, #68]	; (80006ac <StartTask02+0x5c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b77      	cmp	r3, #119	; 0x77
 800066a:	d017      	beq.n	800069c <StartTask02+0x4c>
 800066c:	4b0f      	ldr	r3, [pc, #60]	; (80006ac <StartTask02+0x5c>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b65      	cmp	r3, #101	; 0x65
 8000672:	d013      	beq.n	800069c <StartTask02+0x4c>
  			||uart_rx_data=='r'||uart_rx_data=='t'||uart_rx_data=='y'
 8000674:	4b0d      	ldr	r3, [pc, #52]	; (80006ac <StartTask02+0x5c>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b72      	cmp	r3, #114	; 0x72
 800067a:	d00f      	beq.n	800069c <StartTask02+0x4c>
 800067c:	4b0b      	ldr	r3, [pc, #44]	; (80006ac <StartTask02+0x5c>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b74      	cmp	r3, #116	; 0x74
 8000682:	d00b      	beq.n	800069c <StartTask02+0x4c>
 8000684:	4b09      	ldr	r3, [pc, #36]	; (80006ac <StartTask02+0x5c>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b79      	cmp	r3, #121	; 0x79
 800068a:	d007      	beq.n	800069c <StartTask02+0x4c>
  			||uart_rx_data=='u'||uart_rx_data=='i'){
 800068c:	4b07      	ldr	r3, [pc, #28]	; (80006ac <StartTask02+0x5c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b75      	cmp	r3, #117	; 0x75
 8000692:	d003      	beq.n	800069c <StartTask02+0x4c>
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <StartTask02+0x5c>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b69      	cmp	r3, #105	; 0x69
 800069a:	d102      	bne.n	80006a2 <StartTask02+0x52>
  		uart_rx_data = 0;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <StartTask02+0x5c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
  	}
  	osDelay(1);
 80006a2:	2001      	movs	r0, #1
 80006a4:	f004 f99a 	bl	80049dc <osDelay>
  	buzzer_control();
 80006a8:	e7d6      	b.n	8000658 <StartTask02+0x8>
 80006aa:	bf00      	nop
 80006ac:	200000c8 	.word	0x200000c8

080006b0 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
	uint32_t pretime=HAL_GetTick();
 80006b8:	f001 f860 	bl	800177c <HAL_GetTick>
 80006bc:	4603      	mov	r3, r0
 80006be:	60fb      	str	r3, [r7, #12]
	uint16_t led_fisrt_pwm_speed[2]={500,500};
 80006c0:	4b10      	ldr	r3, [pc, #64]	; (8000704 <StartTask03+0x54>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
  	led_pwm_control(&pretime, &led_fisrt_pwm_speed[0]);
 80006c6:	f107 0208 	add.w	r2, r7, #8
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	4611      	mov	r1, r2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fa6f 	bl	8000bb4 <led_pwm_control>
  	if(uart_rx_data=='1'||uart_rx_data=='2'
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <StartTask03+0x58>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b31      	cmp	r3, #49	; 0x31
 80006dc:	d00b      	beq.n	80006f6 <StartTask03+0x46>
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <StartTask03+0x58>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b32      	cmp	r3, #50	; 0x32
 80006e4:	d007      	beq.n	80006f6 <StartTask03+0x46>
  			||uart_rx_data=='3'||uart_rx_data=='4'){
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <StartTask03+0x58>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b33      	cmp	r3, #51	; 0x33
 80006ec:	d003      	beq.n	80006f6 <StartTask03+0x46>
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <StartTask03+0x58>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b34      	cmp	r3, #52	; 0x34
 80006f4:	d102      	bne.n	80006fc <StartTask03+0x4c>
  		uart_rx_data = 0;
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <StartTask03+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
  	}
  	osDelay(1);
 80006fc:	2001      	movs	r0, #1
 80006fe:	f004 f96d 	bl	80049dc <osDelay>
  	led_pwm_control(&pretime, &led_fisrt_pwm_speed[0]);
 8000702:	e7e0      	b.n	80006c6 <StartTask03+0x16>
 8000704:	08007d70 	.word	0x08007d70
 8000708:	200000c8 	.word	0x200000c8

0800070c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_GPIO_Init+0x68>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a16      	ldr	r2, [pc, #88]	; (8000774 <MX_GPIO_Init+0x68>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_GPIO_Init+0x68>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_GPIO_Init+0x68>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <MX_GPIO_Init+0x68>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <MX_GPIO_Init+0x68>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_GPIO_Init+0x68>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <MX_GPIO_Init+0x68>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_GPIO_Init+0x68>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800

08000778 <HAL_UART_RxCpltCallback>:
void buzzer_control();
void led_pwm_control(uint32_t *pretime,uint16_t *led_pwm_speed);
void servo_control(int16_t *servo_tick);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart1.Instance){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <HAL_UART_RxCpltCallback+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d104      	bne.n	8000796 <HAL_UART_RxCpltCallback+0x1e>
		UART_Start_Receive_DMA(&huart1, &uart_rx_data, 1);
 800078c:	2201      	movs	r2, #1
 800078e:	4905      	ldr	r1, [pc, #20]	; (80007a4 <HAL_UART_RxCpltCallback+0x2c>)
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <HAL_UART_RxCpltCallback+0x28>)
 8000792:	f003 fc69 	bl	8004068 <UART_Start_Receive_DMA>
	}
  UNUSED(huart);
}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	200001f8 	.word	0x200001f8
 80007a4:	200000c8 	.word	0x200000c8

080007a8 <uart_send>:

void uart_send(uint8_t uart_num,char *fmt,...){
 80007a8:	b40e      	push	{r1, r2, r3}
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
	va_list arg;
	va_start(arg,fmt);
 80007b4:	f107 0320 	add.w	r3, r7, #32
 80007b8:	60fb      	str	r3, [r7, #12]

	vsnprintf((char *)uart_send_data,64,fmt,arg);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	69fa      	ldr	r2, [r7, #28]
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	480b      	ldr	r0, [pc, #44]	; (80007f0 <uart_send+0x48>)
 80007c2:	f006 fdd7 	bl	8007374 <vsniprintf>

	if(uart_num==1){
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d105      	bne.n	80007d8 <uart_send+0x30>
		HAL_UART_Transmit(&huart1, uart_send_data, 64, 10);
 80007cc:	230a      	movs	r3, #10
 80007ce:	2240      	movs	r2, #64	; 0x40
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <uart_send+0x48>)
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <uart_send+0x4c>)
 80007d4:	f003 fa46 	bl	8003c64 <HAL_UART_Transmit>
	}

	memset(uart_send_data,0,64);
 80007d8:	2240      	movs	r2, #64	; 0x40
 80007da:	2100      	movs	r1, #0
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <uart_send+0x48>)
 80007de:	f006 fdd7 	bl	8007390 <memset>
	va_end(arg);
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007ec:	b003      	add	sp, #12
 80007ee:	4770      	bx	lr
 80007f0:	20000088 	.word	0x20000088
 80007f4:	200001f8 	.word	0x200001f8

080007f8 <buzzer_control>:

uint32_t pretime1;
bool buzzer_on=false;

void buzzer_control(){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	if(!buzzer_on){
 80007fc:	4b76      	ldr	r3, [pc, #472]	; (80009d8 <buzzer_control+0x1e0>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f083 0301 	eor.w	r3, r3, #1
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d004      	beq.n	8000814 <buzzer_control+0x1c>
		pretime1 = HAL_GetTick();
 800080a:	f000 ffb7 	bl	800177c <HAL_GetTick>
 800080e:	4603      	mov	r3, r0
 8000810:	4a72      	ldr	r2, [pc, #456]	; (80009dc <buzzer_control+0x1e4>)
 8000812:	6013      	str	r3, [r2, #0]
	}
	if((HAL_GetTick()-pretime1>=100)&&buzzer_on){
 8000814:	f000 ffb2 	bl	800177c <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	4b70      	ldr	r3, [pc, #448]	; (80009dc <buzzer_control+0x1e4>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	2b63      	cmp	r3, #99	; 0x63
 8000822:	d90f      	bls.n	8000844 <buzzer_control+0x4c>
 8000824:	4b6c      	ldr	r3, [pc, #432]	; (80009d8 <buzzer_control+0x1e0>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00b      	beq.n	8000844 <buzzer_control+0x4c>
		pretime1=HAL_GetTick();
 800082c:	f000 ffa6 	bl	800177c <HAL_GetTick>
 8000830:	4603      	mov	r3, r0
 8000832:	4a6a      	ldr	r2, [pc, #424]	; (80009dc <buzzer_control+0x1e4>)
 8000834:	6013      	str	r3, [r2, #0]
		htim9.Instance->CCR1 = 0;
 8000836:	4b6a      	ldr	r3, [pc, #424]	; (80009e0 <buzzer_control+0x1e8>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2200      	movs	r2, #0
 800083c:	635a      	str	r2, [r3, #52]	; 0x34
		buzzer_on = false;
 800083e:	4b66      	ldr	r3, [pc, #408]	; (80009d8 <buzzer_control+0x1e0>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
	}
	if(buzzer_on){
 8000844:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <buzzer_control+0x1e0>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	f040 80c1 	bne.w	80009d0 <buzzer_control+0x1d8>
		return;
	}
	switch (uart_rx_data){
 800084e:	4b65      	ldr	r3, [pc, #404]	; (80009e4 <buzzer_control+0x1ec>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	3b65      	subs	r3, #101	; 0x65
 8000854:	2b14      	cmp	r3, #20
 8000856:	f200 80bd 	bhi.w	80009d4 <buzzer_control+0x1dc>
 800085a:	a201      	add	r2, pc, #4	; (adr r2, 8000860 <buzzer_control+0x68>)
 800085c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000860:	080008fd 	.word	0x080008fd
 8000864:	080009d5 	.word	0x080009d5
 8000868:	080009d5 	.word	0x080009d5
 800086c:	080009d5 	.word	0x080009d5
 8000870:	080009af 	.word	0x080009af
 8000874:	080009d5 	.word	0x080009d5
 8000878:	080009d5 	.word	0x080009d5
 800087c:	080009d5 	.word	0x080009d5
 8000880:	080009d5 	.word	0x080009d5
 8000884:	080009d5 	.word	0x080009d5
 8000888:	080009d5 	.word	0x080009d5
 800088c:	080009d5 	.word	0x080009d5
 8000890:	080008b5 	.word	0x080008b5
 8000894:	08000921 	.word	0x08000921
 8000898:	080009d5 	.word	0x080009d5
 800089c:	08000945 	.word	0x08000945
 80008a0:	0800098d 	.word	0x0800098d
 80008a4:	080009d5 	.word	0x080009d5
 80008a8:	080008d9 	.word	0x080008d9
 80008ac:	080009d5 	.word	0x080009d5
 80008b0:	08000969 	.word	0x08000969
	case 'q':
		htim9.Instance->ARR = C;
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <buzzer_control+0x1e8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f240 32bb 	movw	r2, #955	; 0x3bb
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
		htim9.Instance->CCR1 = C/2;
 80008be:	4b48      	ldr	r3, [pc, #288]	; (80009e0 <buzzer_control+0x1e8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f240 12dd 	movw	r2, #477	; 0x1dd
 80008c6:	635a      	str	r2, [r3, #52]	; 0x34
		buzzer_on = true;
 80008c8:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <buzzer_control+0x1e0>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	701a      	strb	r2, [r3, #0]
		uart_send(1,"C\n");
 80008ce:	4946      	ldr	r1, [pc, #280]	; (80009e8 <buzzer_control+0x1f0>)
 80008d0:	2001      	movs	r0, #1
 80008d2:	f7ff ff69 	bl	80007a8 <uart_send>
		break;
 80008d6:	e07e      	b.n	80009d6 <buzzer_control+0x1de>
	case 'w':
		htim9.Instance->ARR = D;
 80008d8:	4b41      	ldr	r3, [pc, #260]	; (80009e0 <buzzer_control+0x1e8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f240 3253 	movw	r2, #851	; 0x353
 80008e0:	62da      	str	r2, [r3, #44]	; 0x2c
		htim9.Instance->CCR1 = D/2;
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <buzzer_control+0x1e8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80008ea:	635a      	str	r2, [r3, #52]	; 0x34
		uart_send(1,"D\n");
 80008ec:	493f      	ldr	r1, [pc, #252]	; (80009ec <buzzer_control+0x1f4>)
 80008ee:	2001      	movs	r0, #1
 80008f0:	f7ff ff5a 	bl	80007a8 <uart_send>
		buzzer_on = true;
 80008f4:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <buzzer_control+0x1e0>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
		break;
 80008fa:	e06c      	b.n	80009d6 <buzzer_control+0x1de>
	case 'e':
		htim9.Instance->ARR = E;
 80008fc:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <buzzer_control+0x1e8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f240 22f6 	movw	r2, #758	; 0x2f6
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
		htim9.Instance->CCR1 = E/2;
 8000906:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <buzzer_control+0x1e8>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f240 127b 	movw	r2, #379	; 0x17b
 800090e:	635a      	str	r2, [r3, #52]	; 0x34
		uart_send(1,"E\n");
 8000910:	4937      	ldr	r1, [pc, #220]	; (80009f0 <buzzer_control+0x1f8>)
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff ff48 	bl	80007a8 <uart_send>
		buzzer_on = true;
 8000918:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <buzzer_control+0x1e0>)
 800091a:	2201      	movs	r2, #1
 800091c:	701a      	strb	r2, [r3, #0]
		break;
 800091e:	e05a      	b.n	80009d6 <buzzer_control+0x1de>
	case 'r':
		htim9.Instance->ARR = F;
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <buzzer_control+0x1e8>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f240 22cb 	movw	r2, #715	; 0x2cb
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
		htim9.Instance->CCR1 = F/2;
 800092a:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <buzzer_control+0x1e8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f240 1265 	movw	r2, #357	; 0x165
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
		uart_send(1,"F\n");
 8000934:	492f      	ldr	r1, [pc, #188]	; (80009f4 <buzzer_control+0x1fc>)
 8000936:	2001      	movs	r0, #1
 8000938:	f7ff ff36 	bl	80007a8 <uart_send>
		buzzer_on = true;
 800093c:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <buzzer_control+0x1e0>)
 800093e:	2201      	movs	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
		break;
 8000942:	e048      	b.n	80009d6 <buzzer_control+0x1de>
	case 't':
		htim9.Instance->ARR = G;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <buzzer_control+0x1e8>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f240 227d 	movw	r2, #637	; 0x27d
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim9.Instance->CCR1 = G/2;
 800094e:	4b24      	ldr	r3, [pc, #144]	; (80009e0 <buzzer_control+0x1e8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f44f 729f 	mov.w	r2, #318	; 0x13e
 8000956:	635a      	str	r2, [r3, #52]	; 0x34
		uart_send(1,"G\n");
 8000958:	4927      	ldr	r1, [pc, #156]	; (80009f8 <buzzer_control+0x200>)
 800095a:	2001      	movs	r0, #1
 800095c:	f7ff ff24 	bl	80007a8 <uart_send>
		buzzer_on = true;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <buzzer_control+0x1e0>)
 8000962:	2201      	movs	r2, #1
 8000964:	701a      	strb	r2, [r3, #0]
		break;
 8000966:	e036      	b.n	80009d6 <buzzer_control+0x1de>
	case 'y':
		htim9.Instance->ARR = A;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <buzzer_control+0x1e8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f44f 720e 	mov.w	r2, #568	; 0x238
 8000970:	62da      	str	r2, [r3, #44]	; 0x2c
		htim9.Instance->CCR1 = A/2;
 8000972:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <buzzer_control+0x1e8>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
		uart_send(1,"A\n");
 800097c:	491f      	ldr	r1, [pc, #124]	; (80009fc <buzzer_control+0x204>)
 800097e:	2001      	movs	r0, #1
 8000980:	f7ff ff12 	bl	80007a8 <uart_send>
		buzzer_on = true;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <buzzer_control+0x1e0>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
		break;
 800098a:	e024      	b.n	80009d6 <buzzer_control+0x1de>
	case 'u':
		htim9.Instance->ARR = B;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <buzzer_control+0x1e8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
		htim9.Instance->CCR1 = B/2;
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <buzzer_control+0x1e8>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	22fd      	movs	r2, #253	; 0xfd
 800099c:	635a      	str	r2, [r3, #52]	; 0x34
		uart_send(1,"B\n");
 800099e:	4918      	ldr	r1, [pc, #96]	; (8000a00 <buzzer_control+0x208>)
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff ff01 	bl	80007a8 <uart_send>
		buzzer_on = true;
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <buzzer_control+0x1e0>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
		break;
 80009ac:	e013      	b.n	80009d6 <buzzer_control+0x1de>
	case 'i':
		htim9.Instance->ARR = C_;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <buzzer_control+0x1e8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f240 12dd 	movw	r2, #477	; 0x1dd
 80009b6:	62da      	str	r2, [r3, #44]	; 0x2c
		htim9.Instance->CCR1 = C_/2;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <buzzer_control+0x1e8>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	22ee      	movs	r2, #238	; 0xee
 80009be:	635a      	str	r2, [r3, #52]	; 0x34
		uart_send(1,"C+\n");
 80009c0:	4910      	ldr	r1, [pc, #64]	; (8000a04 <buzzer_control+0x20c>)
 80009c2:	2001      	movs	r0, #1
 80009c4:	f7ff fef0 	bl	80007a8 <uart_send>
		buzzer_on = true;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <buzzer_control+0x1e0>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
		break;
 80009ce:	e002      	b.n	80009d6 <buzzer_control+0x1de>
		return;
 80009d0:	bf00      	nop
 80009d2:	e000      	b.n	80009d6 <buzzer_control+0x1de>
	default:
		break;
 80009d4:	bf00      	nop
	}
}
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200000d0 	.word	0x200000d0
 80009dc:	200000cc 	.word	0x200000cc
 80009e0:	200001b0 	.word	0x200001b0
 80009e4:	200000c8 	.word	0x200000c8
 80009e8:	08007d74 	.word	0x08007d74
 80009ec:	08007d78 	.word	0x08007d78
 80009f0:	08007d7c 	.word	0x08007d7c
 80009f4:	08007d80 	.word	0x08007d80
 80009f8:	08007d84 	.word	0x08007d84
 80009fc:	08007d88 	.word	0x08007d88
 8000a00:	08007d8c 	.word	0x08007d8c
 8000a04:	08007d90 	.word	0x08007d90

08000a08 <servo_control>:

void servo_control(int16_t *servo_tick){
 8000a08:	b5b0      	push	{r4, r5, r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
	htim4.Instance->CCR1 = *servo_tick;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000a16:	4b5e      	ldr	r3, [pc, #376]	; (8000b90 <servo_control+0x188>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
	if(uart_rx_data=='a'){
 8000a1c:	4b5d      	ldr	r3, [pc, #372]	; (8000b94 <servo_control+0x18c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b61      	cmp	r3, #97	; 0x61
 8000a22:	d157      	bne.n	8000ad4 <servo_control+0xcc>
		if(*servo_tick<=140){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a2a:	2b8c      	cmp	r3, #140	; 0x8c
 8000a2c:	dc08      	bgt.n	8000a40 <servo_control+0x38>
			uart_send(1,"servo minus degree is max!\n");
 8000a2e:	495a      	ldr	r1, [pc, #360]	; (8000b98 <servo_control+0x190>)
 8000a30:	2001      	movs	r0, #1
 8000a32:	f7ff feb9 	bl	80007a8 <uart_send>
			*servo_tick=1300;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f240 5214 	movw	r2, #1300	; 0x514
 8000a3c:	801a      	strh	r2, [r3, #0]
			return;
 8000a3e:	e0a4      	b.n	8000b8a <servo_control+0x182>
		}
		*servo_tick-=20;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	3b14      	subs	r3, #20
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	801a      	strh	r2, [r3, #0]
		uart_send(1,"servo minus:%dtick,%d.%dms,%d'\n",
				*servo_tick,
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f9b3 3000 	ldrsh.w	r3, [r3]
		uart_send(1,"servo minus:%dtick,%d.%dms,%d'\n",
 8000a58:	4618      	mov	r0, r3
				(*servo_tick/500),(*servo_tick/50)-(*servo_tick/500)*10,
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
		uart_send(1,"servo minus:%dtick,%d.%dms,%d'\n",
 8000a60:	4a4e      	ldr	r2, [pc, #312]	; (8000b9c <servo_control+0x194>)
 8000a62:	fb82 1203 	smull	r1, r2, r2, r3
 8000a66:	1152      	asrs	r2, r2, #5
 8000a68:	17db      	asrs	r3, r3, #31
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	b21b      	sxth	r3, r3
 8000a6e:	461c      	mov	r4, r3
				(*servo_tick/500),(*servo_tick/50)-(*servo_tick/500)*10,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a76:	4a4a      	ldr	r2, [pc, #296]	; (8000ba0 <servo_control+0x198>)
 8000a78:	fb82 1203 	smull	r1, r2, r2, r3
 8000a7c:	1112      	asrs	r2, r2, #4
 8000a7e:	17db      	asrs	r3, r3, #31
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4619      	mov	r1, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000a8c:	4a43      	ldr	r2, [pc, #268]	; (8000b9c <servo_control+0x194>)
 8000a8e:	fb82 5203 	smull	r5, r2, r2, r3
 8000a92:	1152      	asrs	r2, r2, #5
 8000a94:	17db      	asrs	r3, r3, #31
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	b21b      	sxth	r3, r3
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	f06f 0309 	mvn.w	r3, #9
 8000aa0:	fb02 f303 	mul.w	r3, r2, r3
		uart_send(1,"servo minus:%dtick,%d.%dms,%d'\n",
 8000aa4:	18ca      	adds	r2, r1, r3
				(*servo_tick-140)*180/1180);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000aac:	3b8c      	subs	r3, #140	; 0x8c
 8000aae:	21b4      	movs	r1, #180	; 0xb4
 8000ab0:	fb01 f303 	mul.w	r3, r1, r3
		uart_send(1,"servo minus:%dtick,%d.%dms,%d'\n",
 8000ab4:	493b      	ldr	r1, [pc, #236]	; (8000ba4 <servo_control+0x19c>)
 8000ab6:	fb81 5103 	smull	r5, r1, r1, r3
 8000aba:	4419      	add	r1, r3
 8000abc:	1289      	asrs	r1, r1, #10
 8000abe:	17db      	asrs	r3, r3, #31
 8000ac0:	1acb      	subs	r3, r1, r3
 8000ac2:	9301      	str	r3, [sp, #4]
 8000ac4:	9200      	str	r2, [sp, #0]
 8000ac6:	4623      	mov	r3, r4
 8000ac8:	4602      	mov	r2, r0
 8000aca:	4937      	ldr	r1, [pc, #220]	; (8000ba8 <servo_control+0x1a0>)
 8000acc:	2001      	movs	r0, #1
 8000ace:	f7ff fe6b 	bl	80007a8 <uart_send>
 8000ad2:	e05a      	b.n	8000b8a <servo_control+0x182>
	}
	else if(uart_rx_data=='s'){
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	; (8000b94 <servo_control+0x18c>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b73      	cmp	r3, #115	; 0x73
 8000ada:	d156      	bne.n	8000b8a <servo_control+0x182>
		if(*servo_tick>=1320){
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ae2:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 8000ae6:	db07      	blt.n	8000af8 <servo_control+0xf0>
			uart_send(1,"servo plus degree is max!\n");
 8000ae8:	4930      	ldr	r1, [pc, #192]	; (8000bac <servo_control+0x1a4>)
 8000aea:	2001      	movs	r0, #1
 8000aec:	f7ff fe5c 	bl	80007a8 <uart_send>
			*servo_tick=140;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	228c      	movs	r2, #140	; 0x8c
 8000af4:	801a      	strh	r2, [r3, #0]
			return;
 8000af6:	e048      	b.n	8000b8a <servo_control+0x182>
		}
		*servo_tick+=20;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	3314      	adds	r3, #20
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	801a      	strh	r2, [r3, #0]
		uart_send(1,"servo plus:%dtick,%d.%dms,%d'\n",
				*servo_tick,
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
		uart_send(1,"servo plus:%dtick,%d.%dms,%d'\n",
 8000b10:	4618      	mov	r0, r3
				(*servo_tick/500),(*servo_tick/50)-(*servo_tick/500)*10,
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f9b3 3000 	ldrsh.w	r3, [r3]
		uart_send(1,"servo plus:%dtick,%d.%dms,%d'\n",
 8000b18:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <servo_control+0x194>)
 8000b1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b1e:	1152      	asrs	r2, r2, #5
 8000b20:	17db      	asrs	r3, r3, #31
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	b21b      	sxth	r3, r3
 8000b26:	461c      	mov	r4, r3
				(*servo_tick/500),(*servo_tick/50)-(*servo_tick/500)*10,
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <servo_control+0x198>)
 8000b30:	fb82 1203 	smull	r1, r2, r2, r3
 8000b34:	1112      	asrs	r2, r2, #4
 8000b36:	17db      	asrs	r3, r3, #31
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	b21b      	sxth	r3, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b44:	4a15      	ldr	r2, [pc, #84]	; (8000b9c <servo_control+0x194>)
 8000b46:	fb82 5203 	smull	r5, r2, r2, r3
 8000b4a:	1152      	asrs	r2, r2, #5
 8000b4c:	17db      	asrs	r3, r3, #31
 8000b4e:	1ad3      	subs	r3, r2, r3
 8000b50:	b21b      	sxth	r3, r3
 8000b52:	461a      	mov	r2, r3
 8000b54:	f06f 0309 	mvn.w	r3, #9
 8000b58:	fb02 f303 	mul.w	r3, r2, r3
		uart_send(1,"servo plus:%dtick,%d.%dms,%d'\n",
 8000b5c:	18ca      	adds	r2, r1, r3
				(*servo_tick-140)*180/1180);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b64:	3b8c      	subs	r3, #140	; 0x8c
 8000b66:	21b4      	movs	r1, #180	; 0xb4
 8000b68:	fb01 f303 	mul.w	r3, r1, r3
		uart_send(1,"servo plus:%dtick,%d.%dms,%d'\n",
 8000b6c:	490d      	ldr	r1, [pc, #52]	; (8000ba4 <servo_control+0x19c>)
 8000b6e:	fb81 5103 	smull	r5, r1, r1, r3
 8000b72:	4419      	add	r1, r3
 8000b74:	1289      	asrs	r1, r1, #10
 8000b76:	17db      	asrs	r3, r3, #31
 8000b78:	1acb      	subs	r3, r1, r3
 8000b7a:	9301      	str	r3, [sp, #4]
 8000b7c:	9200      	str	r2, [sp, #0]
 8000b7e:	4623      	mov	r3, r4
 8000b80:	4602      	mov	r2, r0
 8000b82:	490b      	ldr	r1, [pc, #44]	; (8000bb0 <servo_control+0x1a8>)
 8000b84:	2001      	movs	r0, #1
 8000b86:	f7ff fe0f 	bl	80007a8 <uart_send>
	}
}
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b90:	20000168 	.word	0x20000168
 8000b94:	200000c8 	.word	0x200000c8
 8000b98:	08007d94 	.word	0x08007d94
 8000b9c:	10624dd3 	.word	0x10624dd3
 8000ba0:	51eb851f 	.word	0x51eb851f
 8000ba4:	de27eb2d 	.word	0xde27eb2d
 8000ba8:	08007db0 	.word	0x08007db0
 8000bac:	08007dd0 	.word	0x08007dd0
 8000bb0:	08007dec 	.word	0x08007dec

08000bb4 <led_pwm_control>:


void led_pwm_control(uint32_t *pretime,uint16_t *led_pwm_speed){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	uint16_t led_pwm_cal_val=500;
 8000bbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bc2:	81fb      	strh	r3, [r7, #14]
	if(HAL_GetTick()-*pretime>=50){
 8000bc4:	f000 fdda 	bl	800177c <HAL_GetTick>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	2b31      	cmp	r3, #49	; 0x31
 8000bd2:	d925      	bls.n	8000c20 <led_pwm_control+0x6c>
		htim3.Instance->CCR1=(htim3.Instance->CCR1+led_pwm_speed[0])%htim3.Init.Period;
 8000bd4:	4b5c      	ldr	r3, [pc, #368]	; (8000d48 <led_pwm_control+0x194>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	683a      	ldr	r2, [r7, #0]
 8000bdc:	8812      	ldrh	r2, [r2, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a59      	ldr	r2, [pc, #356]	; (8000d48 <led_pwm_control+0x194>)
 8000be2:	68d2      	ldr	r2, [r2, #12]
 8000be4:	4958      	ldr	r1, [pc, #352]	; (8000d48 <led_pwm_control+0x194>)
 8000be6:	6809      	ldr	r1, [r1, #0]
 8000be8:	fbb3 f0f2 	udiv	r0, r3, r2
 8000bec:	fb00 f202 	mul.w	r2, r0, r2
 8000bf0:	1a9b      	subs	r3, r3, r2
 8000bf2:	634b      	str	r3, [r1, #52]	; 0x34
		htim3.Instance->CCR2=(htim3.Instance->CCR2+led_pwm_speed[1])%htim3.Init.Period;
 8000bf4:	4b54      	ldr	r3, [pc, #336]	; (8000d48 <led_pwm_control+0x194>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	3202      	adds	r2, #2
 8000bfe:	8812      	ldrh	r2, [r2, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	4a51      	ldr	r2, [pc, #324]	; (8000d48 <led_pwm_control+0x194>)
 8000c04:	68d2      	ldr	r2, [r2, #12]
 8000c06:	4950      	ldr	r1, [pc, #320]	; (8000d48 <led_pwm_control+0x194>)
 8000c08:	6809      	ldr	r1, [r1, #0]
 8000c0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c0e:	fb00 f202 	mul.w	r2, r0, r2
 8000c12:	1a9b      	subs	r3, r3, r2
 8000c14:	638b      	str	r3, [r1, #56]	; 0x38
		*pretime=HAL_GetTick();
 8000c16:	f000 fdb1 	bl	800177c <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	601a      	str	r2, [r3, #0]
	}

	switch (uart_rx_data){
 8000c20:	4b4a      	ldr	r3, [pc, #296]	; (8000d4c <led_pwm_control+0x198>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	3b31      	subs	r3, #49	; 0x31
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	f200 808a 	bhi.w	8000d40 <led_pwm_control+0x18c>
 8000c2c:	a201      	add	r2, pc, #4	; (adr r2, 8000c34 <led_pwm_control+0x80>)
 8000c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c32:	bf00      	nop
 8000c34:	08000c45 	.word	0x08000c45
 8000c38:	08000c81 	.word	0x08000c81
 8000c3c:	08000cb9 	.word	0x08000cb9
 8000c40:	08000cff 	.word	0x08000cff
		case '1': //up led 1
			if(led_pwm_speed[0]<led_pwm_cal_val*4){
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	881b      	ldrh	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	89fb      	ldrh	r3, [r7, #14]
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	da0e      	bge.n	8000c70 <led_pwm_control+0xbc>
				led_pwm_speed[0]=led_pwm_speed[0]+led_pwm_cal_val;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	881a      	ldrh	r2, [r3, #0]
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	4413      	add	r3, r2
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	801a      	strh	r2, [r3, #0]
				uart_send(1,"led 1 up speed, speed val : %d.\n",led_pwm_speed[0]);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	881b      	ldrh	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	493a      	ldr	r1, [pc, #232]	; (8000d50 <led_pwm_control+0x19c>)
 8000c68:	2001      	movs	r0, #1
 8000c6a:	f7ff fd9d 	bl	80007a8 <uart_send>
			}
			else{
				uart_send(1,"led 1 pwm speed %d is too fast!\n",led_pwm_speed[0]);
			}
			break;
 8000c6e:	e067      	b.n	8000d40 <led_pwm_control+0x18c>
				uart_send(1,"led 1 pwm speed %d is too fast!\n",led_pwm_speed[0]);
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4937      	ldr	r1, [pc, #220]	; (8000d54 <led_pwm_control+0x1a0>)
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fd95 	bl	80007a8 <uart_send>
			break;
 8000c7e:	e05f      	b.n	8000d40 <led_pwm_control+0x18c>
		case '2': //down led 1
			if(led_pwm_speed[0]>led_pwm_cal_val){
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	881b      	ldrh	r3, [r3, #0]
 8000c84:	89fa      	ldrh	r2, [r7, #14]
 8000c86:	429a      	cmp	r2, r3
 8000c88:	d20e      	bcs.n	8000ca8 <led_pwm_control+0xf4>
				led_pwm_speed[0]= led_pwm_speed[0]-led_pwm_cal_val;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	881a      	ldrh	r2, [r3, #0]
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	801a      	strh	r2, [r3, #0]
				uart_send(1,"led 1 down speed, speed val : %d.\n",led_pwm_speed[0]);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	492e      	ldr	r1, [pc, #184]	; (8000d58 <led_pwm_control+0x1a4>)
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fd81 	bl	80007a8 <uart_send>
			}
			else{
				uart_send(1,"led 1 pwm speed %d is too slow!\n",led_pwm_speed[0]);
			}
		  break;
 8000ca6:	e04b      	b.n	8000d40 <led_pwm_control+0x18c>
				uart_send(1,"led 1 pwm speed %d is too slow!\n",led_pwm_speed[0]);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	492b      	ldr	r1, [pc, #172]	; (8000d5c <led_pwm_control+0x1a8>)
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fd79 	bl	80007a8 <uart_send>
		  break;
 8000cb6:	e043      	b.n	8000d40 <led_pwm_control+0x18c>
		case '3': //up led 1
		  if(led_pwm_speed[1]<led_pwm_cal_val*4){
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	3302      	adds	r3, #2
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	89fb      	ldrh	r3, [r7, #14]
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	da11      	bge.n	8000cec <led_pwm_control+0x138>
		   led_pwm_speed[1]=led_pwm_speed[1]+led_pwm_cal_val;
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	3302      	adds	r3, #2
 8000ccc:	8819      	ldrh	r1, [r3, #0]
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	3302      	adds	r3, #2
 8000cd2:	89fa      	ldrh	r2, [r7, #14]
 8000cd4:	440a      	add	r2, r1
 8000cd6:	b292      	uxth	r2, r2
 8000cd8:	801a      	strh	r2, [r3, #0]
		   uart_send(1,"led 2 up speed, led speed val : %d.\n",led_pwm_speed[1]);
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	3302      	adds	r3, #2
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	491f      	ldr	r1, [pc, #124]	; (8000d60 <led_pwm_control+0x1ac>)
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	f7ff fd5f 	bl	80007a8 <uart_send>
		  }
		  else{
		  	uart_send(1,"led 2 pwm speed %d is too fast!\n",led_pwm_speed[1]);
		  }
		  break;
 8000cea:	e029      	b.n	8000d40 <led_pwm_control+0x18c>
		  	uart_send(1,"led 2 pwm speed %d is too fast!\n",led_pwm_speed[1]);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	3302      	adds	r3, #2
 8000cf0:	881b      	ldrh	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	491b      	ldr	r1, [pc, #108]	; (8000d64 <led_pwm_control+0x1b0>)
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	f7ff fd56 	bl	80007a8 <uart_send>
		  break;
 8000cfc:	e020      	b.n	8000d40 <led_pwm_control+0x18c>
		case '4': //down led 1
		  if(led_pwm_speed[1]>led_pwm_cal_val){
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	3302      	adds	r3, #2
 8000d02:	881b      	ldrh	r3, [r3, #0]
 8000d04:	89fa      	ldrh	r2, [r7, #14]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d211      	bcs.n	8000d2e <led_pwm_control+0x17a>
		  	led_pwm_speed[1]= led_pwm_speed[1]-led_pwm_cal_val;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	8819      	ldrh	r1, [r3, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	3302      	adds	r3, #2
 8000d14:	89fa      	ldrh	r2, [r7, #14]
 8000d16:	1a8a      	subs	r2, r1, r2
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	801a      	strh	r2, [r3, #0]
		  	uart_send(1,"led 2 down speed, led speed val : %d.\n",led_pwm_speed[1]);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	3302      	adds	r3, #2
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	461a      	mov	r2, r3
 8000d24:	4910      	ldr	r1, [pc, #64]	; (8000d68 <led_pwm_control+0x1b4>)
 8000d26:	2001      	movs	r0, #1
 8000d28:	f7ff fd3e 	bl	80007a8 <uart_send>
		  }
		  else{
		  	uart_send(1,"led 2 pwm speed %d is too slow!\n",led_pwm_speed[1]);
		  }
		  break;
 8000d2c:	e007      	b.n	8000d3e <led_pwm_control+0x18a>
		  	uart_send(1,"led 2 pwm speed %d is too slow!\n",led_pwm_speed[1]);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	3302      	adds	r3, #2
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <led_pwm_control+0x1b8>)
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fd35 	bl	80007a8 <uart_send>
		  break;
 8000d3e:	bf00      	nop
	}
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000120 	.word	0x20000120
 8000d4c:	200000c8 	.word	0x200000c8
 8000d50:	08007e0c 	.word	0x08007e0c
 8000d54:	08007e30 	.word	0x08007e30
 8000d58:	08007e54 	.word	0x08007e54
 8000d5c:	08007e78 	.word	0x08007e78
 8000d60:	08007e9c 	.word	0x08007e9c
 8000d64:	08007ec4 	.word	0x08007ec4
 8000d68:	08007ee8 	.word	0x08007ee8
 8000d6c:	08007f10 	.word	0x08007f10

08000d70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d74:	f000 fccc 	bl	8001710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d78:	f000 f832 	bl	8000de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d7c:	f7ff fcc6 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d80:	f7ff fbfc 	bl	800057c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d84:	f000 fbf4 	bl	8001570 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000d88:	f000 f9bc 	bl	8001104 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d8c:	f000 fa40 	bl	8001210 <MX_TIM4_Init>
  MX_TIM9_Init();
 8000d90:	f000 fab6 	bl	8001300 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  UART_Start_Receive_DMA(&huart1, &uart_rx_data, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <main+0x5c>)
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <main+0x60>)
 8000d9a:	f003 f965 	bl	8004068 <UART_Start_Receive_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d9e:	2100      	movs	r1, #0
 8000da0:	480c      	ldr	r0, [pc, #48]	; (8000dd4 <main+0x64>)
 8000da2:	f002 f863 	bl	8002e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000da6:	2104      	movs	r1, #4
 8000da8:	480a      	ldr	r0, [pc, #40]	; (8000dd4 <main+0x64>)
 8000daa:	f002 f85f 	bl	8002e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dae:	2100      	movs	r1, #0
 8000db0:	4809      	ldr	r0, [pc, #36]	; (8000dd8 <main+0x68>)
 8000db2:	f002 f85b 	bl	8002e6c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8000db6:	2100      	movs	r1, #0
 8000db8:	4808      	ldr	r0, [pc, #32]	; (8000ddc <main+0x6c>)
 8000dba:	f002 f857 	bl	8002e6c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dbe:	f003 fd31 	bl	8004824 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000dc2:	f7ff fbfb 	bl	80005bc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000dc6:	f003 fd51 	bl	800486c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dca:	e7fe      	b.n	8000dca <main+0x5a>
 8000dcc:	200000c8 	.word	0x200000c8
 8000dd0:	200001f8 	.word	0x200001f8
 8000dd4:	20000120 	.word	0x20000120
 8000dd8:	20000168 	.word	0x20000168
 8000ddc:	200001b0 	.word	0x200001b0

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	2230      	movs	r2, #48	; 0x30
 8000dec:	2100      	movs	r1, #0
 8000dee:	4618      	mov	r0, r3
 8000df0:	f006 face 	bl	8007390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df4:	f107 030c 	add.w	r3, r7, #12
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <SystemClock_Config+0xcc>)
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	4a27      	ldr	r2, [pc, #156]	; (8000eac <SystemClock_Config+0xcc>)
 8000e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e12:	6413      	str	r3, [r2, #64]	; 0x40
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <SystemClock_Config+0xcc>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <SystemClock_Config+0xd0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e2c:	4a20      	ldr	r2, [pc, #128]	; (8000eb0 <SystemClock_Config+0xd0>)
 8000e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <SystemClock_Config+0xd0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e40:	2302      	movs	r3, #2
 8000e42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e48:	2310      	movs	r3, #16
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e54:	2308      	movs	r3, #8
 8000e56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000e58:	2354      	movs	r3, #84	; 0x54
 8000e5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e60:	2304      	movs	r3, #4
 8000e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 fa69 	bl	8002340 <HAL_RCC_OscConfig>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e74:	f000 f830 	bl	8000ed8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e78:	230f      	movs	r3, #15
 8000e7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2102      	movs	r1, #2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fccb 	bl	8002830 <HAL_RCC_ClockConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ea0:	f000 f81a 	bl	8000ed8 <Error_Handler>
  }
}
 8000ea4:	bf00      	nop
 8000ea6:	3750      	adds	r7, #80	; 0x50
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40007000 	.word	0x40007000

08000eb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ec6:	f000 fc45 	bl	8001754 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40010000 	.word	0x40010000

08000ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000edc:	b672      	cpsid	i
}
 8000ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <Error_Handler+0x8>
	...

08000ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	607b      	str	r3, [r7, #4]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_MspInit+0x54>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	4a11      	ldr	r2, [pc, #68]	; (8000f38 <HAL_MspInit+0x54>)
 8000ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <HAL_MspInit+0x54>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_MspInit+0x54>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_MspInit+0x54>)
 8000f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_MspInit+0x54>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	210f      	movs	r1, #15
 8000f26:	f06f 0001 	mvn.w	r0, #1
 8000f2a:	f000 fceb 	bl	8001904 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08c      	sub	sp, #48	; 0x30
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f44:	2300      	movs	r3, #0
 8000f46:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	4b2e      	ldr	r3, [pc, #184]	; (800100c <HAL_InitTick+0xd0>)
 8000f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f54:	4a2d      	ldr	r2, [pc, #180]	; (800100c <HAL_InitTick+0xd0>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	; (800100c <HAL_InitTick+0xd0>)
 8000f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f68:	f107 020c 	add.w	r2, r7, #12
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fe3c 	bl	8002bf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f78:	f001 fe26 	bl	8002bc8 <HAL_RCC_GetPCLK2Freq>
 8000f7c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <HAL_InitTick+0xd4>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	0c9b      	lsrs	r3, r3, #18
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_InitTick+0xd8>)
 8000f8e:	4a22      	ldr	r2, [pc, #136]	; (8001018 <HAL_InitTick+0xdc>)
 8000f90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_InitTick+0xd8>)
 8000f94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f98:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f9a:	4a1e      	ldr	r2, [pc, #120]	; (8001014 <HAL_InitTick+0xd8>)
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000fa0:	4b1c      	ldr	r3, [pc, #112]	; (8001014 <HAL_InitTick+0xd8>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_InitTick+0xd8>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fac:	4b19      	ldr	r3, [pc, #100]	; (8001014 <HAL_InitTick+0xd8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000fb2:	4818      	ldr	r0, [pc, #96]	; (8001014 <HAL_InitTick+0xd8>)
 8000fb4:	f001 fe4e 	bl	8002c54 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d11b      	bne.n	8000ffe <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fc6:	4813      	ldr	r0, [pc, #76]	; (8001014 <HAL_InitTick+0xd8>)
 8000fc8:	f001 fe94 	bl	8002cf4 <HAL_TIM_Base_Start_IT>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d111      	bne.n	8000ffe <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fda:	2019      	movs	r0, #25
 8000fdc:	f000 fcae 	bl	800193c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	d808      	bhi.n	8000ff8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	2019      	movs	r0, #25
 8000fec:	f000 fc8a 	bl	8001904 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff0:	4a0a      	ldr	r2, [pc, #40]	; (800101c <HAL_InitTick+0xe0>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e002      	b.n	8000ffe <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001002:	4618      	mov	r0, r3
 8001004:	3730      	adds	r7, #48	; 0x30
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	431bde83 	.word	0x431bde83
 8001014:	200000d4 	.word	0x200000d4
 8001018:	40010000 	.word	0x40010000
 800101c:	20000004 	.word	0x20000004

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001052:	f001 ffbb 	bl	8002fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	200000d4 	.word	0x200000d4

08001060 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <DMA2_Stream2_IRQHandler+0x10>)
 8001066:	f000 fd7d 	bl	8001b64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000240 	.word	0x20000240

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f006 f9d2 	bl	800744c <__errno>
 80010a8:	4603      	mov	r3, r0
 80010aa:	220c      	movs	r2, #12
 80010ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20010000 	.word	0x20010000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	2000011c 	.word	0x2000011c
 80010dc:	20004c70 	.word	0x20004c70

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <SystemInit+0x20>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a05      	ldr	r2, [pc, #20]	; (8001100 <SystemInit+0x20>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08e      	sub	sp, #56	; 0x38
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001118:	f107 0320 	add.w	r3, r7, #32
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001134:	4b34      	ldr	r3, [pc, #208]	; (8001208 <MX_TIM3_Init+0x104>)
 8001136:	4a35      	ldr	r2, [pc, #212]	; (800120c <MX_TIM3_Init+0x108>)
 8001138:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 19;
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <MX_TIM3_Init+0x104>)
 800113c:	2213      	movs	r2, #19
 800113e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b31      	ldr	r3, [pc, #196]	; (8001208 <MX_TIM3_Init+0x104>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;
 8001146:	4b30      	ldr	r3, [pc, #192]	; (8001208 <MX_TIM3_Init+0x104>)
 8001148:	f24a 420f 	movw	r2, #41999	; 0xa40f
 800114c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <MX_TIM3_Init+0x104>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001154:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <MX_TIM3_Init+0x104>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800115a:	482b      	ldr	r0, [pc, #172]	; (8001208 <MX_TIM3_Init+0x104>)
 800115c:	f001 fd7a 	bl	8002c54 <HAL_TIM_Base_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001166:	f7ff feb7 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001174:	4619      	mov	r1, r3
 8001176:	4824      	ldr	r0, [pc, #144]	; (8001208 <MX_TIM3_Init+0x104>)
 8001178:	f002 f8da 	bl	8003330 <HAL_TIM_ConfigClockSource>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001182:	f7ff fea9 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001186:	4820      	ldr	r0, [pc, #128]	; (8001208 <MX_TIM3_Init+0x104>)
 8001188:	f001 fe16 	bl	8002db8 <HAL_TIM_PWM_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001192:	f7ff fea1 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119e:	f107 0320 	add.w	r3, r7, #32
 80011a2:	4619      	mov	r1, r3
 80011a4:	4818      	ldr	r0, [pc, #96]	; (8001208 <MX_TIM3_Init+0x104>)
 80011a6:	f002 fc8b 	bl	8003ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80011b0:	f7ff fe92 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b4:	2360      	movs	r3, #96	; 0x60
 80011b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 21000-1;
 80011b8:	f245 2307 	movw	r3, #20999	; 0x5207
 80011bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	2200      	movs	r2, #0
 80011ca:	4619      	mov	r1, r3
 80011cc:	480e      	ldr	r0, [pc, #56]	; (8001208 <MX_TIM3_Init+0x104>)
 80011ce:	f001 ffed 	bl	80031ac <HAL_TIM_PWM_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80011d8:	f7ff fe7e 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.Pulse = 5250-1;
 80011dc:	f241 4381 	movw	r3, #5249	; 0x1481
 80011e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2204      	movs	r2, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	4807      	ldr	r0, [pc, #28]	; (8001208 <MX_TIM3_Init+0x104>)
 80011ea:	f001 ffdf 	bl	80031ac <HAL_TIM_PWM_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 80011f4:	f7ff fe70 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011f8:	4803      	ldr	r0, [pc, #12]	; (8001208 <MX_TIM3_Init+0x104>)
 80011fa:	f000 f931 	bl	8001460 <HAL_TIM_MspPostInit>

}
 80011fe:	bf00      	nop
 8001200:	3738      	adds	r7, #56	; 0x38
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20000120 	.word	0x20000120
 800120c:	40000400 	.word	0x40000400

08001210 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08e      	sub	sp, #56	; 0x38
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
 800123c:	615a      	str	r2, [r3, #20]
 800123e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <MX_TIM4_Init+0xe8>)
 8001242:	4a2e      	ldr	r2, [pc, #184]	; (80012fc <MX_TIM4_Init+0xec>)
 8001244:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 168-1;
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_TIM4_Init+0xe8>)
 8001248:	22a7      	movs	r2, #167	; 0xa7
 800124a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b2a      	ldr	r3, [pc, #168]	; (80012f8 <MX_TIM4_Init+0xe8>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_TIM4_Init+0xe8>)
 8001254:	f242 720f 	movw	r2, #9999	; 0x270f
 8001258:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b27      	ldr	r3, [pc, #156]	; (80012f8 <MX_TIM4_Init+0xe8>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_TIM4_Init+0xe8>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001266:	4824      	ldr	r0, [pc, #144]	; (80012f8 <MX_TIM4_Init+0xe8>)
 8001268:	f001 fcf4 	bl	8002c54 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001272:	f7ff fe31 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001280:	4619      	mov	r1, r3
 8001282:	481d      	ldr	r0, [pc, #116]	; (80012f8 <MX_TIM4_Init+0xe8>)
 8001284:	f002 f854 	bl	8003330 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800128e:	f7ff fe23 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001292:	4819      	ldr	r0, [pc, #100]	; (80012f8 <MX_TIM4_Init+0xe8>)
 8001294:	f001 fd90 	bl	8002db8 <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800129e:	f7ff fe1b 	bl	8000ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4619      	mov	r1, r3
 80012b0:	4811      	ldr	r0, [pc, #68]	; (80012f8 <MX_TIM4_Init+0xe8>)
 80012b2:	f002 fc05 	bl	8003ac0 <HAL_TIMEx_MasterConfigSynchronization>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80012bc:	f7ff fe0c 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c0:	2360      	movs	r3, #96	; 0x60
 80012c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80012c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <MX_TIM4_Init+0xe8>)
 80012da:	f001 ff67 	bl	80031ac <HAL_TIM_PWM_ConfigChannel>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80012e4:	f7ff fdf8 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <MX_TIM4_Init+0xe8>)
 80012ea:	f000 f8b9 	bl	8001460 <HAL_TIM_MspPostInit>

}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000168 	.word	0x20000168
 80012fc:	40000800 	.word	0x40000800

08001300 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001314:	1d3b      	adds	r3, r7, #4
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	609a      	str	r2, [r3, #8]
 800131e:	60da      	str	r2, [r3, #12]
 8001320:	611a      	str	r2, [r3, #16]
 8001322:	615a      	str	r2, [r3, #20]
 8001324:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <MX_TIM9_Init+0xbc>)
 8001328:	4a25      	ldr	r2, [pc, #148]	; (80013c0 <MX_TIM9_Init+0xc0>)
 800132a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 42;
 800132c:	4b23      	ldr	r3, [pc, #140]	; (80013bc <MX_TIM9_Init+0xbc>)
 800132e:	222a      	movs	r2, #42	; 0x2a
 8001330:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <MX_TIM9_Init+0xbc>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <MX_TIM9_Init+0xbc>)
 800133a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800133e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <MX_TIM9_Init+0xbc>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <MX_TIM9_Init+0xbc>)
 8001348:	2280      	movs	r2, #128	; 0x80
 800134a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800134c:	481b      	ldr	r0, [pc, #108]	; (80013bc <MX_TIM9_Init+0xbc>)
 800134e:	f001 fc81 	bl	8002c54 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001358:	f7ff fdbe 	bl	8000ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0320 	add.w	r3, r7, #32
 8001366:	4619      	mov	r1, r3
 8001368:	4814      	ldr	r0, [pc, #80]	; (80013bc <MX_TIM9_Init+0xbc>)
 800136a:	f001 ffe1 	bl	8003330 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001374:	f7ff fdb0 	bl	8000ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001378:	4810      	ldr	r0, [pc, #64]	; (80013bc <MX_TIM9_Init+0xbc>)
 800137a:	f001 fd1d 	bl	8002db8 <HAL_TIM_PWM_Init>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001384:	f7ff fda8 	bl	8000ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001388:	2360      	movs	r3, #96	; 0x60
 800138a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	4807      	ldr	r0, [pc, #28]	; (80013bc <MX_TIM9_Init+0xbc>)
 80013a0:	f001 ff04 	bl	80031ac <HAL_TIM_PWM_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80013aa:	f7ff fd95 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80013ae:	4803      	ldr	r0, [pc, #12]	; (80013bc <MX_TIM9_Init+0xbc>)
 80013b0:	f000 f856 	bl	8001460 <HAL_TIM_MspPostInit>

}
 80013b4:	bf00      	nop
 80013b6:	3730      	adds	r7, #48	; 0x30
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200001b0 	.word	0x200001b0
 80013c0:	40014000 	.word	0x40014000

080013c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b087      	sub	sp, #28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1f      	ldr	r2, [pc, #124]	; (8001450 <HAL_TIM_Base_MspInit+0x8c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d10e      	bne.n	80013f4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 80013f2:	e026      	b.n	8001442 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a17      	ldr	r2, [pc, #92]	; (8001458 <HAL_TIM_Base_MspInit+0x94>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10e      	bne.n	800141c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a13      	ldr	r2, [pc, #76]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
}
 800141a:	e012      	b.n	8001442 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM9)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_TIM_Base_MspInit+0x98>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d10d      	bne.n	8001442 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	4a09      	ldr	r2, [pc, #36]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 8001430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001434:	6453      	str	r3, [r2, #68]	; 0x44
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <HAL_TIM_Base_MspInit+0x90>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	60fb      	str	r3, [r7, #12]
 8001440:	68fb      	ldr	r3, [r7, #12]
}
 8001442:	bf00      	nop
 8001444:	371c      	adds	r7, #28
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40000400 	.word	0x40000400
 8001454:	40023800 	.word	0x40023800
 8001458:	40000800 	.word	0x40000800
 800145c:	40014000 	.word	0x40014000

08001460 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a36      	ldr	r2, [pc, #216]	; (8001558 <HAL_TIM_MspPostInit+0xf8>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d11e      	bne.n	80014c0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a34      	ldr	r2, [pc, #208]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b32      	ldr	r3, [pc, #200]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800149e:	23c0      	movs	r3, #192	; 0xc0
 80014a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014ae:	2302      	movs	r3, #2
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	4619      	mov	r1, r3
 80014b8:	4829      	ldr	r0, [pc, #164]	; (8001560 <HAL_TIM_MspPostInit+0x100>)
 80014ba:	f000 fdbd 	bl	8002038 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80014be:	e046      	b.n	800154e <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM4)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a27      	ldr	r2, [pc, #156]	; (8001564 <HAL_TIM_MspPostInit+0x104>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d11e      	bne.n	8001508 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b23      	ldr	r3, [pc, #140]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a22      	ldr	r2, [pc, #136]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 80014d4:	f043 0302 	orr.w	r3, r3, #2
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014e6:	2340      	movs	r3, #64	; 0x40
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014f6:	2302      	movs	r3, #2
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4819      	ldr	r0, [pc, #100]	; (8001568 <HAL_TIM_MspPostInit+0x108>)
 8001502:	f000 fd99 	bl	8002038 <HAL_GPIO_Init>
}
 8001506:	e022      	b.n	800154e <HAL_TIM_MspPostInit+0xee>
  else if(timHandle->Instance==TIM9)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_TIM_MspPostInit+0x10c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d11d      	bne.n	800154e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_TIM_MspPostInit+0xfc>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800152e:	2304      	movs	r3, #4
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001532:	2302      	movs	r3, #2
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800153e:	2303      	movs	r3, #3
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <HAL_TIM_MspPostInit+0x100>)
 800154a:	f000 fd75 	bl	8002038 <HAL_GPIO_Init>
}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40000400 	.word	0x40000400
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000
 8001564:	40000800 	.word	0x40000800
 8001568:	40020400 	.word	0x40020400
 800156c:	40014000 	.word	0x40014000

08001570 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <MX_USART1_UART_Init+0x50>)
 8001578:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 800157c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001580:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001582:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 8001596:	220c      	movs	r2, #12
 8001598:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159a:	4b08      	ldr	r3, [pc, #32]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <MX_USART1_UART_Init+0x4c>)
 80015a8:	f002 fb0c 	bl	8003bc4 <HAL_UART_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015b2:	f7ff fc91 	bl	8000ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001f8 	.word	0x200001f8
 80015c0:	40011000 	.word	0x40011000

080015c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <HAL_UART_MspInit+0xe4>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d15b      	bne.n	800169e <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_UART_MspInit+0xe8>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a2f      	ldr	r2, [pc, #188]	; (80016ac <HAL_UART_MspInit+0xe8>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_UART_MspInit+0xe8>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b29      	ldr	r3, [pc, #164]	; (80016ac <HAL_UART_MspInit+0xe8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_UART_MspInit+0xe8>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_UART_MspInit+0xe8>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800161e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162c:	2303      	movs	r3, #3
 800162e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001630:	2307      	movs	r3, #7
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	481d      	ldr	r0, [pc, #116]	; (80016b0 <HAL_UART_MspInit+0xec>)
 800163c:	f000 fcfc 	bl	8002038 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_UART_MspInit+0xf4>)
 8001644:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001648:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800164c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800165a:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 800165c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001660:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001670:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001674:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001684:	f000 f968 	bl	8001958 <HAL_DMA_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800168e:	f7ff fc23 	bl	8000ed8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 8001696:	63da      	str	r2, [r3, #60]	; 0x3c
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_UART_MspInit+0xf0>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800169e:	bf00      	nop
 80016a0:	3728      	adds	r7, #40	; 0x28
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40011000 	.word	0x40011000
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40020000 	.word	0x40020000
 80016b4:	20000240 	.word	0x20000240
 80016b8:	40026440 	.word	0x40026440

080016bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016c0:	f7ff fd0e 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c4:	480c      	ldr	r0, [pc, #48]	; (80016f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016c6:	490d      	ldr	r1, [pc, #52]	; (80016fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016cc:	e002      	b.n	80016d4 <LoopCopyDataInit>

080016ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016d2:	3304      	adds	r3, #4

080016d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d8:	d3f9      	bcc.n	80016ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016da:	4a0a      	ldr	r2, [pc, #40]	; (8001704 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016dc:	4c0a      	ldr	r4, [pc, #40]	; (8001708 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e0:	e001      	b.n	80016e6 <LoopFillZerobss>

080016e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e4:	3204      	adds	r2, #4

080016e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e8:	d3fb      	bcc.n	80016e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ea:	f005 feb5 	bl	8007458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ee:	f7ff fb3f 	bl	8000d70 <main>
  bx  lr    
 80016f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016f4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001700:	0800801c 	.word	0x0800801c
  ldr r2, =_sbss
 8001704:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001708:	20004c6c 	.word	0x20004c6c

0800170c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800170c:	e7fe      	b.n	800170c <ADC_IRQHandler>
	...

08001710 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001714:	4b0e      	ldr	r3, [pc, #56]	; (8001750 <HAL_Init+0x40>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0d      	ldr	r2, [pc, #52]	; (8001750 <HAL_Init+0x40>)
 800171a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001720:	4b0b      	ldr	r3, [pc, #44]	; (8001750 <HAL_Init+0x40>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_Init+0x40>)
 8001726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800172a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800172c:	4b08      	ldr	r3, [pc, #32]	; (8001750 <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a07      	ldr	r2, [pc, #28]	; (8001750 <HAL_Init+0x40>)
 8001732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001736:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001738:	2003      	movs	r0, #3
 800173a:	f000 f8d8 	bl	80018ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173e:	200f      	movs	r0, #15
 8001740:	f7ff fbfc 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001744:	f7ff fbce 	bl	8000ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023c00 	.word	0x40023c00

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	200002a0 	.word	0x200002a0

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	200002a0 	.word	0x200002a0

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	; (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	; (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	; (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	; 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff4c 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001916:	f7ff ff61 	bl	80017dc <__NVIC_GetPriorityGrouping>
 800191a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7ff ffb1 	bl	8001888 <NVIC_EncodePriority>
 8001926:	4602      	mov	r2, r0
 8001928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff80 	bl	8001834 <__NVIC_SetPriority>
}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff54 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff ff0a 	bl	800177c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e099      	b.n	8001aa8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2202      	movs	r2, #2
 8001978:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0201 	bic.w	r2, r2, #1
 8001992:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001994:	e00f      	b.n	80019b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001996:	f7ff fef1 	bl	800177c <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d908      	bls.n	80019b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2203      	movs	r2, #3
 80019ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e078      	b.n	8001aa8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e8      	bne.n	8001996 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_DMA_Init+0x158>)
 80019d0:	4013      	ands	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d107      	bne.n	8001a20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f023 0307 	bic.w	r3, r3, #7
 8001a36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d117      	bne.n	8001a7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fa6f 	bl	8001f40 <DMA_CheckFifoParam>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d008      	beq.n	8001a7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a76:	2301      	movs	r3, #1
 8001a78:	e016      	b.n	8001aa8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fa26 	bl	8001ed4 <DMA_CalcBaseAndBitshift>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a90:	223f      	movs	r2, #63	; 0x3f
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3718      	adds	r7, #24
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	f010803f 	.word	0xf010803f

08001ab4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d101      	bne.n	8001ada <HAL_DMA_Start_IT+0x26>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e040      	b.n	8001b5c <HAL_DMA_Start_IT+0xa8>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d12f      	bne.n	8001b4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2202      	movs	r2, #2
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f9b8 	bl	8001e78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0c:	223f      	movs	r2, #63	; 0x3f
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 0216 	orr.w	r2, r2, #22
 8001b22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d007      	beq.n	8001b3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f042 0208 	orr.w	r2, r2, #8
 8001b3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	e005      	b.n	8001b5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
 8001b58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b70:	4b8e      	ldr	r3, [pc, #568]	; (8001dac <HAL_DMA_IRQHandler+0x248>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a8e      	ldr	r2, [pc, #568]	; (8001db0 <HAL_DMA_IRQHandler+0x24c>)
 8001b76:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7a:	0a9b      	lsrs	r3, r3, #10
 8001b7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	2208      	movs	r2, #8
 8001b90:	409a      	lsls	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4013      	ands	r3, r2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01a      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 0204 	bic.w	r2, r2, #4
 8001bb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f043 0201 	orr.w	r2, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d012      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00b      	beq.n	8001c06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	f043 0202 	orr.w	r2, r3, #2
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d012      	beq.n	8001c3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00b      	beq.n	8001c3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	2204      	movs	r2, #4
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c40:	2210      	movs	r2, #16
 8001c42:	409a      	lsls	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4013      	ands	r3, r2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d043      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d03c      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5e:	2210      	movs	r2, #16
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d018      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d108      	bne.n	8001c94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d024      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	4798      	blx	r3
 8001c92:	e01f      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d01b      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	4798      	blx	r3
 8001ca4:	e016      	b.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d107      	bne.n	8001cc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f022 0208 	bic.w	r2, r2, #8
 8001cc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd8:	2220      	movs	r2, #32
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 808f 	beq.w	8001e04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 8087 	beq.w	8001e04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfa:	2220      	movs	r2, #32
 8001cfc:	409a      	lsls	r2, r3
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d136      	bne.n	8001d7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0216 	bic.w	r2, r2, #22
 8001d1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695a      	ldr	r2, [r3, #20]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <HAL_DMA_IRQHandler+0x1da>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d007      	beq.n	8001d4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0208 	bic.w	r2, r2, #8
 8001d4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	223f      	movs	r2, #63	; 0x3f
 8001d54:	409a      	lsls	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d07e      	beq.n	8001e70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
        }
        return;
 8001d7a:	e079      	b.n	8001e70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01d      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10d      	bne.n	8001db4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d031      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	4798      	blx	r3
 8001da8:	e02c      	b.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
 8001daa:	bf00      	nop
 8001dac:	20000000 	.word	0x20000000
 8001db0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d023      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
 8001dc4:	e01e      	b.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10f      	bne.n	8001df4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0210 	bic.w	r2, r2, #16
 8001de2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d003      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d032      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d022      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2205      	movs	r2, #5
 8001e1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f022 0201 	bic.w	r2, r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3301      	adds	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d307      	bcc.n	8001e4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f2      	bne.n	8001e30 <HAL_DMA_IRQHandler+0x2cc>
 8001e4a:	e000      	b.n	8001e4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
 8001e6e:	e000      	b.n	8001e72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e70:	bf00      	nop
    }
  }
}
 8001e72:	3718      	adds	r7, #24
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2b40      	cmp	r3, #64	; 0x40
 8001ea4:	d108      	bne.n	8001eb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001eb6:	e007      	b.n	8001ec8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68ba      	ldr	r2, [r7, #8]
 8001ebe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	60da      	str	r2, [r3, #12]
}
 8001ec8:	bf00      	nop
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	3b10      	subs	r3, #16
 8001ee4:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <DMA_CalcBaseAndBitshift+0x64>)
 8001ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eea:	091b      	lsrs	r3, r3, #4
 8001eec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <DMA_CalcBaseAndBitshift+0x68>)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d909      	bls.n	8001f16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	1d1a      	adds	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	659a      	str	r2, [r3, #88]	; 0x58
 8001f14:	e007      	b.n	8001f26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001f1e:	f023 0303 	bic.w	r3, r3, #3
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	aaaaaaab 	.word	0xaaaaaaab
 8001f3c:	08007fd0 	.word	0x08007fd0

08001f40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d11f      	bne.n	8001f9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d856      	bhi.n	800200e <DMA_CheckFifoParam+0xce>
 8001f60:	a201      	add	r2, pc, #4	; (adr r2, 8001f68 <DMA_CheckFifoParam+0x28>)
 8001f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f66:	bf00      	nop
 8001f68:	08001f79 	.word	0x08001f79
 8001f6c:	08001f8b 	.word	0x08001f8b
 8001f70:	08001f79 	.word	0x08001f79
 8001f74:	0800200f 	.word	0x0800200f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d046      	beq.n	8002012 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f88:	e043      	b.n	8002012 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f92:	d140      	bne.n	8002016 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f98:	e03d      	b.n	8002016 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fa2:	d121      	bne.n	8001fe8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b03      	cmp	r3, #3
 8001fa8:	d837      	bhi.n	800201a <DMA_CheckFifoParam+0xda>
 8001faa:	a201      	add	r2, pc, #4	; (adr r2, 8001fb0 <DMA_CheckFifoParam+0x70>)
 8001fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb0:	08001fc1 	.word	0x08001fc1
 8001fb4:	08001fc7 	.word	0x08001fc7
 8001fb8:	08001fc1 	.word	0x08001fc1
 8001fbc:	08001fd9 	.word	0x08001fd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc4:	e030      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d025      	beq.n	800201e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd6:	e022      	b.n	800201e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fdc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fe0:	d11f      	bne.n	8002022 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fe6:	e01c      	b.n	8002022 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d903      	bls.n	8001ff6 <DMA_CheckFifoParam+0xb6>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d003      	beq.n	8001ffc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ff4:	e018      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8001ffa:	e015      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00e      	beq.n	8002026 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	73fb      	strb	r3, [r7, #15]
      break;
 800200c:	e00b      	b.n	8002026 <DMA_CheckFifoParam+0xe6>
      break;
 800200e:	bf00      	nop
 8002010:	e00a      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
 8002014:	e008      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 8002016:	bf00      	nop
 8002018:	e006      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 800201a:	bf00      	nop
 800201c:	e004      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 800201e:	bf00      	nop
 8002020:	e002      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;   
 8002022:	bf00      	nop
 8002024:	e000      	b.n	8002028 <DMA_CheckFifoParam+0xe8>
      break;
 8002026:	bf00      	nop
    }
  } 
  
  return status; 
 8002028:	7bfb      	ldrb	r3, [r7, #15]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	; 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e159      	b.n	8002308 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8148 	bne.w	8002302 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a2 	beq.w	8002302 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b57      	ldr	r3, [pc, #348]	; (8002320 <HAL_GPIO_Init+0x2e8>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	4a56      	ldr	r2, [pc, #344]	; (8002320 <HAL_GPIO_Init+0x2e8>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	; 0x44
 80021ce:	4b54      	ldr	r3, [pc, #336]	; (8002320 <HAL_GPIO_Init+0x2e8>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_GPIO_Init+0x2ec>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a49      	ldr	r2, [pc, #292]	; (8002328 <HAL_GPIO_Init+0x2f0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d019      	beq.n	800223a <HAL_GPIO_Init+0x202>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a48      	ldr	r2, [pc, #288]	; (800232c <HAL_GPIO_Init+0x2f4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0x1fe>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a47      	ldr	r2, [pc, #284]	; (8002330 <HAL_GPIO_Init+0x2f8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00d      	beq.n	8002232 <HAL_GPIO_Init+0x1fa>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a46      	ldr	r2, [pc, #280]	; (8002334 <HAL_GPIO_Init+0x2fc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x1f6>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a45      	ldr	r2, [pc, #276]	; (8002338 <HAL_GPIO_Init+0x300>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_GPIO_Init+0x1f2>
 8002226:	2304      	movs	r3, #4
 8002228:	e008      	b.n	800223c <HAL_GPIO_Init+0x204>
 800222a:	2307      	movs	r3, #7
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x204>
 800222e:	2303      	movs	r3, #3
 8002230:	e004      	b.n	800223c <HAL_GPIO_Init+0x204>
 8002232:	2302      	movs	r3, #2
 8002234:	e002      	b.n	800223c <HAL_GPIO_Init+0x204>
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_GPIO_Init+0x204>
 800223a:	2300      	movs	r3, #0
 800223c:	69fa      	ldr	r2, [r7, #28]
 800223e:	f002 0203 	and.w	r2, r2, #3
 8002242:	0092      	lsls	r2, r2, #2
 8002244:	4093      	lsls	r3, r2
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800224c:	4935      	ldr	r1, [pc, #212]	; (8002324 <HAL_GPIO_Init+0x2ec>)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	089b      	lsrs	r3, r3, #2
 8002252:	3302      	adds	r3, #2
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <HAL_GPIO_Init+0x304>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	43db      	mvns	r3, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4013      	ands	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d003      	beq.n	800227e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800227e:	4a2f      	ldr	r2, [pc, #188]	; (800233c <HAL_GPIO_Init+0x304>)
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002284:	4b2d      	ldr	r3, [pc, #180]	; (800233c <HAL_GPIO_Init+0x304>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <HAL_GPIO_Init+0x304>)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <HAL_GPIO_Init+0x304>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d2:	4a1a      	ldr	r2, [pc, #104]	; (800233c <HAL_GPIO_Init+0x304>)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <HAL_GPIO_Init+0x304>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	4013      	ands	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022fc:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_GPIO_Init+0x304>)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3301      	adds	r3, #1
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2b0f      	cmp	r3, #15
 800230c:	f67f aea2 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	40023800 	.word	0x40023800
 8002324:	40013800 	.word	0x40013800
 8002328:	40020000 	.word	0x40020000
 800232c:	40020400 	.word	0x40020400
 8002330:	40020800 	.word	0x40020800
 8002334:	40020c00 	.word	0x40020c00
 8002338:	40021000 	.word	0x40021000
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e267      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d075      	beq.n	800244a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800235e:	4b88      	ldr	r3, [pc, #544]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	2b04      	cmp	r3, #4
 8002368:	d00c      	beq.n	8002384 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800236a:	4b85      	ldr	r3, [pc, #532]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002372:	2b08      	cmp	r3, #8
 8002374:	d112      	bne.n	800239c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002376:	4b82      	ldr	r3, [pc, #520]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002382:	d10b      	bne.n	800239c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002384:	4b7e      	ldr	r3, [pc, #504]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d05b      	beq.n	8002448 <HAL_RCC_OscConfig+0x108>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d157      	bne.n	8002448 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e242      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d106      	bne.n	80023b4 <HAL_RCC_OscConfig+0x74>
 80023a6:	4b76      	ldr	r3, [pc, #472]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a75      	ldr	r2, [pc, #468]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	e01d      	b.n	80023f0 <HAL_RCC_OscConfig+0xb0>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x98>
 80023be:	4b70      	ldr	r3, [pc, #448]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a6f      	ldr	r2, [pc, #444]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a6c      	ldr	r2, [pc, #432]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0xb0>
 80023d8:	4b69      	ldr	r3, [pc, #420]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a68      	ldr	r2, [pc, #416]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a65      	ldr	r2, [pc, #404]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80023ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7ff f9c0 	bl	800177c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002400:	f7ff f9bc 	bl	800177c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b64      	cmp	r3, #100	; 0x64
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e207      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	4b5b      	ldr	r3, [pc, #364]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0xc0>
 800241e:	e014      	b.n	800244a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff f9ac 	bl	800177c <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002428:	f7ff f9a8 	bl	800177c <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b64      	cmp	r3, #100	; 0x64
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e1f3      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	4b51      	ldr	r3, [pc, #324]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0xe8>
 8002446:	e000      	b.n	800244a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d063      	beq.n	800251e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002456:	4b4a      	ldr	r3, [pc, #296]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 030c 	and.w	r3, r3, #12
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002462:	4b47      	ldr	r3, [pc, #284]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246a:	2b08      	cmp	r3, #8
 800246c:	d11c      	bne.n	80024a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800246e:	4b44      	ldr	r3, [pc, #272]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d116      	bne.n	80024a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d005      	beq.n	8002492 <HAL_RCC_OscConfig+0x152>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e1c7      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b3b      	ldr	r3, [pc, #236]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	4937      	ldr	r1, [pc, #220]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	e03a      	b.n	800251e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024b0:	4b34      	ldr	r3, [pc, #208]	; (8002584 <HAL_RCC_OscConfig+0x244>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b6:	f7ff f961 	bl	800177c <HAL_GetTick>
 80024ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024bc:	e008      	b.n	80024d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024be:	f7ff f95d 	bl	800177c <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e1a8      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	4b2b      	ldr	r3, [pc, #172]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d0f0      	beq.n	80024be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024dc:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	4925      	ldr	r1, [pc, #148]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	600b      	str	r3, [r1, #0]
 80024f0:	e015      	b.n	800251e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_OscConfig+0x244>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff f940 	bl	800177c <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002500:	f7ff f93c 	bl	800177c <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e187      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0308 	and.w	r3, r3, #8
 8002526:	2b00      	cmp	r3, #0
 8002528:	d036      	beq.n	8002598 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d016      	beq.n	8002560 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002532:	4b15      	ldr	r3, [pc, #84]	; (8002588 <HAL_RCC_OscConfig+0x248>)
 8002534:	2201      	movs	r2, #1
 8002536:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff f920 	bl	800177c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002540:	f7ff f91c 	bl	800177c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e167      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <HAL_RCC_OscConfig+0x240>)
 8002554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x200>
 800255e:	e01b      	b.n	8002598 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_RCC_OscConfig+0x248>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002566:	f7ff f909 	bl	800177c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800256c:	e00e      	b.n	800258c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256e:	f7ff f905 	bl	800177c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d907      	bls.n	800258c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e150      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
 8002580:	40023800 	.word	0x40023800
 8002584:	42470000 	.word	0x42470000
 8002588:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800258c:	4b88      	ldr	r3, [pc, #544]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1ea      	bne.n	800256e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 8097 	beq.w	80026d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80025ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d10f      	bne.n	80025d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b7d      	ldr	r3, [pc, #500]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4a7c      	ldr	r2, [pc, #496]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6413      	str	r3, [r2, #64]	; 0x40
 80025c6:	4b7a      	ldr	r3, [pc, #488]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d2:	2301      	movs	r3, #1
 80025d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d6:	4b77      	ldr	r3, [pc, #476]	; (80027b4 <HAL_RCC_OscConfig+0x474>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d118      	bne.n	8002614 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e2:	4b74      	ldr	r3, [pc, #464]	; (80027b4 <HAL_RCC_OscConfig+0x474>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a73      	ldr	r2, [pc, #460]	; (80027b4 <HAL_RCC_OscConfig+0x474>)
 80025e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ee:	f7ff f8c5 	bl	800177c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f6:	f7ff f8c1 	bl	800177c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e10c      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x474>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0f0      	beq.n	80025f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d106      	bne.n	800262a <HAL_RCC_OscConfig+0x2ea>
 800261c:	4b64      	ldr	r3, [pc, #400]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a63      	ldr	r2, [pc, #396]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	e01c      	b.n	8002664 <HAL_RCC_OscConfig+0x324>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0x30c>
 8002632:	4b5f      	ldr	r3, [pc, #380]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a5e      	ldr	r2, [pc, #376]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002638:	f043 0304 	orr.w	r3, r3, #4
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	4b5c      	ldr	r3, [pc, #368]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	4a5b      	ldr	r2, [pc, #364]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6713      	str	r3, [r2, #112]	; 0x70
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0x324>
 800264c:	4b58      	ldr	r3, [pc, #352]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a57      	ldr	r2, [pc, #348]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002652:	f023 0301 	bic.w	r3, r3, #1
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a54      	ldr	r2, [pc, #336]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800265e:	f023 0304 	bic.w	r3, r3, #4
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d015      	beq.n	8002698 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff f886 	bl	800177c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002672:	e00a      	b.n	800268a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002674:	f7ff f882 	bl	800177c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e0cb      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ee      	beq.n	8002674 <HAL_RCC_OscConfig+0x334>
 8002696:	e014      	b.n	80026c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002698:	f7ff f870 	bl	800177c <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a0:	f7ff f86c 	bl	800177c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0b5      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1ee      	bne.n	80026a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d105      	bne.n	80026d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c8:	4b39      	ldr	r3, [pc, #228]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	4a38      	ldr	r2, [pc, #224]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80026ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 80a1 	beq.w	8002820 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026de:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b08      	cmp	r3, #8
 80026e8:	d05c      	beq.n	80027a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d141      	bne.n	8002776 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f2:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <HAL_RCC_OscConfig+0x478>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff f840 	bl	800177c <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002700:	f7ff f83c 	bl	800177c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e087      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	019b      	lsls	r3, r3, #6
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	085b      	lsrs	r3, r3, #1
 8002736:	3b01      	subs	r3, #1
 8002738:	041b      	lsls	r3, r3, #16
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	491b      	ldr	r1, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <HAL_RCC_OscConfig+0x478>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274e:	f7ff f815 	bl	800177c <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002756:	f7ff f811 	bl	800177c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e05c      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x416>
 8002774:	e054      	b.n	8002820 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_RCC_OscConfig+0x478>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fffe 	bl	800177c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002784:	f7fe fffa 	bl	800177c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b02      	cmp	r3, #2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e045      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_RCC_OscConfig+0x470>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1f0      	bne.n	8002784 <HAL_RCC_OscConfig+0x444>
 80027a2:	e03d      	b.n	8002820 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e038      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40007000 	.word	0x40007000
 80027b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCC_OscConfig+0x4ec>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d028      	beq.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d121      	bne.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d11a      	bne.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027ec:	4013      	ands	r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d111      	bne.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	085b      	lsrs	r3, r3, #1
 8002804:	3b01      	subs	r3, #1
 8002806:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d107      	bne.n	800281c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800

08002830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0cc      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d90c      	bls.n	800286c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0b8      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a58      	ldr	r2, [pc, #352]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800288e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	494d      	ldr	r1, [pc, #308]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d044      	beq.n	8002950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d119      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e07f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d003      	beq.n	80028ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e067      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 0203 	bic.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4934      	ldr	r1, [pc, #208]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002920:	f7fe ff2c 	bl	800177c <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	e00a      	b.n	800293e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002928:	f7fe ff28 	bl	800177c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e04f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 020c 	and.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d1eb      	bne.n	8002928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d20c      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0307 	and.w	r3, r3, #7
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e032      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4916      	ldr	r1, [pc, #88]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	490e      	ldr	r1, [pc, #56]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b6:	f000 f821 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80029ba:	4602      	mov	r2, r0
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	490a      	ldr	r1, [pc, #40]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	5ccb      	ldrb	r3, [r1, r3]
 80029ca:	fa22 f303 	lsr.w	r3, r2, r3
 80029ce:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1c8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe fab0 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023c00 	.word	0x40023c00
 80029ec:	40023800 	.word	0x40023800
 80029f0:	08007fb8 	.word	0x08007fb8
 80029f4:	20000000 	.word	0x20000000
 80029f8:	20000004 	.word	0x20000004

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a00:	b090      	sub	sp, #64	; 0x40
 8002a02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34
 8002a08:	2300      	movs	r3, #0
 8002a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a14:	4b59      	ldr	r3, [pc, #356]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d00d      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x40>
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	f200 80a1 	bhi.w	8002b68 <HAL_RCC_GetSysClockFreq+0x16c>
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d002      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x34>
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d003      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a2e:	e09b      	b.n	8002b68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002a34:	e09b      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a36:	4b53      	ldr	r3, [pc, #332]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a3a:	e098      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a3c:	4b4f      	ldr	r3, [pc, #316]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a46:	4b4d      	ldr	r3, [pc, #308]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d028      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a52:	4b4a      	ldr	r3, [pc, #296]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	2200      	movs	r2, #0
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	627a      	str	r2, [r7, #36]	; 0x24
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a64:	2100      	movs	r1, #0
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a68:	fb03 f201 	mul.w	r2, r3, r1
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	fb00 f303 	mul.w	r3, r0, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	4a43      	ldr	r2, [pc, #268]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a76:	fba0 1202 	umull	r1, r2, r0, r2
 8002a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a7c:	460a      	mov	r2, r1
 8002a7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a82:	4413      	add	r3, r2
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a88:	2200      	movs	r2, #0
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	61fa      	str	r2, [r7, #28]
 8002a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a96:	f7fd fbf3 	bl	8000280 <__aeabi_uldivmod>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa2:	e053      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	2200      	movs	r2, #0
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	617a      	str	r2, [r7, #20]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ab6:	f04f 0b00 	mov.w	fp, #0
 8002aba:	4652      	mov	r2, sl
 8002abc:	465b      	mov	r3, fp
 8002abe:	f04f 0000 	mov.w	r0, #0
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	0159      	lsls	r1, r3, #5
 8002ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002acc:	0150      	lsls	r0, r2, #5
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	ebb2 080a 	subs.w	r8, r2, sl
 8002ad6:	eb63 090b 	sbc.w	r9, r3, fp
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	f04f 0300 	mov.w	r3, #0
 8002ae2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ae6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002aea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002aee:	ebb2 0408 	subs.w	r4, r2, r8
 8002af2:	eb63 0509 	sbc.w	r5, r3, r9
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	00eb      	lsls	r3, r5, #3
 8002b00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b04:	00e2      	lsls	r2, r4, #3
 8002b06:	4614      	mov	r4, r2
 8002b08:	461d      	mov	r5, r3
 8002b0a:	eb14 030a 	adds.w	r3, r4, sl
 8002b0e:	603b      	str	r3, [r7, #0]
 8002b10:	eb45 030b 	adc.w	r3, r5, fp
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	f04f 0300 	mov.w	r3, #0
 8002b1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b22:	4629      	mov	r1, r5
 8002b24:	028b      	lsls	r3, r1, #10
 8002b26:	4621      	mov	r1, r4
 8002b28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b2c:	4621      	mov	r1, r4
 8002b2e:	028a      	lsls	r2, r1, #10
 8002b30:	4610      	mov	r0, r2
 8002b32:	4619      	mov	r1, r3
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	2200      	movs	r2, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b40:	f7fd fb9e 	bl	8000280 <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b4c:	4b0b      	ldr	r3, [pc, #44]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	0c1b      	lsrs	r3, r3, #16
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	3301      	adds	r3, #1
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002b5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b66:	e002      	b.n	8002b6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x184>)
 8002b6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3740      	adds	r7, #64	; 0x40
 8002b74:	46bd      	mov	sp, r7
 8002b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	00f42400 	.word	0x00f42400
 8002b84:	017d7840 	.word	0x017d7840

08002b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	20000000 	.word	0x20000000

08002ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ba4:	f7ff fff0 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0a9b      	lsrs	r3, r3, #10
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	08007fc8 	.word	0x08007fc8

08002bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bcc:	f7ff ffdc 	bl	8002b88 <HAL_RCC_GetHCLKFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b05      	ldr	r3, [pc, #20]	; (8002be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	0b5b      	lsrs	r3, r3, #13
 8002bd8:	f003 0307 	and.w	r3, r3, #7
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40023800 	.word	0x40023800
 8002bec:	08007fc8 	.word	0x08007fc8

08002bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	220f      	movs	r2, #15
 8002bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002c00:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 0203 	and.w	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002c18:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <HAL_RCC_GetClockConfig+0x5c>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	08db      	lsrs	r3, r3, #3
 8002c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <HAL_RCC_GetClockConfig+0x60>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0207 	and.w	r2, r3, #7
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	601a      	str	r2, [r3, #0]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40023c00 	.word	0x40023c00

08002c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e041      	b.n	8002cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d106      	bne.n	8002c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7fe fba2 	bl	80013c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2202      	movs	r2, #2
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3304      	adds	r3, #4
 8002c90:	4619      	mov	r1, r3
 8002c92:	4610      	mov	r0, r2
 8002c94:	f000 fc3c 	bl	8003510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d001      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e044      	b.n	8002d96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d018      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x6c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d013      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x6c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a1a      	ldr	r2, [pc, #104]	; (8002da8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00e      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x6c>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a19      	ldr	r2, [pc, #100]	; (8002dac <HAL_TIM_Base_Start_IT+0xb8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d009      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x6c>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a17      	ldr	r2, [pc, #92]	; (8002db0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <HAL_TIM_Base_Start_IT+0x6c>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <HAL_TIM_Base_Start_IT+0xc0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d111      	bne.n	8002d84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d010      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d82:	e007      	b.n	8002d94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
 8002da2:	bf00      	nop
 8002da4:	40010000 	.word	0x40010000
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800
 8002db0:	40000c00 	.word	0x40000c00
 8002db4:	40014000 	.word	0x40014000

08002db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e041      	b.n	8002e4e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f839 	bl	8002e56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2202      	movs	r2, #2
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f000 fb8a 	bl	8003510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e56:	b480      	push	{r7}
 8002e58:	b083      	sub	sp, #12
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e5e:	bf00      	nop
 8002e60:	370c      	adds	r7, #12
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
	...

08002e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d109      	bne.n	8002e90 <HAL_TIM_PWM_Start+0x24>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	bf14      	ite	ne
 8002e88:	2301      	movne	r3, #1
 8002e8a:	2300      	moveq	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e022      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x6a>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d109      	bne.n	8002eaa <HAL_TIM_PWM_Start+0x3e>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	bf14      	ite	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	2300      	moveq	r3, #0
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	e015      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x6a>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d109      	bne.n	8002ec4 <HAL_TIM_PWM_Start+0x58>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e008      	b.n	8002ed6 <HAL_TIM_PWM_Start+0x6a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e068      	b.n	8002fb0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <HAL_TIM_PWM_Start+0x82>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002eec:	e013      	b.n	8002f16 <HAL_TIM_PWM_Start+0xaa>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d104      	bne.n	8002efe <HAL_TIM_PWM_Start+0x92>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002efc:	e00b      	b.n	8002f16 <HAL_TIM_PWM_Start+0xaa>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d104      	bne.n	8002f0e <HAL_TIM_PWM_Start+0xa2>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f0c:	e003      	b.n	8002f16 <HAL_TIM_PWM_Start+0xaa>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	6839      	ldr	r1, [r7, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 fda8 	bl	8003a74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a23      	ldr	r2, [pc, #140]	; (8002fb8 <HAL_TIM_PWM_Start+0x14c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d107      	bne.n	8002f3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a1d      	ldr	r2, [pc, #116]	; (8002fb8 <HAL_TIM_PWM_Start+0x14c>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d018      	beq.n	8002f7a <HAL_TIM_PWM_Start+0x10e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f50:	d013      	beq.n	8002f7a <HAL_TIM_PWM_Start+0x10e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a19      	ldr	r2, [pc, #100]	; (8002fbc <HAL_TIM_PWM_Start+0x150>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_TIM_PWM_Start+0x10e>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <HAL_TIM_PWM_Start+0x154>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_TIM_PWM_Start+0x10e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a16      	ldr	r2, [pc, #88]	; (8002fc4 <HAL_TIM_PWM_Start+0x158>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIM_PWM_Start+0x10e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a14      	ldr	r2, [pc, #80]	; (8002fc8 <HAL_TIM_PWM_Start+0x15c>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d111      	bne.n	8002f9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d010      	beq.n	8002fae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	e007      	b.n	8002fae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40010000 	.word	0x40010000
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800
 8002fc4:	40000c00 	.word	0x40000c00
 8002fc8:	40014000 	.word	0x40014000

08002fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d020      	beq.n	8003030 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0202 	mvn.w	r2, #2
 8003000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f003 0303 	and.w	r3, r3, #3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fa5b 	bl	80034d2 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 fa4d 	bl	80034be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 fa5e 	bl	80034e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0204 	mvn.w	r2, #4
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 fa35 	bl	80034d2 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fa27 	bl	80034be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fa38 	bl	80034e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d020      	beq.n	80030c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0208 	mvn.w	r2, #8
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2204      	movs	r2, #4
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa0f 	bl	80034d2 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 fa01 	bl	80034be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 fa12 	bl	80034e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d020      	beq.n	8003114 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0210 	mvn.w	r2, #16
 80030e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2208      	movs	r2, #8
 80030ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f9e9 	bl	80034d2 <HAL_TIM_IC_CaptureCallback>
 8003100:	e005      	b.n	800310e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f9db 	bl	80034be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f9ec 	bl	80034e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0201 	mvn.w	r2, #1
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd febe 	bl	8000eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fd2a 	bl	8003bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f9bd 	bl	80034fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0220 	mvn.w	r2, #32
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 fcfc 	bl	8003b9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031c6:	2302      	movs	r3, #2
 80031c8:	e0ae      	b.n	8003328 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b0c      	cmp	r3, #12
 80031d6:	f200 809f 	bhi.w	8003318 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031da:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e0:	08003215 	.word	0x08003215
 80031e4:	08003319 	.word	0x08003319
 80031e8:	08003319 	.word	0x08003319
 80031ec:	08003319 	.word	0x08003319
 80031f0:	08003255 	.word	0x08003255
 80031f4:	08003319 	.word	0x08003319
 80031f8:	08003319 	.word	0x08003319
 80031fc:	08003319 	.word	0x08003319
 8003200:	08003297 	.word	0x08003297
 8003204:	08003319 	.word	0x08003319
 8003208:	08003319 	.word	0x08003319
 800320c:	08003319 	.word	0x08003319
 8003210:	080032d7 	.word	0x080032d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fa04 	bl	8003628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0204 	bic.w	r2, r2, #4
 800323e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6999      	ldr	r1, [r3, #24]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	619a      	str	r2, [r3, #24]
      break;
 8003252:	e064      	b.n	800331e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fa4a 	bl	80036f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6999      	ldr	r1, [r3, #24]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	021a      	lsls	r2, r3, #8
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	619a      	str	r2, [r3, #24]
      break;
 8003294:	e043      	b.n	800331e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fa95 	bl	80037cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0208 	orr.w	r2, r2, #8
 80032b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0204 	bic.w	r2, r2, #4
 80032c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69d9      	ldr	r1, [r3, #28]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	61da      	str	r2, [r3, #28]
      break;
 80032d4:	e023      	b.n	800331e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fadf 	bl	80038a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69d9      	ldr	r1, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	021a      	lsls	r2, r3, #8
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	61da      	str	r2, [r3, #28]
      break;
 8003316:	e002      	b.n	800331e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	75fb      	strb	r3, [r7, #23]
      break;
 800331c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003326:	7dfb      	ldrb	r3, [r7, #23]
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_TIM_ConfigClockSource+0x1c>
 8003348:	2302      	movs	r3, #2
 800334a:	e0b4      	b.n	80034b6 <HAL_TIM_ConfigClockSource+0x186>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800336a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003384:	d03e      	beq.n	8003404 <HAL_TIM_ConfigClockSource+0xd4>
 8003386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800338a:	f200 8087 	bhi.w	800349c <HAL_TIM_ConfigClockSource+0x16c>
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003392:	f000 8086 	beq.w	80034a2 <HAL_TIM_ConfigClockSource+0x172>
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	d87f      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b70      	cmp	r3, #112	; 0x70
 800339e:	d01a      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0xa6>
 80033a0:	2b70      	cmp	r3, #112	; 0x70
 80033a2:	d87b      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	2b60      	cmp	r3, #96	; 0x60
 80033a6:	d050      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x11a>
 80033a8:	2b60      	cmp	r3, #96	; 0x60
 80033aa:	d877      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b50      	cmp	r3, #80	; 0x50
 80033ae:	d03c      	beq.n	800342a <HAL_TIM_ConfigClockSource+0xfa>
 80033b0:	2b50      	cmp	r3, #80	; 0x50
 80033b2:	d873      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x16c>
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d058      	beq.n	800346a <HAL_TIM_ConfigClockSource+0x13a>
 80033b8:	2b40      	cmp	r3, #64	; 0x40
 80033ba:	d86f      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x16c>
 80033bc:	2b30      	cmp	r3, #48	; 0x30
 80033be:	d064      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x15a>
 80033c0:	2b30      	cmp	r3, #48	; 0x30
 80033c2:	d86b      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x16c>
 80033c4:	2b20      	cmp	r3, #32
 80033c6:	d060      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x15a>
 80033c8:	2b20      	cmp	r3, #32
 80033ca:	d867      	bhi.n	800349c <HAL_TIM_ConfigClockSource+0x16c>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05c      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x15a>
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d05a      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x15a>
 80033d4:	e062      	b.n	800349c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033e6:	f000 fb25 	bl	8003a34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	609a      	str	r2, [r3, #8]
      break;
 8003402:	e04f      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003414:	f000 fb0e 	bl	8003a34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003426:	609a      	str	r2, [r3, #8]
      break;
 8003428:	e03c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003436:	461a      	mov	r2, r3
 8003438:	f000 fa82 	bl	8003940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2150      	movs	r1, #80	; 0x50
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fadb 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 8003448:	e02c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003456:	461a      	mov	r2, r3
 8003458:	f000 faa1 	bl	800399e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2160      	movs	r1, #96	; 0x60
 8003462:	4618      	mov	r0, r3
 8003464:	f000 facb 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 8003468:	e01c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003476:	461a      	mov	r2, r3
 8003478:	f000 fa62 	bl	8003940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2140      	movs	r1, #64	; 0x40
 8003482:	4618      	mov	r0, r3
 8003484:	f000 fabb 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 8003488:	e00c      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f000 fab2 	bl	80039fe <TIM_ITRx_SetConfig>
      break;
 800349a:	e003      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	73fb      	strb	r3, [r7, #15]
      break;
 80034a0:	e000      	b.n	80034a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a3a      	ldr	r2, [pc, #232]	; (800360c <TIM_Base_SetConfig+0xfc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d00f      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800352e:	d00b      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a37      	ldr	r2, [pc, #220]	; (8003610 <TIM_Base_SetConfig+0x100>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d007      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a36      	ldr	r2, [pc, #216]	; (8003614 <TIM_Base_SetConfig+0x104>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d003      	beq.n	8003548 <TIM_Base_SetConfig+0x38>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a35      	ldr	r2, [pc, #212]	; (8003618 <TIM_Base_SetConfig+0x108>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d108      	bne.n	800355a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800354e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4313      	orrs	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a2b      	ldr	r2, [pc, #172]	; (800360c <TIM_Base_SetConfig+0xfc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01b      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003568:	d017      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a28      	ldr	r2, [pc, #160]	; (8003610 <TIM_Base_SetConfig+0x100>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a27      	ldr	r2, [pc, #156]	; (8003614 <TIM_Base_SetConfig+0x104>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d00f      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <TIM_Base_SetConfig+0x108>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00b      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a25      	ldr	r2, [pc, #148]	; (800361c <TIM_Base_SetConfig+0x10c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a24      	ldr	r2, [pc, #144]	; (8003620 <TIM_Base_SetConfig+0x110>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_Base_SetConfig+0x8a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a23      	ldr	r2, [pc, #140]	; (8003624 <TIM_Base_SetConfig+0x114>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d108      	bne.n	80035ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <TIM_Base_SetConfig+0xfc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d103      	bne.n	80035e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f023 0201 	bic.w	r2, r3, #1
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]
  }
}
 80035fe:	bf00      	nop
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 0201 	bic.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f023 0302 	bic.w	r3, r3, #2
 8003670:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <TIM_OC1_SetConfig+0xc8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d10c      	bne.n	800369e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0308 	bic.w	r3, r3, #8
 800368a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a13      	ldr	r2, [pc, #76]	; (80036f0 <TIM_OC1_SetConfig+0xc8>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d111      	bne.n	80036ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685a      	ldr	r2, [r3, #4]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	621a      	str	r2, [r3, #32]
}
 80036e4:	bf00      	nop
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	40010000 	.word	0x40010000

080036f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b087      	sub	sp, #28
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	f023 0210 	bic.w	r2, r3, #16
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800372a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	021b      	lsls	r3, r3, #8
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f023 0320 	bic.w	r3, r3, #32
 800373e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a1e      	ldr	r2, [pc, #120]	; (80037c8 <TIM_OC2_SetConfig+0xd4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d10d      	bne.n	8003770 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800375a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800376e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a15      	ldr	r2, [pc, #84]	; (80037c8 <TIM_OC2_SetConfig+0xd4>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d113      	bne.n	80037a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800377e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000

080037cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b087      	sub	sp, #28
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 0303 	bic.w	r3, r3, #3
 8003802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a1d      	ldr	r2, [pc, #116]	; (800389c <TIM_OC3_SetConfig+0xd0>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10d      	bne.n	8003846 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a14      	ldr	r2, [pc, #80]	; (800389c <TIM_OC3_SetConfig+0xd0>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d113      	bne.n	8003876 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	621a      	str	r2, [r3, #32]
}
 8003890:	bf00      	nop
 8003892:	371c      	adds	r7, #28
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	40010000 	.word	0x40010000

080038a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	031b      	lsls	r3, r3, #12
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a10      	ldr	r2, [pc, #64]	; (800393c <TIM_OC4_SetConfig+0x9c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d109      	bne.n	8003914 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003906:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	4313      	orrs	r3, r2
 8003912:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	621a      	str	r2, [r3, #32]
}
 800392e:	bf00      	nop
 8003930:	371c      	adds	r7, #28
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	bf00      	nop
 800393c:	40010000 	.word	0x40010000

08003940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	f023 0201 	bic.w	r2, r3, #1
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800396a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f023 030a 	bic.w	r3, r3, #10
 800397c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4313      	orrs	r3, r2
 8003984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	621a      	str	r2, [r3, #32]
}
 8003992:	bf00      	nop
 8003994:	371c      	adds	r7, #28
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800399e:	b480      	push	{r7}
 80039a0:	b087      	sub	sp, #28
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f023 0210 	bic.w	r2, r3, #16
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	699b      	ldr	r3, [r3, #24]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	621a      	str	r2, [r3, #32]
}
 80039f2:	bf00      	nop
 80039f4:	371c      	adds	r7, #28
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr

080039fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b085      	sub	sp, #20
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f043 0307 	orr.w	r3, r3, #7
 8003a20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	609a      	str	r2, [r3, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	3714      	adds	r7, #20
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a32:	4770      	bx	lr

08003a34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	021a      	lsls	r2, r3, #8
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	609a      	str	r2, [r3, #8]
}
 8003a68:	bf00      	nop
 8003a6a:	371c      	adds	r7, #28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2201      	movs	r2, #1
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1a      	ldr	r2, [r3, #32]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	43db      	mvns	r3, r3
 8003a96:	401a      	ands	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aac:	431a      	orrs	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
	...

08003ac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d101      	bne.n	8003ad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	e050      	b.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003afe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b24:	d013      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a18      	ldr	r2, [pc, #96]	; (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a16      	ldr	r2, [pc, #88]	; (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d009      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d004      	beq.n	8003b4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10c      	bne.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40014000 	.word	0x40014000

08003b9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d101      	bne.n	8003bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e042      	b.n	8003c5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fcea 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2224      	movs	r2, #36	; 0x24
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fb53 	bl	80042b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	691a      	ldr	r2, [r3, #16]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	695a      	ldr	r2, [r3, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3708      	adds	r7, #8
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b08a      	sub	sp, #40	; 0x28
 8003c68:	af02      	add	r7, sp, #8
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	603b      	str	r3, [r7, #0]
 8003c70:	4613      	mov	r3, r2
 8003c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d175      	bne.n	8003d70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_UART_Transmit+0x2c>
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e06e      	b.n	8003d72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2221      	movs	r2, #33	; 0x21
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ca2:	f7fd fd6b 	bl	800177c <HAL_GetTick>
 8003ca6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	88fa      	ldrh	r2, [r7, #6]
 8003cac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	88fa      	ldrh	r2, [r7, #6]
 8003cb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d108      	bne.n	8003cd0 <HAL_UART_Transmit+0x6c>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d104      	bne.n	8003cd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	e003      	b.n	8003cd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cd8:	e02e      	b.n	8003d38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	2180      	movs	r1, #128	; 0x80
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f966 	bl	8003fb6 <UART_WaitOnFlagUntilTimeout>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e03a      	b.n	8003d72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	461a      	mov	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	3302      	adds	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	e007      	b.n	8003d2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	781a      	ldrb	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	3301      	adds	r3, #1
 8003d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1cb      	bne.n	8003cda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f932 	bl	8003fb6 <UART_WaitOnFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e006      	b.n	8003d72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e000      	b.n	8003d72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d70:	2302      	movs	r3, #2
  }
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b09c      	sub	sp, #112	; 0x70
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc6:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d172      	bne.n	8003ebc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003dd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd8:	2200      	movs	r2, #0
 8003dda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003df2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e5      	bne.n	8003ddc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	3314      	adds	r3, #20
 8003e16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	e853 3f00 	ldrex	r3, [r3]
 8003e1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e22:	f023 0301 	bic.w	r3, r3, #1
 8003e26:	667b      	str	r3, [r7, #100]	; 0x64
 8003e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	3314      	adds	r3, #20
 8003e2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e30:	647a      	str	r2, [r7, #68]	; 0x44
 8003e32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e5      	bne.n	8003e10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3314      	adds	r3, #20
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	623b      	str	r3, [r7, #32]
   return(result);
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003e64:	633a      	str	r2, [r7, #48]	; 0x30
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d119      	bne.n	8003ebc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f023 0310 	bic.w	r3, r3, #16
 8003e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ea8:	61fa      	str	r2, [r7, #28]
 8003eaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	69b9      	ldr	r1, [r7, #24]
 8003eae:	69fa      	ldr	r2, [r7, #28]
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ebc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d106      	bne.n	8003ed8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ecc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ece:	4619      	mov	r1, r3
 8003ed0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003ed2:	f7ff ff66 	bl	8003da2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003ed6:	e002      	b.n	8003ede <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003ed8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003eda:	f7fc fc4d 	bl	8000778 <HAL_UART_RxCpltCallback>
}
 8003ede:	bf00      	nop
 8003ee0:	3770      	adds	r7, #112	; 0x70
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d108      	bne.n	8003f14 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f7ff ff48 	bl	8003da2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f12:	e002      	b.n	8003f1a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff ff30 	bl	8003d7a <HAL_UART_RxHalfCpltCallback>
}
 8003f1a:	bf00      	nop
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b084      	sub	sp, #16
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3e:	2b80      	cmp	r3, #128	; 0x80
 8003f40:	bf0c      	ite	eq
 8003f42:	2301      	moveq	r3, #1
 8003f44:	2300      	movne	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b21      	cmp	r3, #33	; 0x21
 8003f54:	d108      	bne.n	8003f68 <UART_DMAError+0x46>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d005      	beq.n	8003f68 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003f62:	68b8      	ldr	r0, [r7, #8]
 8003f64:	f000 f91a 	bl	800419c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f72:	2b40      	cmp	r3, #64	; 0x40
 8003f74:	bf0c      	ite	eq
 8003f76:	2301      	moveq	r3, #1
 8003f78:	2300      	movne	r3, #0
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b22      	cmp	r3, #34	; 0x22
 8003f88:	d108      	bne.n	8003f9c <UART_DMAError+0x7a>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d005      	beq.n	8003f9c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2200      	movs	r2, #0
 8003f94:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003f96:	68b8      	ldr	r0, [r7, #8]
 8003f98:	f000 f928 	bl	80041ec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa0:	f043 0210 	orr.w	r2, r3, #16
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fa8:	68b8      	ldr	r0, [r7, #8]
 8003faa:	f7ff fef0 	bl	8003d8e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b086      	sub	sp, #24
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	60f8      	str	r0, [r7, #12]
 8003fbe:	60b9      	str	r1, [r7, #8]
 8003fc0:	603b      	str	r3, [r7, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fc6:	e03b      	b.n	8004040 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fc8:	6a3b      	ldr	r3, [r7, #32]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d037      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd0:	f7fd fbd4 	bl	800177c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d302      	bcc.n	8003fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e03a      	b.n	8004060 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0304 	and.w	r3, r3, #4
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2b80      	cmp	r3, #128	; 0x80
 8003ffc:	d020      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b40      	cmp	r3, #64	; 0x40
 8004002:	d01d      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b08      	cmp	r3, #8
 8004010:	d116      	bne.n	8004040 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004012:	2300      	movs	r3, #0
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f8df 	bl	80041ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2208      	movs	r2, #8
 8004032:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e00f      	b.n	8004060 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	4013      	ands	r3, r2
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	429a      	cmp	r2, r3
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	461a      	mov	r2, r3
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	429a      	cmp	r2, r3
 800405c:	d0b4      	beq.n	8003fc8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	4618      	mov	r0, r3
 8004062:	3718      	adds	r7, #24
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b098      	sub	sp, #96	; 0x60
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2222      	movs	r2, #34	; 0x22
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004094:	4a3e      	ldr	r2, [pc, #248]	; (8004190 <UART_Start_Receive_DMA+0x128>)
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800409c:	4a3d      	ldr	r2, [pc, #244]	; (8004194 <UART_Start_Receive_DMA+0x12c>)
 800409e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040a4:	4a3c      	ldr	r2, [pc, #240]	; (8004198 <UART_Start_Receive_DMA+0x130>)
 80040a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2200      	movs	r2, #0
 80040ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80040b0:	f107 0308 	add.w	r3, r7, #8
 80040b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	f7fd fcf4 	bl	8001ab4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80040cc:	2300      	movs	r3, #0
 80040ce:	613b      	str	r3, [r7, #16]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	613b      	str	r3, [r7, #16]
 80040e0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d019      	beq.n	800411e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	330c      	adds	r3, #12
 80040f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004100:	65bb      	str	r3, [r7, #88]	; 0x58
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	330c      	adds	r3, #12
 8004108:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800410a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800410c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004110:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e5      	bne.n	80040ea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3314      	adds	r3, #20
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	e853 3f00 	ldrex	r3, [r3]
 800412c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	657b      	str	r3, [r7, #84]	; 0x54
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800413e:	63ba      	str	r2, [r7, #56]	; 0x38
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e5      	bne.n	800411e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	617b      	str	r3, [r7, #20]
   return(result);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004168:	653b      	str	r3, [r7, #80]	; 0x50
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	3314      	adds	r3, #20
 8004170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004172:	627a      	str	r2, [r7, #36]	; 0x24
 8004174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6a39      	ldr	r1, [r7, #32]
 8004178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e5      	bne.n	8004152 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3760      	adds	r7, #96	; 0x60
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	08003dbb 	.word	0x08003dbb
 8004194:	08003ee7 	.word	0x08003ee7
 8004198:	08003f23 	.word	0x08003f23

0800419c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800419c:	b480      	push	{r7}
 800419e:	b089      	sub	sp, #36	; 0x24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	e853 3f00 	ldrex	r3, [r3]
 80041b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	61ba      	str	r2, [r7, #24]
 80041c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c8:	6979      	ldr	r1, [r7, #20]
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	613b      	str	r3, [r7, #16]
   return(result);
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e5      	bne.n	80041a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80041e0:	bf00      	nop
 80041e2:	3724      	adds	r7, #36	; 0x24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b095      	sub	sp, #84	; 0x54
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fe:	e853 3f00 	ldrex	r3, [r3]
 8004202:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004206:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800420a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004214:	643a      	str	r2, [r7, #64]	; 0x40
 8004216:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004218:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800421a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800421c:	e841 2300 	strex	r3, r2, [r1]
 8004220:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1e5      	bne.n	80041f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6a3b      	ldr	r3, [r7, #32]
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	61fb      	str	r3, [r7, #28]
   return(result);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	3314      	adds	r3, #20
 8004246:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800424a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800424e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004250:	e841 2300 	strex	r3, r2, [r1]
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	2b01      	cmp	r3, #1
 8004262:	d119      	bne.n	8004298 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	330c      	adds	r3, #12
 800426a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	60bb      	str	r3, [r7, #8]
   return(result);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f023 0310 	bic.w	r3, r3, #16
 800427a:	647b      	str	r3, [r7, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	330c      	adds	r3, #12
 8004282:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004284:	61ba      	str	r2, [r7, #24]
 8004286:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004288:	6979      	ldr	r1, [r7, #20]
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	e841 2300 	strex	r3, r2, [r1]
 8004290:	613b      	str	r3, [r7, #16]
   return(result);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1e5      	bne.n	8004264 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042a6:	bf00      	nop
 80042a8:	3754      	adds	r7, #84	; 0x54
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
	...

080042b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b0c0      	sub	sp, #256	; 0x100
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d0:	68d9      	ldr	r1, [r3, #12]
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	ea40 0301 	orr.w	r3, r0, r1
 80042dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800430c:	f021 010c 	bic.w	r1, r1, #12
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800431a:	430b      	orrs	r3, r1
 800431c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800431e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800432e:	6999      	ldr	r1, [r3, #24]
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	ea40 0301 	orr.w	r3, r0, r1
 800433a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	4b8f      	ldr	r3, [pc, #572]	; (8004580 <UART_SetConfig+0x2cc>)
 8004344:	429a      	cmp	r2, r3
 8004346:	d005      	beq.n	8004354 <UART_SetConfig+0xa0>
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b8d      	ldr	r3, [pc, #564]	; (8004584 <UART_SetConfig+0x2d0>)
 8004350:	429a      	cmp	r2, r3
 8004352:	d104      	bne.n	800435e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004354:	f7fe fc38 	bl	8002bc8 <HAL_RCC_GetPCLK2Freq>
 8004358:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800435c:	e003      	b.n	8004366 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800435e:	f7fe fc1f 	bl	8002ba0 <HAL_RCC_GetPCLK1Freq>
 8004362:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800436a:	69db      	ldr	r3, [r3, #28]
 800436c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004370:	f040 810c 	bne.w	800458c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004374:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004378:	2200      	movs	r2, #0
 800437a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800437e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004382:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004386:	4622      	mov	r2, r4
 8004388:	462b      	mov	r3, r5
 800438a:	1891      	adds	r1, r2, r2
 800438c:	65b9      	str	r1, [r7, #88]	; 0x58
 800438e:	415b      	adcs	r3, r3
 8004390:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004392:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004396:	4621      	mov	r1, r4
 8004398:	eb12 0801 	adds.w	r8, r2, r1
 800439c:	4629      	mov	r1, r5
 800439e:	eb43 0901 	adc.w	r9, r3, r1
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043b6:	4690      	mov	r8, r2
 80043b8:	4699      	mov	r9, r3
 80043ba:	4623      	mov	r3, r4
 80043bc:	eb18 0303 	adds.w	r3, r8, r3
 80043c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043c4:	462b      	mov	r3, r5
 80043c6:	eb49 0303 	adc.w	r3, r9, r3
 80043ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043e2:	460b      	mov	r3, r1
 80043e4:	18db      	adds	r3, r3, r3
 80043e6:	653b      	str	r3, [r7, #80]	; 0x50
 80043e8:	4613      	mov	r3, r2
 80043ea:	eb42 0303 	adc.w	r3, r2, r3
 80043ee:	657b      	str	r3, [r7, #84]	; 0x54
 80043f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043f8:	f7fb ff42 	bl	8000280 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4b61      	ldr	r3, [pc, #388]	; (8004588 <UART_SetConfig+0x2d4>)
 8004402:	fba3 2302 	umull	r2, r3, r3, r2
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	011c      	lsls	r4, r3, #4
 800440a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004414:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004418:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800441c:	4642      	mov	r2, r8
 800441e:	464b      	mov	r3, r9
 8004420:	1891      	adds	r1, r2, r2
 8004422:	64b9      	str	r1, [r7, #72]	; 0x48
 8004424:	415b      	adcs	r3, r3
 8004426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004428:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800442c:	4641      	mov	r1, r8
 800442e:	eb12 0a01 	adds.w	sl, r2, r1
 8004432:	4649      	mov	r1, r9
 8004434:	eb43 0b01 	adc.w	fp, r3, r1
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	f04f 0300 	mov.w	r3, #0
 8004440:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004444:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004448:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800444c:	4692      	mov	sl, r2
 800444e:	469b      	mov	fp, r3
 8004450:	4643      	mov	r3, r8
 8004452:	eb1a 0303 	adds.w	r3, sl, r3
 8004456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800445a:	464b      	mov	r3, r9
 800445c:	eb4b 0303 	adc.w	r3, fp, r3
 8004460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004470:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004474:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004478:	460b      	mov	r3, r1
 800447a:	18db      	adds	r3, r3, r3
 800447c:	643b      	str	r3, [r7, #64]	; 0x40
 800447e:	4613      	mov	r3, r2
 8004480:	eb42 0303 	adc.w	r3, r2, r3
 8004484:	647b      	str	r3, [r7, #68]	; 0x44
 8004486:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800448a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800448e:	f7fb fef7 	bl	8000280 <__aeabi_uldivmod>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	4611      	mov	r1, r2
 8004498:	4b3b      	ldr	r3, [pc, #236]	; (8004588 <UART_SetConfig+0x2d4>)
 800449a:	fba3 2301 	umull	r2, r3, r3, r1
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2264      	movs	r2, #100	; 0x64
 80044a2:	fb02 f303 	mul.w	r3, r2, r3
 80044a6:	1acb      	subs	r3, r1, r3
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80044ae:	4b36      	ldr	r3, [pc, #216]	; (8004588 <UART_SetConfig+0x2d4>)
 80044b0:	fba3 2302 	umull	r2, r3, r3, r2
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044bc:	441c      	add	r4, r3
 80044be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044c8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80044cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	63b9      	str	r1, [r7, #56]	; 0x38
 80044d8:	415b      	adcs	r3, r3
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044e0:	4641      	mov	r1, r8
 80044e2:	1851      	adds	r1, r2, r1
 80044e4:	6339      	str	r1, [r7, #48]	; 0x30
 80044e6:	4649      	mov	r1, r9
 80044e8:	414b      	adcs	r3, r1
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044f8:	4659      	mov	r1, fp
 80044fa:	00cb      	lsls	r3, r1, #3
 80044fc:	4651      	mov	r1, sl
 80044fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004502:	4651      	mov	r1, sl
 8004504:	00ca      	lsls	r2, r1, #3
 8004506:	4610      	mov	r0, r2
 8004508:	4619      	mov	r1, r3
 800450a:	4603      	mov	r3, r0
 800450c:	4642      	mov	r2, r8
 800450e:	189b      	adds	r3, r3, r2
 8004510:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004514:	464b      	mov	r3, r9
 8004516:	460a      	mov	r2, r1
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800452c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004530:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004534:	460b      	mov	r3, r1
 8004536:	18db      	adds	r3, r3, r3
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
 800453a:	4613      	mov	r3, r2
 800453c:	eb42 0303 	adc.w	r3, r2, r3
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004542:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004546:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800454a:	f7fb fe99 	bl	8000280 <__aeabi_uldivmod>
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <UART_SetConfig+0x2d4>)
 8004554:	fba3 1302 	umull	r1, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	2164      	movs	r1, #100	; 0x64
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	00db      	lsls	r3, r3, #3
 8004564:	3332      	adds	r3, #50	; 0x32
 8004566:	4a08      	ldr	r2, [pc, #32]	; (8004588 <UART_SetConfig+0x2d4>)
 8004568:	fba2 2303 	umull	r2, r3, r2, r3
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	f003 0207 	and.w	r2, r3, #7
 8004572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4422      	add	r2, r4
 800457a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800457c:	e106      	b.n	800478c <UART_SetConfig+0x4d8>
 800457e:	bf00      	nop
 8004580:	40011000 	.word	0x40011000
 8004584:	40011400 	.word	0x40011400
 8004588:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800458c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004590:	2200      	movs	r2, #0
 8004592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004596:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800459a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800459e:	4642      	mov	r2, r8
 80045a0:	464b      	mov	r3, r9
 80045a2:	1891      	adds	r1, r2, r2
 80045a4:	6239      	str	r1, [r7, #32]
 80045a6:	415b      	adcs	r3, r3
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
 80045aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ae:	4641      	mov	r1, r8
 80045b0:	1854      	adds	r4, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb43 0501 	adc.w	r5, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	00eb      	lsls	r3, r5, #3
 80045c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045c6:	00e2      	lsls	r2, r4, #3
 80045c8:	4614      	mov	r4, r2
 80045ca:	461d      	mov	r5, r3
 80045cc:	4643      	mov	r3, r8
 80045ce:	18e3      	adds	r3, r4, r3
 80045d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80045d4:	464b      	mov	r3, r9
 80045d6:	eb45 0303 	adc.w	r3, r5, r3
 80045da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80045de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045ee:	f04f 0200 	mov.w	r2, #0
 80045f2:	f04f 0300 	mov.w	r3, #0
 80045f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80045fa:	4629      	mov	r1, r5
 80045fc:	008b      	lsls	r3, r1, #2
 80045fe:	4621      	mov	r1, r4
 8004600:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004604:	4621      	mov	r1, r4
 8004606:	008a      	lsls	r2, r1, #2
 8004608:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800460c:	f7fb fe38 	bl	8000280 <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4b60      	ldr	r3, [pc, #384]	; (8004798 <UART_SetConfig+0x4e4>)
 8004616:	fba3 2302 	umull	r2, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	011c      	lsls	r4, r3, #4
 800461e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004622:	2200      	movs	r2, #0
 8004624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004628:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800462c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004630:	4642      	mov	r2, r8
 8004632:	464b      	mov	r3, r9
 8004634:	1891      	adds	r1, r2, r2
 8004636:	61b9      	str	r1, [r7, #24]
 8004638:	415b      	adcs	r3, r3
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	4641      	mov	r1, r8
 8004642:	1851      	adds	r1, r2, r1
 8004644:	6139      	str	r1, [r7, #16]
 8004646:	4649      	mov	r1, r9
 8004648:	414b      	adcs	r3, r1
 800464a:	617b      	str	r3, [r7, #20]
 800464c:	f04f 0200 	mov.w	r2, #0
 8004650:	f04f 0300 	mov.w	r3, #0
 8004654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004658:	4659      	mov	r1, fp
 800465a:	00cb      	lsls	r3, r1, #3
 800465c:	4651      	mov	r1, sl
 800465e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004662:	4651      	mov	r1, sl
 8004664:	00ca      	lsls	r2, r1, #3
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	4603      	mov	r3, r0
 800466c:	4642      	mov	r2, r8
 800466e:	189b      	adds	r3, r3, r2
 8004670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004674:	464b      	mov	r3, r9
 8004676:	460a      	mov	r2, r1
 8004678:	eb42 0303 	adc.w	r3, r2, r3
 800467c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	67bb      	str	r3, [r7, #120]	; 0x78
 800468a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004698:	4649      	mov	r1, r9
 800469a:	008b      	lsls	r3, r1, #2
 800469c:	4641      	mov	r1, r8
 800469e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a2:	4641      	mov	r1, r8
 80046a4:	008a      	lsls	r2, r1, #2
 80046a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80046aa:	f7fb fde9 	bl	8000280 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4611      	mov	r1, r2
 80046b4:	4b38      	ldr	r3, [pc, #224]	; (8004798 <UART_SetConfig+0x4e4>)
 80046b6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2264      	movs	r2, #100	; 0x64
 80046be:	fb02 f303 	mul.w	r3, r2, r3
 80046c2:	1acb      	subs	r3, r1, r3
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	3332      	adds	r3, #50	; 0x32
 80046c8:	4a33      	ldr	r2, [pc, #204]	; (8004798 <UART_SetConfig+0x4e4>)
 80046ca:	fba2 2303 	umull	r2, r3, r2, r3
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046d4:	441c      	add	r4, r3
 80046d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046da:	2200      	movs	r2, #0
 80046dc:	673b      	str	r3, [r7, #112]	; 0x70
 80046de:	677a      	str	r2, [r7, #116]	; 0x74
 80046e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80046e4:	4642      	mov	r2, r8
 80046e6:	464b      	mov	r3, r9
 80046e8:	1891      	adds	r1, r2, r2
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	415b      	adcs	r3, r3
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f4:	4641      	mov	r1, r8
 80046f6:	1851      	adds	r1, r2, r1
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	4649      	mov	r1, r9
 80046fc:	414b      	adcs	r3, r1
 80046fe:	607b      	str	r3, [r7, #4]
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	f04f 0300 	mov.w	r3, #0
 8004708:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800470c:	4659      	mov	r1, fp
 800470e:	00cb      	lsls	r3, r1, #3
 8004710:	4651      	mov	r1, sl
 8004712:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004716:	4651      	mov	r1, sl
 8004718:	00ca      	lsls	r2, r1, #3
 800471a:	4610      	mov	r0, r2
 800471c:	4619      	mov	r1, r3
 800471e:	4603      	mov	r3, r0
 8004720:	4642      	mov	r2, r8
 8004722:	189b      	adds	r3, r3, r2
 8004724:	66bb      	str	r3, [r7, #104]	; 0x68
 8004726:	464b      	mov	r3, r9
 8004728:	460a      	mov	r2, r1
 800472a:	eb42 0303 	adc.w	r3, r2, r3
 800472e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	663b      	str	r3, [r7, #96]	; 0x60
 800473a:	667a      	str	r2, [r7, #100]	; 0x64
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004748:	4649      	mov	r1, r9
 800474a:	008b      	lsls	r3, r1, #2
 800474c:	4641      	mov	r1, r8
 800474e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004752:	4641      	mov	r1, r8
 8004754:	008a      	lsls	r2, r1, #2
 8004756:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800475a:	f7fb fd91 	bl	8000280 <__aeabi_uldivmod>
 800475e:	4602      	mov	r2, r0
 8004760:	460b      	mov	r3, r1
 8004762:	4b0d      	ldr	r3, [pc, #52]	; (8004798 <UART_SetConfig+0x4e4>)
 8004764:	fba3 1302 	umull	r1, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	2164      	movs	r1, #100	; 0x64
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	3332      	adds	r3, #50	; 0x32
 8004776:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x4e4>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	095b      	lsrs	r3, r3, #5
 800477e:	f003 020f 	and.w	r2, r3, #15
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4422      	add	r2, r4
 800478a:	609a      	str	r2, [r3, #8]
}
 800478c:	bf00      	nop
 800478e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004792:	46bd      	mov	sp, r7
 8004794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <__NVIC_SetPriority>:
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	6039      	str	r1, [r7, #0]
 80047a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	db0a      	blt.n	80047c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	490c      	ldr	r1, [pc, #48]	; (80047e8 <__NVIC_SetPriority+0x4c>)
 80047b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	b2d2      	uxtb	r2, r2
 80047be:	440b      	add	r3, r1
 80047c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80047c4:	e00a      	b.n	80047dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4908      	ldr	r1, [pc, #32]	; (80047ec <__NVIC_SetPriority+0x50>)
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	3b04      	subs	r3, #4
 80047d4:	0112      	lsls	r2, r2, #4
 80047d6:	b2d2      	uxtb	r2, r2
 80047d8:	440b      	add	r3, r1
 80047da:	761a      	strb	r2, [r3, #24]
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	e000e100 	.word	0xe000e100
 80047ec:	e000ed00 	.word	0xe000ed00

080047f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <SysTick_Handler+0x1c>)
 80047f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80047f8:	f001 fd28 	bl	800624c <xTaskGetSchedulerState>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d001      	beq.n	8004806 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004802:	f002 fb11 	bl	8006e28 <xPortSysTickHandler>
  }
}
 8004806:	bf00      	nop
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	e000e010 	.word	0xe000e010

08004810 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004814:	2100      	movs	r1, #0
 8004816:	f06f 0004 	mvn.w	r0, #4
 800481a:	f7ff ffbf 	bl	800479c <__NVIC_SetPriority>
#endif
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800482a:	f3ef 8305 	mrs	r3, IPSR
 800482e:	603b      	str	r3, [r7, #0]
  return(result);
 8004830:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004836:	f06f 0305 	mvn.w	r3, #5
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	e00c      	b.n	8004858 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800483e:	4b0a      	ldr	r3, [pc, #40]	; (8004868 <osKernelInitialize+0x44>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d105      	bne.n	8004852 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <osKernelInitialize+0x44>)
 8004848:	2201      	movs	r2, #1
 800484a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800484c:	2300      	movs	r3, #0
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	e002      	b.n	8004858 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004852:	f04f 33ff 	mov.w	r3, #4294967295
 8004856:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004858:	687b      	ldr	r3, [r7, #4]
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
 8004866:	bf00      	nop
 8004868:	200002a4 	.word	0x200002a4

0800486c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004872:	f3ef 8305 	mrs	r3, IPSR
 8004876:	603b      	str	r3, [r7, #0]
  return(result);
 8004878:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <osKernelStart+0x1a>
    stat = osErrorISR;
 800487e:	f06f 0305 	mvn.w	r3, #5
 8004882:	607b      	str	r3, [r7, #4]
 8004884:	e010      	b.n	80048a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004886:	4b0b      	ldr	r3, [pc, #44]	; (80048b4 <osKernelStart+0x48>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d109      	bne.n	80048a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800488e:	f7ff ffbf 	bl	8004810 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <osKernelStart+0x48>)
 8004894:	2202      	movs	r2, #2
 8004896:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004898:	f001 f87c 	bl	8005994 <vTaskStartScheduler>
      stat = osOK;
 800489c:	2300      	movs	r3, #0
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	e002      	b.n	80048a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80048a2:	f04f 33ff 	mov.w	r3, #4294967295
 80048a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048a8:	687b      	ldr	r3, [r7, #4]
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	200002a4 	.word	0x200002a4

080048b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b08e      	sub	sp, #56	; 0x38
 80048bc:	af04      	add	r7, sp, #16
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c8:	f3ef 8305 	mrs	r3, IPSR
 80048cc:	617b      	str	r3, [r7, #20]
  return(result);
 80048ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d17e      	bne.n	80049d2 <osThreadNew+0x11a>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d07b      	beq.n	80049d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80048de:	2318      	movs	r3, #24
 80048e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80048e6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d045      	beq.n	800497e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <osThreadNew+0x48>
        name = attr->name;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d002      	beq.n	800490e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d008      	beq.n	8004926 <osThreadNew+0x6e>
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	2b38      	cmp	r3, #56	; 0x38
 8004918:	d805      	bhi.n	8004926 <osThreadNew+0x6e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <osThreadNew+0x72>
        return (NULL);
 8004926:	2300      	movs	r3, #0
 8004928:	e054      	b.n	80049d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	089b      	lsrs	r3, r3, #2
 8004938:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00e      	beq.n	8004960 <osThreadNew+0xa8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2ba7      	cmp	r3, #167	; 0xa7
 8004948:	d90a      	bls.n	8004960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800494e:	2b00      	cmp	r3, #0
 8004950:	d006      	beq.n	8004960 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <osThreadNew+0xa8>
        mem = 1;
 800495a:	2301      	movs	r3, #1
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e010      	b.n	8004982 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10c      	bne.n	8004982 <osThreadNew+0xca>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d108      	bne.n	8004982 <osThreadNew+0xca>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d104      	bne.n	8004982 <osThreadNew+0xca>
          mem = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	e001      	b.n	8004982 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d110      	bne.n	80049aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004990:	9202      	str	r2, [sp, #8]
 8004992:	9301      	str	r3, [sp, #4]
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	6a3a      	ldr	r2, [r7, #32]
 800499c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f000 fe0c 	bl	80055bc <xTaskCreateStatic>
 80049a4:	4603      	mov	r3, r0
 80049a6:	613b      	str	r3, [r7, #16]
 80049a8:	e013      	b.n	80049d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d110      	bne.n	80049d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	f107 0310 	add.w	r3, r7, #16
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fe57 	bl	8005676 <xTaskCreate>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <osThreadNew+0x11a>
            hTask = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049d2:	693b      	ldr	r3, [r7, #16]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3728      	adds	r7, #40	; 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e4:	f3ef 8305 	mrs	r3, IPSR
 80049e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80049ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <osDelay+0x1c>
    stat = osErrorISR;
 80049f0:	f06f 0305 	mvn.w	r3, #5
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	e007      	b.n	8004a08 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 ff92 	bl	800592c <vTaskDelay>
    }
  }

  return (stat);
 8004a08:	68fb      	ldr	r3, [r7, #12]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a07      	ldr	r2, [pc, #28]	; (8004a40 <vApplicationGetIdleTaskMemory+0x2c>)
 8004a24:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	4a06      	ldr	r2, [pc, #24]	; (8004a44 <vApplicationGetIdleTaskMemory+0x30>)
 8004a2a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2280      	movs	r2, #128	; 0x80
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	200002a8 	.word	0x200002a8
 8004a44:	20000350 	.word	0x20000350

08004a48 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4a07      	ldr	r2, [pc, #28]	; (8004a74 <vApplicationGetTimerTaskMemory+0x2c>)
 8004a58:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4a06      	ldr	r2, [pc, #24]	; (8004a78 <vApplicationGetTimerTaskMemory+0x30>)
 8004a5e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a66:	601a      	str	r2, [r3, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	3714      	adds	r7, #20
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000550 	.word	0x20000550
 8004a78:	200005f8 	.word	0x200005f8

08004a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f103 0208 	add.w	r2, r3, #8
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f04f 32ff 	mov.w	r2, #4294967295
 8004a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f103 0208 	add.w	r2, r3, #8
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f103 0208 	add.w	r2, r3, #8
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004aca:	bf00      	nop
 8004acc:	370c      	adds	r7, #12
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr

08004ad6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
 8004ade:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	1c5a      	adds	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	3714      	adds	r7, #20
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b085      	sub	sp, #20
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b34:	d103      	bne.n	8004b3e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e00c      	b.n	8004b58 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	3308      	adds	r3, #8
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	e002      	b.n	8004b4c <vListInsert+0x2e>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d2f6      	bcs.n	8004b46 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	601a      	str	r2, [r3, #0]
}
 8004b84:	bf00      	nop
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	6892      	ldr	r2, [r2, #8]
 8004ba6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6852      	ldr	r2, [r2, #4]
 8004bb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d103      	bne.n	8004bc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689a      	ldr	r2, [r3, #8]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1e5a      	subs	r2, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10a      	bne.n	8004c0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004c0e:	f002 f879 	bl	8006d04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c1e:	fb01 f303 	mul.w	r3, r1, r3
 8004c22:	441a      	add	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	441a      	add	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	22ff      	movs	r2, #255	; 0xff
 8004c52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	22ff      	movs	r2, #255	; 0xff
 8004c5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d114      	bne.n	8004c8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01a      	beq.n	8004ca2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3310      	adds	r3, #16
 8004c70:	4618      	mov	r0, r3
 8004c72:	f001 f929 	bl	8005ec8 <xTaskRemoveFromEventList>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d012      	beq.n	8004ca2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <xQueueGenericReset+0xcc>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	e009      	b.n	8004ca2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	3310      	adds	r3, #16
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff fef2 	bl	8004a7c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	3324      	adds	r3, #36	; 0x24
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7ff feed 	bl	8004a7c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ca2:	f002 f85f 	bl	8006d64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ca6:	2301      	movs	r3, #1
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	e000ed04 	.word	0xe000ed04

08004cb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08e      	sub	sp, #56	; 0x38
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004cda:	bf00      	nop
 8004cdc:	e7fe      	b.n	8004cdc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10a      	bne.n	8004cfa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cf6:	bf00      	nop
 8004cf8:	e7fe      	b.n	8004cf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <xQueueGenericCreateStatic+0x52>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <xQueueGenericCreateStatic+0x56>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e000      	b.n	8004d0c <xQueueGenericCreateStatic+0x58>
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d10a      	bne.n	8004d26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	623b      	str	r3, [r7, #32]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <xQueueGenericCreateStatic+0x7e>
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <xQueueGenericCreateStatic+0x82>
 8004d32:	2301      	movs	r3, #1
 8004d34:	e000      	b.n	8004d38 <xQueueGenericCreateStatic+0x84>
 8004d36:	2300      	movs	r3, #0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	61fb      	str	r3, [r7, #28]
}
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004d52:	2350      	movs	r3, #80	; 0x50
 8004d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2b50      	cmp	r3, #80	; 0x50
 8004d5a:	d00a      	beq.n	8004d72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	61bb      	str	r3, [r7, #24]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004d72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00d      	beq.n	8004d9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8c:	9300      	str	r3, [sp, #0]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68b9      	ldr	r1, [r7, #8]
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f805 	bl	8004da4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3730      	adds	r7, #48	; 0x30
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
 8004db0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	e002      	b.n	8004dc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	69b8      	ldr	r0, [r7, #24]
 8004dd6:	f7ff ff05 	bl	8004be4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004dda:	69bb      	ldr	r3, [r7, #24]
 8004ddc:	78fa      	ldrb	r2, [r7, #3]
 8004dde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08e      	sub	sp, #56	; 0x38
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xQueueGenericSend+0x32>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d103      	bne.n	8004e2c <xQueueGenericSend+0x40>
 8004e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <xQueueGenericSend+0x44>
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <xQueueGenericSend+0x46>
 8004e30:	2300      	movs	r3, #0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10a      	bne.n	8004e4c <xQueueGenericSend+0x60>
	__asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d103      	bne.n	8004e5a <xQueueGenericSend+0x6e>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <xQueueGenericSend+0x72>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <xQueueGenericSend+0x74>
 8004e5e:	2300      	movs	r3, #0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10a      	bne.n	8004e7a <xQueueGenericSend+0x8e>
	__asm volatile
 8004e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e68:	f383 8811 	msr	BASEPRI, r3
 8004e6c:	f3bf 8f6f 	isb	sy
 8004e70:	f3bf 8f4f 	dsb	sy
 8004e74:	623b      	str	r3, [r7, #32]
}
 8004e76:	bf00      	nop
 8004e78:	e7fe      	b.n	8004e78 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e7a:	f001 f9e7 	bl	800624c <xTaskGetSchedulerState>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <xQueueGenericSend+0x9e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <xQueueGenericSend+0xa2>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <xQueueGenericSend+0xa4>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <xQueueGenericSend+0xbe>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	61fb      	str	r3, [r7, #28]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004eaa:	f001 ff2b 	bl	8006d04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <xQueueGenericSend+0xd4>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d129      	bne.n	8004f14 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	68b9      	ldr	r1, [r7, #8]
 8004ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ec6:	f000 fa0b 	bl	80052e0 <prvCopyDataToQueue>
 8004eca:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d010      	beq.n	8004ef6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	3324      	adds	r3, #36	; 0x24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fff5 	bl	8005ec8 <xTaskRemoveFromEventList>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d013      	beq.n	8004f0c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ee4:	4b3f      	ldr	r3, [pc, #252]	; (8004fe4 <xQueueGenericSend+0x1f8>)
 8004ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eea:	601a      	str	r2, [r3, #0]
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	e00a      	b.n	8004f0c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d007      	beq.n	8004f0c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004efc:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <xQueueGenericSend+0x1f8>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004f0c:	f001 ff2a 	bl	8006d64 <vPortExitCritical>
				return pdPASS;
 8004f10:	2301      	movs	r3, #1
 8004f12:	e063      	b.n	8004fdc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f1a:	f001 ff23 	bl	8006d64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	e05c      	b.n	8004fdc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f28:	f107 0314 	add.w	r3, r7, #20
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 f82f 	bl	8005f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f32:	2301      	movs	r3, #1
 8004f34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f36:	f001 ff15 	bl	8006d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f3a:	f000 fd9b 	bl	8005a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f3e:	f001 fee1 	bl	8006d04 <vPortEnterCritical>
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f48:	b25b      	sxtb	r3, r3
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d103      	bne.n	8004f58 <xQueueGenericSend+0x16c>
 8004f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f5e:	b25b      	sxtb	r3, r3
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f64:	d103      	bne.n	8004f6e <xQueueGenericSend+0x182>
 8004f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f6e:	f001 fef9 	bl	8006d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f72:	1d3a      	adds	r2, r7, #4
 8004f74:	f107 0314 	add.w	r3, r7, #20
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f001 f81e 	bl	8005fbc <xTaskCheckForTimeOut>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d124      	bne.n	8004fd0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f88:	f000 faa2 	bl	80054d0 <prvIsQueueFull>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	3310      	adds	r3, #16
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 ff44 	bl	8005e28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fa2:	f000 fa2d 	bl	8005400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004fa6:	f000 fd73 	bl	8005a90 <xTaskResumeAll>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f47f af7c 	bne.w	8004eaa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <xQueueGenericSend+0x1f8>)
 8004fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	e772      	b.n	8004eaa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004fc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fc6:	f000 fa1b 	bl	8005400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fca:	f000 fd61 	bl	8005a90 <xTaskResumeAll>
 8004fce:	e76c      	b.n	8004eaa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fd2:	f000 fa15 	bl	8005400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fd6:	f000 fd5b 	bl	8005a90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fda:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3738      	adds	r7, #56	; 0x38
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b090      	sub	sp, #64	; 0x40
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	60b9      	str	r1, [r7, #8]
 8004ff2:	607a      	str	r2, [r7, #4]
 8004ff4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d103      	bne.n	8005024 <xQueueGenericSendFromISR+0x3c>
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <xQueueGenericSendFromISR+0x40>
 8005024:	2301      	movs	r3, #1
 8005026:	e000      	b.n	800502a <xQueueGenericSendFromISR+0x42>
 8005028:	2300      	movs	r3, #0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d103      	bne.n	8005052 <xQueueGenericSendFromISR+0x6a>
 800504a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	2b01      	cmp	r3, #1
 8005050:	d101      	bne.n	8005056 <xQueueGenericSendFromISR+0x6e>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <xQueueGenericSendFromISR+0x70>
 8005056:	2300      	movs	r3, #0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	623b      	str	r3, [r7, #32]
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005072:	f001 ff29 	bl	8006ec8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005076:	f3ef 8211 	mrs	r2, BASEPRI
 800507a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507e:	f383 8811 	msr	BASEPRI, r3
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	61fa      	str	r2, [r7, #28]
 800508c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800508e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <xQueueGenericSendFromISR+0xbc>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d12f      	bne.n	8005104 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	68b9      	ldr	r1, [r7, #8]
 80050b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050ba:	f000 f911 	bl	80052e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050be:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c6:	d112      	bne.n	80050ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d016      	beq.n	80050fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	3324      	adds	r3, #36	; 0x24
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 fef7 	bl	8005ec8 <xTaskRemoveFromEventList>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00e      	beq.n	80050fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e007      	b.n	80050fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050f2:	3301      	adds	r3, #1
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	b25a      	sxtb	r2, r3
 80050f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050fe:	2301      	movs	r3, #1
 8005100:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005102:	e001      	b.n	8005108 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005104:	2300      	movs	r3, #0
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800510a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005112:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005116:	4618      	mov	r0, r3
 8005118:	3740      	adds	r7, #64	; 0x40
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
	...

08005120 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08c      	sub	sp, #48	; 0x30
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800512c:	2300      	movs	r3, #0
 800512e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <xQueueReceive+0x30>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	623b      	str	r3, [r7, #32]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d103      	bne.n	800515e <xQueueReceive+0x3e>
 8005156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <xQueueReceive+0x42>
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <xQueueReceive+0x44>
 8005162:	2300      	movs	r3, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <xQueueReceive+0x5e>
	__asm volatile
 8005168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516c:	f383 8811 	msr	BASEPRI, r3
 8005170:	f3bf 8f6f 	isb	sy
 8005174:	f3bf 8f4f 	dsb	sy
 8005178:	61fb      	str	r3, [r7, #28]
}
 800517a:	bf00      	nop
 800517c:	e7fe      	b.n	800517c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800517e:	f001 f865 	bl	800624c <xTaskGetSchedulerState>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d102      	bne.n	800518e <xQueueReceive+0x6e>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <xQueueReceive+0x72>
 800518e:	2301      	movs	r3, #1
 8005190:	e000      	b.n	8005194 <xQueueReceive+0x74>
 8005192:	2300      	movs	r3, #0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d10a      	bne.n	80051ae <xQueueReceive+0x8e>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	61bb      	str	r3, [r7, #24]
}
 80051aa:	bf00      	nop
 80051ac:	e7fe      	b.n	80051ac <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051ae:	f001 fda9 	bl	8006d04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d01f      	beq.n	80051fe <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051c2:	f000 f8f7 	bl	80053b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	1e5a      	subs	r2, r3, #1
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00f      	beq.n	80051f6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	3310      	adds	r3, #16
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fe74 	bl	8005ec8 <xTaskRemoveFromEventList>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051e6:	4b3d      	ldr	r3, [pc, #244]	; (80052dc <xQueueReceive+0x1bc>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80051f6:	f001 fdb5 	bl	8006d64 <vPortExitCritical>
				return pdPASS;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e069      	b.n	80052d2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d103      	bne.n	800520c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005204:	f001 fdae 	bl	8006d64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005208:	2300      	movs	r3, #0
 800520a:	e062      	b.n	80052d2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005212:	f107 0310 	add.w	r3, r7, #16
 8005216:	4618      	mov	r0, r3
 8005218:	f000 feba 	bl	8005f90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800521c:	2301      	movs	r3, #1
 800521e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005220:	f001 fda0 	bl	8006d64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005224:	f000 fc26 	bl	8005a74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005228:	f001 fd6c 	bl	8006d04 <vPortEnterCritical>
 800522c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005232:	b25b      	sxtb	r3, r3
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d103      	bne.n	8005242 <xQueueReceive+0x122>
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005248:	b25b      	sxtb	r3, r3
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d103      	bne.n	8005258 <xQueueReceive+0x138>
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005258:	f001 fd84 	bl	8006d64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800525c:	1d3a      	adds	r2, r7, #4
 800525e:	f107 0310 	add.w	r3, r7, #16
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f000 fea9 	bl	8005fbc <xTaskCheckForTimeOut>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d123      	bne.n	80052b8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005272:	f000 f917 	bl	80054a4 <prvIsQueueEmpty>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d017      	beq.n	80052ac <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	3324      	adds	r3, #36	; 0x24
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	4611      	mov	r1, r2
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fdcf 	bl	8005e28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800528a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800528c:	f000 f8b8 	bl	8005400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005290:	f000 fbfe 	bl	8005a90 <xTaskResumeAll>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d189      	bne.n	80051ae <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <xQueueReceive+0x1bc>)
 800529c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	e780      	b.n	80051ae <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ae:	f000 f8a7 	bl	8005400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052b2:	f000 fbed 	bl	8005a90 <xTaskResumeAll>
 80052b6:	e77a      	b.n	80051ae <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ba:	f000 f8a1 	bl	8005400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052be:	f000 fbe7 	bl	8005a90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c4:	f000 f8ee 	bl	80054a4 <prvIsQueueEmpty>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f43f af6f 	beq.w	80051ae <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3730      	adds	r7, #48	; 0x30
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	e000ed04 	.word	0xe000ed04

080052e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d10d      	bne.n	800531a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d14d      	bne.n	80053a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	4618      	mov	r0, r3
 800530c:	f000 ffbc 	bl	8006288 <xTaskPriorityDisinherit>
 8005310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	609a      	str	r2, [r3, #8]
 8005318:	e043      	b.n	80053a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d119      	bne.n	8005354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6858      	ldr	r0, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	461a      	mov	r2, r3
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	f002 f8ba 	bl	80074a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	441a      	add	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	429a      	cmp	r2, r3
 8005348:	d32b      	bcc.n	80053a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	e026      	b.n	80053a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68d8      	ldr	r0, [r3, #12]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	461a      	mov	r2, r3
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	f002 f8a0 	bl	80074a4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	425b      	negs	r3, r3
 800536e:	441a      	add	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	68da      	ldr	r2, [r3, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d207      	bcs.n	8005390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	425b      	negs	r3, r3
 800538a:	441a      	add	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d105      	bne.n	80053a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	3b01      	subs	r3, #1
 80053a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80053aa:	697b      	ldr	r3, [r7, #20]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3718      	adds	r7, #24
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	441a      	add	r2, r3
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d303      	bcc.n	80053e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68d9      	ldr	r1, [r3, #12]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	461a      	mov	r2, r3
 80053f2:	6838      	ldr	r0, [r7, #0]
 80053f4:	f002 f856 	bl	80074a4 <memcpy>
	}
}
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005408:	f001 fc7c 	bl	8006d04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005414:	e011      	b.n	800543a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	2b00      	cmp	r3, #0
 800541c:	d012      	beq.n	8005444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3324      	adds	r3, #36	; 0x24
 8005422:	4618      	mov	r0, r3
 8005424:	f000 fd50 	bl	8005ec8 <xTaskRemoveFromEventList>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800542e:	f000 fe27 	bl	8006080 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005432:	7bfb      	ldrb	r3, [r7, #15]
 8005434:	3b01      	subs	r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800543a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800543e:	2b00      	cmp	r3, #0
 8005440:	dce9      	bgt.n	8005416 <prvUnlockQueue+0x16>
 8005442:	e000      	b.n	8005446 <prvUnlockQueue+0x46>
					break;
 8005444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	22ff      	movs	r2, #255	; 0xff
 800544a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800544e:	f001 fc89 	bl	8006d64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005452:	f001 fc57 	bl	8006d04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800545c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800545e:	e011      	b.n	8005484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d012      	beq.n	800548e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3310      	adds	r3, #16
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fd2b 	bl	8005ec8 <xTaskRemoveFromEventList>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005478:	f000 fe02 	bl	8006080 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	3b01      	subs	r3, #1
 8005480:	b2db      	uxtb	r3, r3
 8005482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005488:	2b00      	cmp	r3, #0
 800548a:	dce9      	bgt.n	8005460 <prvUnlockQueue+0x60>
 800548c:	e000      	b.n	8005490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800548e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	22ff      	movs	r2, #255	; 0xff
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005498:	f001 fc64 	bl	8006d64 <vPortExitCritical>
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054ac:	f001 fc2a 	bl	8006d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054b8:	2301      	movs	r3, #1
 80054ba:	60fb      	str	r3, [r7, #12]
 80054bc:	e001      	b.n	80054c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054c2:	f001 fc4f 	bl	8006d64 <vPortExitCritical>

	return xReturn;
 80054c6:	68fb      	ldr	r3, [r7, #12]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054d8:	f001 fc14 	bl	8006d04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d102      	bne.n	80054ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	e001      	b.n	80054f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054f2:	f001 fc37 	bl	8006d64 <vPortExitCritical>

	return xReturn;
 80054f6:	68fb      	ldr	r3, [r7, #12]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
 800550e:	e014      	b.n	800553a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005510:	4a0f      	ldr	r2, [pc, #60]	; (8005550 <vQueueAddToRegistry+0x50>)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10b      	bne.n	8005534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800551c:	490c      	ldr	r1, [pc, #48]	; (8005550 <vQueueAddToRegistry+0x50>)
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005526:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <vQueueAddToRegistry+0x50>)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	00db      	lsls	r3, r3, #3
 800552c:	4413      	add	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005532:	e006      	b.n	8005542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	3301      	adds	r3, #1
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b07      	cmp	r3, #7
 800553e:	d9e7      	bls.n	8005510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005540:	bf00      	nop
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	200009f8 	.word	0x200009f8

08005554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005564:	f001 fbce 	bl	8006d04 <vPortEnterCritical>
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800556e:	b25b      	sxtb	r3, r3
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d103      	bne.n	800557e <vQueueWaitForMessageRestricted+0x2a>
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005584:	b25b      	sxtb	r3, r3
 8005586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800558a:	d103      	bne.n	8005594 <vQueueWaitForMessageRestricted+0x40>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005594:	f001 fbe6 	bl	8006d64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	2b00      	cmp	r3, #0
 800559e:	d106      	bne.n	80055ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	3324      	adds	r3, #36	; 0x24
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	68b9      	ldr	r1, [r7, #8]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fc61 	bl	8005e70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80055ae:	6978      	ldr	r0, [r7, #20]
 80055b0:	f7ff ff26 	bl	8005400 <prvUnlockQueue>
	}
 80055b4:	bf00      	nop
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08e      	sub	sp, #56	; 0x38
 80055c0:	af04      	add	r7, sp, #16
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	623b      	str	r3, [r7, #32]
}
 80055e2:	bf00      	nop
 80055e4:	e7fe      	b.n	80055e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d10a      	bne.n	8005602 <xTaskCreateStatic+0x46>
	__asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	61fb      	str	r3, [r7, #28]
}
 80055fe:	bf00      	nop
 8005600:	e7fe      	b.n	8005600 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005602:	23a8      	movs	r3, #168	; 0xa8
 8005604:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	2ba8      	cmp	r3, #168	; 0xa8
 800560a:	d00a      	beq.n	8005622 <xTaskCreateStatic+0x66>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	61bb      	str	r3, [r7, #24]
}
 800561e:	bf00      	nop
 8005620:	e7fe      	b.n	8005620 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005622:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005626:	2b00      	cmp	r3, #0
 8005628:	d01e      	beq.n	8005668 <xTaskCreateStatic+0xac>
 800562a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562c:	2b00      	cmp	r3, #0
 800562e:	d01b      	beq.n	8005668 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005638:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800563a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563c:	2202      	movs	r2, #2
 800563e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005642:	2300      	movs	r3, #0
 8005644:	9303      	str	r3, [sp, #12]
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	9302      	str	r3, [sp, #8]
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	68b9      	ldr	r1, [r7, #8]
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f000 f850 	bl	8005700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005662:	f000 f8f3 	bl	800584c <prvAddNewTaskToReadyList>
 8005666:	e001      	b.n	800566c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005668:	2300      	movs	r3, #0
 800566a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800566c:	697b      	ldr	r3, [r7, #20]
	}
 800566e:	4618      	mov	r0, r3
 8005670:	3728      	adds	r7, #40	; 0x28
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005676:	b580      	push	{r7, lr}
 8005678:	b08c      	sub	sp, #48	; 0x30
 800567a:	af04      	add	r7, sp, #16
 800567c:	60f8      	str	r0, [r7, #12]
 800567e:	60b9      	str	r1, [r7, #8]
 8005680:	603b      	str	r3, [r7, #0]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	009b      	lsls	r3, r3, #2
 800568a:	4618      	mov	r0, r3
 800568c:	f001 fc5c 	bl	8006f48 <pvPortMalloc>
 8005690:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00e      	beq.n	80056b6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005698:	20a8      	movs	r0, #168	; 0xa8
 800569a:	f001 fc55 	bl	8006f48 <pvPortMalloc>
 800569e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d003      	beq.n	80056ae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
 80056ac:	e005      	b.n	80056ba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80056ae:	6978      	ldr	r0, [r7, #20]
 80056b0:	f001 fd16 	bl	80070e0 <vPortFree>
 80056b4:	e001      	b.n	80056ba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d017      	beq.n	80056f0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	2300      	movs	r3, #0
 80056cc:	9303      	str	r3, [sp, #12]
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	9300      	str	r3, [sp, #0]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f80e 	bl	8005700 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056e4:	69f8      	ldr	r0, [r7, #28]
 80056e6:	f000 f8b1 	bl	800584c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80056ea:	2301      	movs	r3, #1
 80056ec:	61bb      	str	r3, [r7, #24]
 80056ee:	e002      	b.n	80056f6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80056f0:	f04f 33ff 	mov.w	r3, #4294967295
 80056f4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80056f6:	69bb      	ldr	r3, [r7, #24]
	}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b088      	sub	sp, #32
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	461a      	mov	r2, r3
 8005718:	21a5      	movs	r1, #165	; 0xa5
 800571a:	f001 fe39 	bl	8007390 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005728:	3b01      	subs	r3, #1
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	f023 0307 	bic.w	r3, r3, #7
 8005736:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	617b      	str	r3, [r7, #20]
}
 8005754:	bf00      	nop
 8005756:	e7fe      	b.n	8005756 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01f      	beq.n	800579e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	e012      	b.n	800578a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	4413      	add	r3, r2
 800576a:	7819      	ldrb	r1, [r3, #0]
 800576c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	3334      	adds	r3, #52	; 0x34
 8005774:	460a      	mov	r2, r1
 8005776:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d006      	beq.n	8005792 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	3301      	adds	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b0f      	cmp	r3, #15
 800578e:	d9e9      	bls.n	8005764 <prvInitialiseNewTask+0x64>
 8005790:	e000      	b.n	8005794 <prvInitialiseNewTask+0x94>
			{
				break;
 8005792:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800579c:	e003      	b.n	80057a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a8:	2b37      	cmp	r3, #55	; 0x37
 80057aa:	d901      	bls.n	80057b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80057ac:	2337      	movs	r3, #55	; 0x37
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80057b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	2200      	movs	r2, #0
 80057c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80057c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c4:	3304      	adds	r3, #4
 80057c6:	4618      	mov	r0, r3
 80057c8:	f7ff f978 	bl	8004abc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	3318      	adds	r3, #24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7ff f973 	bl	8004abc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80057d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	2200      	movs	r2, #0
 80057f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80057f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80057fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fe:	3354      	adds	r3, #84	; 0x54
 8005800:	224c      	movs	r2, #76	; 0x4c
 8005802:	2100      	movs	r1, #0
 8005804:	4618      	mov	r0, r3
 8005806:	f001 fdc3 	bl	8007390 <memset>
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	4a0c      	ldr	r2, [pc, #48]	; (8005840 <prvInitialiseNewTask+0x140>)
 800580e:	659a      	str	r2, [r3, #88]	; 0x58
 8005810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005812:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <prvInitialiseNewTask+0x144>)
 8005814:	65da      	str	r2, [r3, #92]	; 0x5c
 8005816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005818:	4a0b      	ldr	r2, [pc, #44]	; (8005848 <prvInitialiseNewTask+0x148>)
 800581a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	68f9      	ldr	r1, [r7, #12]
 8005820:	69b8      	ldr	r0, [r7, #24]
 8005822:	f001 f941 	bl	8006aa8 <pxPortInitialiseStack>
 8005826:	4602      	mov	r2, r0
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005838:	bf00      	nop
 800583a:	3720      	adds	r7, #32
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	20004b24 	.word	0x20004b24
 8005844:	20004b8c 	.word	0x20004b8c
 8005848:	20004bf4 	.word	0x20004bf4

0800584c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005854:	f001 fa56 	bl	8006d04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005858:	4b2d      	ldr	r3, [pc, #180]	; (8005910 <prvAddNewTaskToReadyList+0xc4>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	4a2c      	ldr	r2, [pc, #176]	; (8005910 <prvAddNewTaskToReadyList+0xc4>)
 8005860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005862:	4b2c      	ldr	r3, [pc, #176]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d109      	bne.n	800587e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800586a:	4a2a      	ldr	r2, [pc, #168]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005870:	4b27      	ldr	r3, [pc, #156]	; (8005910 <prvAddNewTaskToReadyList+0xc4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d110      	bne.n	800589a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005878:	f000 fc26 	bl	80060c8 <prvInitialiseTaskLists>
 800587c:	e00d      	b.n	800589a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800587e:	4b26      	ldr	r3, [pc, #152]	; (8005918 <prvAddNewTaskToReadyList+0xcc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d109      	bne.n	800589a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005886:	4b23      	ldr	r3, [pc, #140]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	429a      	cmp	r2, r3
 8005892:	d802      	bhi.n	800589a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005894:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800589a:	4b20      	ldr	r3, [pc, #128]	; (800591c <prvAddNewTaskToReadyList+0xd0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	3301      	adds	r3, #1
 80058a0:	4a1e      	ldr	r2, [pc, #120]	; (800591c <prvAddNewTaskToReadyList+0xd0>)
 80058a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058a4:	4b1d      	ldr	r3, [pc, #116]	; (800591c <prvAddNewTaskToReadyList+0xd0>)
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4b1b      	ldr	r3, [pc, #108]	; (8005920 <prvAddNewTaskToReadyList+0xd4>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d903      	bls.n	80058c0 <prvAddNewTaskToReadyList+0x74>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <prvAddNewTaskToReadyList+0xd4>)
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	4613      	mov	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <prvAddNewTaskToReadyList+0xd8>)
 80058ce:	441a      	add	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3304      	adds	r3, #4
 80058d4:	4619      	mov	r1, r3
 80058d6:	4610      	mov	r0, r2
 80058d8:	f7ff f8fd 	bl	8004ad6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80058dc:	f001 fa42 	bl	8006d64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80058e0:	4b0d      	ldr	r3, [pc, #52]	; (8005918 <prvAddNewTaskToReadyList+0xcc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00e      	beq.n	8005906 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058e8:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <prvAddNewTaskToReadyList+0xc8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d207      	bcs.n	8005906 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80058f6:	4b0c      	ldr	r3, [pc, #48]	; (8005928 <prvAddNewTaskToReadyList+0xdc>)
 80058f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005906:	bf00      	nop
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000f0c 	.word	0x20000f0c
 8005914:	20000a38 	.word	0x20000a38
 8005918:	20000f18 	.word	0x20000f18
 800591c:	20000f28 	.word	0x20000f28
 8005920:	20000f14 	.word	0x20000f14
 8005924:	20000a3c 	.word	0x20000a3c
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d017      	beq.n	800596e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800593e:	4b13      	ldr	r3, [pc, #76]	; (800598c <vTaskDelay+0x60>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <vTaskDelay+0x30>
	__asm volatile
 8005946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594a:	f383 8811 	msr	BASEPRI, r3
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f3bf 8f4f 	dsb	sy
 8005956:	60bb      	str	r3, [r7, #8]
}
 8005958:	bf00      	nop
 800595a:	e7fe      	b.n	800595a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800595c:	f000 f88a 	bl	8005a74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005960:	2100      	movs	r1, #0
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fcfe 	bl	8006364 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005968:	f000 f892 	bl	8005a90 <xTaskResumeAll>
 800596c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d107      	bne.n	8005984 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005974:	4b06      	ldr	r3, [pc, #24]	; (8005990 <vTaskDelay+0x64>)
 8005976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800597a:	601a      	str	r2, [r3, #0]
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20000f34 	.word	0x20000f34
 8005990:	e000ed04 	.word	0xe000ed04

08005994 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b08a      	sub	sp, #40	; 0x28
 8005998:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800599e:	2300      	movs	r3, #0
 80059a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80059a2:	463a      	mov	r2, r7
 80059a4:	1d39      	adds	r1, r7, #4
 80059a6:	f107 0308 	add.w	r3, r7, #8
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff f832 	bl	8004a14 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	9202      	str	r2, [sp, #8]
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	2300      	movs	r3, #0
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	2300      	movs	r3, #0
 80059c0:	460a      	mov	r2, r1
 80059c2:	4924      	ldr	r1, [pc, #144]	; (8005a54 <vTaskStartScheduler+0xc0>)
 80059c4:	4824      	ldr	r0, [pc, #144]	; (8005a58 <vTaskStartScheduler+0xc4>)
 80059c6:	f7ff fdf9 	bl	80055bc <xTaskCreateStatic>
 80059ca:	4603      	mov	r3, r0
 80059cc:	4a23      	ldr	r2, [pc, #140]	; (8005a5c <vTaskStartScheduler+0xc8>)
 80059ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80059d0:	4b22      	ldr	r3, [pc, #136]	; (8005a5c <vTaskStartScheduler+0xc8>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
 80059dc:	e001      	b.n	80059e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d102      	bne.n	80059ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059e8:	f000 fd10 	bl	800640c <xTimerCreateTimerTask>
 80059ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d11b      	bne.n	8005a2c <vTaskStartScheduler+0x98>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	613b      	str	r3, [r7, #16]
}
 8005a06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a08:	4b15      	ldr	r3, [pc, #84]	; (8005a60 <vTaskStartScheduler+0xcc>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3354      	adds	r3, #84	; 0x54
 8005a0e:	4a15      	ldr	r2, [pc, #84]	; (8005a64 <vTaskStartScheduler+0xd0>)
 8005a10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005a12:	4b15      	ldr	r3, [pc, #84]	; (8005a68 <vTaskStartScheduler+0xd4>)
 8005a14:	f04f 32ff 	mov.w	r2, #4294967295
 8005a18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005a1a:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <vTaskStartScheduler+0xd8>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005a20:	4b13      	ldr	r3, [pc, #76]	; (8005a70 <vTaskStartScheduler+0xdc>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005a26:	f001 f8cb 	bl	8006bc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005a2a:	e00e      	b.n	8005a4a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a32:	d10a      	bne.n	8005a4a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	60fb      	str	r3, [r7, #12]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <vTaskStartScheduler+0xb4>
}
 8005a4a:	bf00      	nop
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	08007f34 	.word	0x08007f34
 8005a58:	08006099 	.word	0x08006099
 8005a5c:	20000f30 	.word	0x20000f30
 8005a60:	20000a38 	.word	0x20000a38
 8005a64:	2000005c 	.word	0x2000005c
 8005a68:	20000f2c 	.word	0x20000f2c
 8005a6c:	20000f18 	.word	0x20000f18
 8005a70:	20000f10 	.word	0x20000f10

08005a74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a78:	4b04      	ldr	r3, [pc, #16]	; (8005a8c <vTaskSuspendAll+0x18>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	4a03      	ldr	r2, [pc, #12]	; (8005a8c <vTaskSuspendAll+0x18>)
 8005a80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a82:	bf00      	nop
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	20000f34 	.word	0x20000f34

08005a90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a9e:	4b42      	ldr	r3, [pc, #264]	; (8005ba8 <xTaskResumeAll+0x118>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10a      	bne.n	8005abc <xTaskResumeAll+0x2c>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	603b      	str	r3, [r7, #0]
}
 8005ab8:	bf00      	nop
 8005aba:	e7fe      	b.n	8005aba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005abc:	f001 f922 	bl	8006d04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ac0:	4b39      	ldr	r3, [pc, #228]	; (8005ba8 <xTaskResumeAll+0x118>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	4a38      	ldr	r2, [pc, #224]	; (8005ba8 <xTaskResumeAll+0x118>)
 8005ac8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005aca:	4b37      	ldr	r3, [pc, #220]	; (8005ba8 <xTaskResumeAll+0x118>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d162      	bne.n	8005b98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ad2:	4b36      	ldr	r3, [pc, #216]	; (8005bac <xTaskResumeAll+0x11c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d05e      	beq.n	8005b98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ada:	e02f      	b.n	8005b3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005adc:	4b34      	ldr	r3, [pc, #208]	; (8005bb0 <xTaskResumeAll+0x120>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3318      	adds	r3, #24
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff f851 	bl	8004b90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff f84c 	bl	8004b90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afc:	4b2d      	ldr	r3, [pc, #180]	; (8005bb4 <xTaskResumeAll+0x124>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <xTaskResumeAll+0x7c>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b08:	4a2a      	ldr	r2, [pc, #168]	; (8005bb4 <xTaskResumeAll+0x124>)
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4a27      	ldr	r2, [pc, #156]	; (8005bb8 <xTaskResumeAll+0x128>)
 8005b1a:	441a      	add	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7fe ffd7 	bl	8004ad6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4b23      	ldr	r3, [pc, #140]	; (8005bbc <xTaskResumeAll+0x12c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d302      	bcc.n	8005b3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005b36:	4b22      	ldr	r3, [pc, #136]	; (8005bc0 <xTaskResumeAll+0x130>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005b3c:	4b1c      	ldr	r3, [pc, #112]	; (8005bb0 <xTaskResumeAll+0x120>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1cb      	bne.n	8005adc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b4a:	f000 fb5f 	bl	800620c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b4e:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <xTaskResumeAll+0x134>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d010      	beq.n	8005b7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b5a:	f000 f847 	bl	8005bec <xTaskIncrementTick>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d002      	beq.n	8005b6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005b64:	4b16      	ldr	r3, [pc, #88]	; (8005bc0 <xTaskResumeAll+0x130>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1f1      	bne.n	8005b5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <xTaskResumeAll+0x134>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b7c:	4b10      	ldr	r3, [pc, #64]	; (8005bc0 <xTaskResumeAll+0x130>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b84:	2301      	movs	r3, #1
 8005b86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b88:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <xTaskResumeAll+0x138>)
 8005b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	f3bf 8f4f 	dsb	sy
 8005b94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b98:	f001 f8e4 	bl	8006d64 <vPortExitCritical>

	return xAlreadyYielded;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000f34 	.word	0x20000f34
 8005bac:	20000f0c 	.word	0x20000f0c
 8005bb0:	20000ecc 	.word	0x20000ecc
 8005bb4:	20000f14 	.word	0x20000f14
 8005bb8:	20000a3c 	.word	0x20000a3c
 8005bbc:	20000a38 	.word	0x20000a38
 8005bc0:	20000f20 	.word	0x20000f20
 8005bc4:	20000f1c 	.word	0x20000f1c
 8005bc8:	e000ed04 	.word	0xe000ed04

08005bcc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b083      	sub	sp, #12
 8005bd0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <xTaskGetTickCount+0x1c>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005bd8:	687b      	ldr	r3, [r7, #4]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	370c      	adds	r7, #12
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop
 8005be8:	20000f10 	.word	0x20000f10

08005bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf6:	4b4f      	ldr	r3, [pc, #316]	; (8005d34 <xTaskIncrementTick+0x148>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 808f 	bne.w	8005d1e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c00:	4b4d      	ldr	r3, [pc, #308]	; (8005d38 <xTaskIncrementTick+0x14c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c08:	4a4b      	ldr	r2, [pc, #300]	; (8005d38 <xTaskIncrementTick+0x14c>)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d120      	bne.n	8005c56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c14:	4b49      	ldr	r3, [pc, #292]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	603b      	str	r3, [r7, #0]
}
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <xTaskIncrementTick+0x46>
 8005c34:	4b41      	ldr	r3, [pc, #260]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	4b41      	ldr	r3, [pc, #260]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a3f      	ldr	r2, [pc, #252]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4a3f      	ldr	r2, [pc, #252]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	4b3e      	ldr	r3, [pc, #248]	; (8005d44 <xTaskIncrementTick+0x158>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a3d      	ldr	r2, [pc, #244]	; (8005d44 <xTaskIncrementTick+0x158>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	f000 fadb 	bl	800620c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c56:	4b3c      	ldr	r3, [pc, #240]	; (8005d48 <xTaskIncrementTick+0x15c>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d349      	bcc.n	8005cf4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c60:	4b36      	ldr	r3, [pc, #216]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6a:	4b37      	ldr	r3, [pc, #220]	; (8005d48 <xTaskIncrementTick+0x15c>)
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c70:	601a      	str	r2, [r3, #0]
					break;
 8005c72:	e03f      	b.n	8005cf4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c74:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d203      	bcs.n	8005c94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c8c:	4a2e      	ldr	r2, [pc, #184]	; (8005d48 <xTaskIncrementTick+0x15c>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c92:	e02f      	b.n	8005cf4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe ff79 	bl	8004b90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	3318      	adds	r3, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe ff70 	bl	8004b90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb4:	4b25      	ldr	r3, [pc, #148]	; (8005d4c <xTaskIncrementTick+0x160>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d903      	bls.n	8005cc4 <xTaskIncrementTick+0xd8>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	4a22      	ldr	r2, [pc, #136]	; (8005d4c <xTaskIncrementTick+0x160>)
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	; (8005d50 <xTaskIncrementTick+0x164>)
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fe fefb 	bl	8004ad6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <xTaskIncrementTick+0x168>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d3b8      	bcc.n	8005c60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf2:	e7b5      	b.n	8005c60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cf4:	4b17      	ldr	r3, [pc, #92]	; (8005d54 <xTaskIncrementTick+0x168>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfa:	4915      	ldr	r1, [pc, #84]	; (8005d50 <xTaskIncrementTick+0x164>)
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d901      	bls.n	8005d10 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d10:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <xTaskIncrementTick+0x16c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	617b      	str	r3, [r7, #20]
 8005d1c:	e004      	b.n	8005d28 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <xTaskIncrementTick+0x170>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	4a0d      	ldr	r2, [pc, #52]	; (8005d5c <xTaskIncrementTick+0x170>)
 8005d26:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d28:	697b      	ldr	r3, [r7, #20]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	20000f34 	.word	0x20000f34
 8005d38:	20000f10 	.word	0x20000f10
 8005d3c:	20000ec4 	.word	0x20000ec4
 8005d40:	20000ec8 	.word	0x20000ec8
 8005d44:	20000f24 	.word	0x20000f24
 8005d48:	20000f2c 	.word	0x20000f2c
 8005d4c:	20000f14 	.word	0x20000f14
 8005d50:	20000a3c 	.word	0x20000a3c
 8005d54:	20000a38 	.word	0x20000a38
 8005d58:	20000f20 	.word	0x20000f20
 8005d5c:	20000f1c 	.word	0x20000f1c

08005d60 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d66:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <vTaskSwitchContext+0xb0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d6e:	4b29      	ldr	r3, [pc, #164]	; (8005e14 <vTaskSwitchContext+0xb4>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d74:	e046      	b.n	8005e04 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <vTaskSwitchContext+0xb4>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d7c:	4b26      	ldr	r3, [pc, #152]	; (8005e18 <vTaskSwitchContext+0xb8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e010      	b.n	8005da6 <vTaskSwitchContext+0x46>
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10a      	bne.n	8005da0 <vTaskSwitchContext+0x40>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	607b      	str	r3, [r7, #4]
}
 8005d9c:	bf00      	nop
 8005d9e:	e7fe      	b.n	8005d9e <vTaskSwitchContext+0x3e>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	491d      	ldr	r1, [pc, #116]	; (8005e1c <vTaskSwitchContext+0xbc>)
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0e4      	beq.n	8005d84 <vTaskSwitchContext+0x24>
 8005dba:	68fa      	ldr	r2, [r7, #12]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	4a15      	ldr	r2, [pc, #84]	; (8005e1c <vTaskSwitchContext+0xbc>)
 8005dc6:	4413      	add	r3, r2
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	685a      	ldr	r2, [r3, #4]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	605a      	str	r2, [r3, #4]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	685a      	ldr	r2, [r3, #4]
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d104      	bne.n	8005dea <vTaskSwitchContext+0x8a>
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	685a      	ldr	r2, [r3, #4]
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	605a      	str	r2, [r3, #4]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4a0b      	ldr	r2, [pc, #44]	; (8005e20 <vTaskSwitchContext+0xc0>)
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	4a08      	ldr	r2, [pc, #32]	; (8005e18 <vTaskSwitchContext+0xb8>)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <vTaskSwitchContext+0xc0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3354      	adds	r3, #84	; 0x54
 8005e00:	4a08      	ldr	r2, [pc, #32]	; (8005e24 <vTaskSwitchContext+0xc4>)
 8005e02:	6013      	str	r3, [r2, #0]
}
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	20000f34 	.word	0x20000f34
 8005e14:	20000f20 	.word	0x20000f20
 8005e18:	20000f14 	.word	0x20000f14
 8005e1c:	20000a3c 	.word	0x20000a3c
 8005e20:	20000a38 	.word	0x20000a38
 8005e24:	2000005c 	.word	0x2000005c

08005e28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10a      	bne.n	8005e4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	60fb      	str	r3, [r7, #12]
}
 8005e4a:	bf00      	nop
 8005e4c:	e7fe      	b.n	8005e4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e4e:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <vTaskPlaceOnEventList+0x44>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3318      	adds	r3, #24
 8005e54:	4619      	mov	r1, r3
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fe fe61 	bl	8004b1e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	6838      	ldr	r0, [r7, #0]
 8005e60:	f000 fa80 	bl	8006364 <prvAddCurrentTaskToDelayedList>
}
 8005e64:	bf00      	nop
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000a38 	.word	0x20000a38

08005e70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	617b      	str	r3, [r7, #20]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e98:	4b0a      	ldr	r3, [pc, #40]	; (8005ec4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3318      	adds	r3, #24
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f7fe fe18 	bl	8004ad6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005eac:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	68b8      	ldr	r0, [r7, #8]
 8005eb6:	f000 fa55 	bl	8006364 <prvAddCurrentTaskToDelayedList>
	}
 8005eba:	bf00      	nop
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000a38 	.word	0x20000a38

08005ec8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee2:	f383 8811 	msr	BASEPRI, r3
 8005ee6:	f3bf 8f6f 	isb	sy
 8005eea:	f3bf 8f4f 	dsb	sy
 8005eee:	60fb      	str	r3, [r7, #12]
}
 8005ef0:	bf00      	nop
 8005ef2:	e7fe      	b.n	8005ef2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	3318      	adds	r3, #24
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fe fe49 	bl	8004b90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005efe:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <xTaskRemoveFromEventList+0xb0>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d11d      	bne.n	8005f42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	3304      	adds	r3, #4
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7fe fe40 	bl	8004b90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f14:	4b19      	ldr	r3, [pc, #100]	; (8005f7c <xTaskRemoveFromEventList+0xb4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d903      	bls.n	8005f24 <xTaskRemoveFromEventList+0x5c>
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	4a16      	ldr	r2, [pc, #88]	; (8005f7c <xTaskRemoveFromEventList+0xb4>)
 8005f22:	6013      	str	r3, [r2, #0]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <xTaskRemoveFromEventList+0xb8>)
 8005f32:	441a      	add	r2, r3
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	3304      	adds	r3, #4
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f7fe fdcb 	bl	8004ad6 <vListInsertEnd>
 8005f40:	e005      	b.n	8005f4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	3318      	adds	r3, #24
 8005f46:	4619      	mov	r1, r3
 8005f48:	480e      	ldr	r0, [pc, #56]	; (8005f84 <xTaskRemoveFromEventList+0xbc>)
 8005f4a:	f7fe fdc4 	bl	8004ad6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f52:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <xTaskRemoveFromEventList+0xc0>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d905      	bls.n	8005f68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <xTaskRemoveFromEventList+0xc4>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e001      	b.n	8005f6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f6c:	697b      	ldr	r3, [r7, #20]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000f34 	.word	0x20000f34
 8005f7c:	20000f14 	.word	0x20000f14
 8005f80:	20000a3c 	.word	0x20000a3c
 8005f84:	20000ecc 	.word	0x20000ecc
 8005f88:	20000a38 	.word	0x20000a38
 8005f8c:	20000f20 	.word	0x20000f20

08005f90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <vTaskInternalSetTimeOutState+0x24>)
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <vTaskInternalSetTimeOutState+0x28>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	605a      	str	r2, [r3, #4]
}
 8005fa8:	bf00      	nop
 8005faa:	370c      	adds	r7, #12
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	20000f24 	.word	0x20000f24
 8005fb8:	20000f10 	.word	0x20000f10

08005fbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b088      	sub	sp, #32
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d10a      	bne.n	8005fe2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	613b      	str	r3, [r7, #16]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	60fb      	str	r3, [r7, #12]
}
 8005ffa:	bf00      	nop
 8005ffc:	e7fe      	b.n	8005ffc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ffe:	f000 fe81 	bl	8006d04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006002:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <xTaskCheckForTimeOut+0xbc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	d102      	bne.n	8006022 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800601c:	2300      	movs	r3, #0
 800601e:	61fb      	str	r3, [r7, #28]
 8006020:	e023      	b.n	800606a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	4b15      	ldr	r3, [pc, #84]	; (800607c <xTaskCheckForTimeOut+0xc0>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d007      	beq.n	800603e <xTaskCheckForTimeOut+0x82>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	69ba      	ldr	r2, [r7, #24]
 8006034:	429a      	cmp	r2, r3
 8006036:	d302      	bcc.n	800603e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006038:	2301      	movs	r3, #1
 800603a:	61fb      	str	r3, [r7, #28]
 800603c:	e015      	b.n	800606a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	429a      	cmp	r2, r3
 8006046:	d20b      	bcs.n	8006060 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	1ad2      	subs	r2, r2, r3
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ff9b 	bl	8005f90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
 800605e:	e004      	b.n	800606a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	2200      	movs	r2, #0
 8006064:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006066:	2301      	movs	r3, #1
 8006068:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800606a:	f000 fe7b 	bl	8006d64 <vPortExitCritical>

	return xReturn;
 800606e:	69fb      	ldr	r3, [r7, #28]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000f10 	.word	0x20000f10
 800607c:	20000f24 	.word	0x20000f24

08006080 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006084:	4b03      	ldr	r3, [pc, #12]	; (8006094 <vTaskMissedYield+0x14>)
 8006086:	2201      	movs	r2, #1
 8006088:	601a      	str	r2, [r3, #0]
}
 800608a:	bf00      	nop
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr
 8006094:	20000f20 	.word	0x20000f20

08006098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060a0:	f000 f852 	bl	8006148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060a4:	4b06      	ldr	r3, [pc, #24]	; (80060c0 <prvIdleTask+0x28>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d9f9      	bls.n	80060a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <prvIdleTask+0x2c>)
 80060ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80060bc:	e7f0      	b.n	80060a0 <prvIdleTask+0x8>
 80060be:	bf00      	nop
 80060c0:	20000a3c 	.word	0x20000a3c
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]
 80060d2:	e00c      	b.n	80060ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	4613      	mov	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4a12      	ldr	r2, [pc, #72]	; (8006128 <prvInitialiseTaskLists+0x60>)
 80060e0:	4413      	add	r3, r2
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fcca 	bl	8004a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	3301      	adds	r3, #1
 80060ec:	607b      	str	r3, [r7, #4]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b37      	cmp	r3, #55	; 0x37
 80060f2:	d9ef      	bls.n	80060d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060f4:	480d      	ldr	r0, [pc, #52]	; (800612c <prvInitialiseTaskLists+0x64>)
 80060f6:	f7fe fcc1 	bl	8004a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060fa:	480d      	ldr	r0, [pc, #52]	; (8006130 <prvInitialiseTaskLists+0x68>)
 80060fc:	f7fe fcbe 	bl	8004a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006100:	480c      	ldr	r0, [pc, #48]	; (8006134 <prvInitialiseTaskLists+0x6c>)
 8006102:	f7fe fcbb 	bl	8004a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006106:	480c      	ldr	r0, [pc, #48]	; (8006138 <prvInitialiseTaskLists+0x70>)
 8006108:	f7fe fcb8 	bl	8004a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800610c:	480b      	ldr	r0, [pc, #44]	; (800613c <prvInitialiseTaskLists+0x74>)
 800610e:	f7fe fcb5 	bl	8004a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006112:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <prvInitialiseTaskLists+0x78>)
 8006114:	4a05      	ldr	r2, [pc, #20]	; (800612c <prvInitialiseTaskLists+0x64>)
 8006116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006118:	4b0a      	ldr	r3, [pc, #40]	; (8006144 <prvInitialiseTaskLists+0x7c>)
 800611a:	4a05      	ldr	r2, [pc, #20]	; (8006130 <prvInitialiseTaskLists+0x68>)
 800611c:	601a      	str	r2, [r3, #0]
}
 800611e:	bf00      	nop
 8006120:	3708      	adds	r7, #8
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000a3c 	.word	0x20000a3c
 800612c:	20000e9c 	.word	0x20000e9c
 8006130:	20000eb0 	.word	0x20000eb0
 8006134:	20000ecc 	.word	0x20000ecc
 8006138:	20000ee0 	.word	0x20000ee0
 800613c:	20000ef8 	.word	0x20000ef8
 8006140:	20000ec4 	.word	0x20000ec4
 8006144:	20000ec8 	.word	0x20000ec8

08006148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800614e:	e019      	b.n	8006184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006150:	f000 fdd8 	bl	8006d04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006154:	4b10      	ldr	r3, [pc, #64]	; (8006198 <prvCheckTasksWaitingTermination+0x50>)
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3304      	adds	r3, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe fd15 	bl	8004b90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <prvCheckTasksWaitingTermination+0x54>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3b01      	subs	r3, #1
 800616c:	4a0b      	ldr	r2, [pc, #44]	; (800619c <prvCheckTasksWaitingTermination+0x54>)
 800616e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006170:	4b0b      	ldr	r3, [pc, #44]	; (80061a0 <prvCheckTasksWaitingTermination+0x58>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3b01      	subs	r3, #1
 8006176:	4a0a      	ldr	r2, [pc, #40]	; (80061a0 <prvCheckTasksWaitingTermination+0x58>)
 8006178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800617a:	f000 fdf3 	bl	8006d64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f810 	bl	80061a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <prvCheckTasksWaitingTermination+0x58>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e1      	bne.n	8006150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20000ee0 	.word	0x20000ee0
 800619c:	20000f0c 	.word	0x20000f0c
 80061a0:	20000ef4 	.word	0x20000ef4

080061a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3354      	adds	r3, #84	; 0x54
 80061b0:	4618      	mov	r0, r3
 80061b2:	f001 f8f5 	bl	80073a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d108      	bne.n	80061d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 ff8b 	bl	80070e0 <vPortFree>
				vPortFree( pxTCB );
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 ff88 	bl	80070e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80061d0:	e018      	b.n	8006204 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d103      	bne.n	80061e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 ff7f 	bl	80070e0 <vPortFree>
	}
 80061e2:	e00f      	b.n	8006204 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d00a      	beq.n	8006204 <prvDeleteTCB+0x60>
	__asm volatile
 80061ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f2:	f383 8811 	msr	BASEPRI, r3
 80061f6:	f3bf 8f6f 	isb	sy
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	60fb      	str	r3, [r7, #12]
}
 8006200:	bf00      	nop
 8006202:	e7fe      	b.n	8006202 <prvDeleteTCB+0x5e>
	}
 8006204:	bf00      	nop
 8006206:	3710      	adds	r7, #16
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006212:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <prvResetNextTaskUnblockTime+0x38>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d104      	bne.n	8006226 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800621c:	4b0a      	ldr	r3, [pc, #40]	; (8006248 <prvResetNextTaskUnblockTime+0x3c>)
 800621e:	f04f 32ff 	mov.w	r2, #4294967295
 8006222:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006224:	e008      	b.n	8006238 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <prvResetNextTaskUnblockTime+0x38>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4a04      	ldr	r2, [pc, #16]	; (8006248 <prvResetNextTaskUnblockTime+0x3c>)
 8006236:	6013      	str	r3, [r2, #0]
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	20000ec4 	.word	0x20000ec4
 8006248:	20000f2c 	.word	0x20000f2c

0800624c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006252:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <xTaskGetSchedulerState+0x34>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d102      	bne.n	8006260 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800625a:	2301      	movs	r3, #1
 800625c:	607b      	str	r3, [r7, #4]
 800625e:	e008      	b.n	8006272 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006260:	4b08      	ldr	r3, [pc, #32]	; (8006284 <xTaskGetSchedulerState+0x38>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006268:	2302      	movs	r3, #2
 800626a:	607b      	str	r3, [r7, #4]
 800626c:	e001      	b.n	8006272 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800626e:	2300      	movs	r3, #0
 8006270:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006272:	687b      	ldr	r3, [r7, #4]
	}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	20000f18 	.word	0x20000f18
 8006284:	20000f34 	.word	0x20000f34

08006288 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006294:	2300      	movs	r3, #0
 8006296:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d056      	beq.n	800634c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800629e:	4b2e      	ldr	r3, [pc, #184]	; (8006358 <xTaskPriorityDisinherit+0xd0>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d00a      	beq.n	80062be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60bb      	str	r3, [r7, #8]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062e0:	1e5a      	subs	r2, r3, #1
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d02c      	beq.n	800634c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d128      	bne.n	800634c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	3304      	adds	r3, #4
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fc46 	bl	8004b90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800631c:	4b0f      	ldr	r3, [pc, #60]	; (800635c <xTaskPriorityDisinherit+0xd4>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d903      	bls.n	800632c <xTaskPriorityDisinherit+0xa4>
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4a0c      	ldr	r2, [pc, #48]	; (800635c <xTaskPriorityDisinherit+0xd4>)
 800632a:	6013      	str	r3, [r2, #0]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	4613      	mov	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4a09      	ldr	r2, [pc, #36]	; (8006360 <xTaskPriorityDisinherit+0xd8>)
 800633a:	441a      	add	r2, r3
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	3304      	adds	r3, #4
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f7fe fbc7 	bl	8004ad6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006348:	2301      	movs	r3, #1
 800634a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800634c:	697b      	ldr	r3, [r7, #20]
	}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	20000a38 	.word	0x20000a38
 800635c:	20000f14 	.word	0x20000f14
 8006360:	20000a3c 	.word	0x20000a3c

08006364 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800636e:	4b21      	ldr	r3, [pc, #132]	; (80063f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006374:	4b20      	ldr	r3, [pc, #128]	; (80063f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3304      	adds	r3, #4
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fc08 	bl	8004b90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006386:	d10a      	bne.n	800639e <prvAddCurrentTaskToDelayedList+0x3a>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d007      	beq.n	800639e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800638e:	4b1a      	ldr	r3, [pc, #104]	; (80063f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3304      	adds	r3, #4
 8006394:	4619      	mov	r1, r3
 8006396:	4819      	ldr	r0, [pc, #100]	; (80063fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006398:	f7fe fb9d 	bl	8004ad6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800639c:	e026      	b.n	80063ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4413      	add	r3, r2
 80063a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80063a6:	4b14      	ldr	r3, [pc, #80]	; (80063f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d209      	bcs.n	80063ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063b6:	4b12      	ldr	r3, [pc, #72]	; (8006400 <prvAddCurrentTaskToDelayedList+0x9c>)
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	4b0f      	ldr	r3, [pc, #60]	; (80063f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f7fe fbab 	bl	8004b1e <vListInsert>
}
 80063c8:	e010      	b.n	80063ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063ca:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <prvAddCurrentTaskToDelayedList+0xa0>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	4b0a      	ldr	r3, [pc, #40]	; (80063f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3304      	adds	r3, #4
 80063d4:	4619      	mov	r1, r3
 80063d6:	4610      	mov	r0, r2
 80063d8:	f7fe fba1 	bl	8004b1e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80063dc:	4b0a      	ldr	r3, [pc, #40]	; (8006408 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d202      	bcs.n	80063ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80063e6:	4a08      	ldr	r2, [pc, #32]	; (8006408 <prvAddCurrentTaskToDelayedList+0xa4>)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	6013      	str	r3, [r2, #0]
}
 80063ec:	bf00      	nop
 80063ee:	3710      	adds	r7, #16
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20000f10 	.word	0x20000f10
 80063f8:	20000a38 	.word	0x20000a38
 80063fc:	20000ef8 	.word	0x20000ef8
 8006400:	20000ec8 	.word	0x20000ec8
 8006404:	20000ec4 	.word	0x20000ec4
 8006408:	20000f2c 	.word	0x20000f2c

0800640c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08a      	sub	sp, #40	; 0x28
 8006410:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006412:	2300      	movs	r3, #0
 8006414:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006416:	f000 fb07 	bl	8006a28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800641a:	4b1c      	ldr	r3, [pc, #112]	; (800648c <xTimerCreateTimerTask+0x80>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d021      	beq.n	8006466 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006426:	2300      	movs	r3, #0
 8006428:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800642a:	1d3a      	adds	r2, r7, #4
 800642c:	f107 0108 	add.w	r1, r7, #8
 8006430:	f107 030c 	add.w	r3, r7, #12
 8006434:	4618      	mov	r0, r3
 8006436:	f7fe fb07 	bl	8004a48 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800643a:	6879      	ldr	r1, [r7, #4]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	9202      	str	r2, [sp, #8]
 8006442:	9301      	str	r3, [sp, #4]
 8006444:	2302      	movs	r3, #2
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2300      	movs	r3, #0
 800644a:	460a      	mov	r2, r1
 800644c:	4910      	ldr	r1, [pc, #64]	; (8006490 <xTimerCreateTimerTask+0x84>)
 800644e:	4811      	ldr	r0, [pc, #68]	; (8006494 <xTimerCreateTimerTask+0x88>)
 8006450:	f7ff f8b4 	bl	80055bc <xTaskCreateStatic>
 8006454:	4603      	mov	r3, r0
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <xTimerCreateTimerTask+0x8c>)
 8006458:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <xTimerCreateTimerTask+0x8c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10a      	bne.n	8006482 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	613b      	str	r3, [r7, #16]
}
 800647e:	bf00      	nop
 8006480:	e7fe      	b.n	8006480 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006482:	697b      	ldr	r3, [r7, #20]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3718      	adds	r7, #24
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	20000f68 	.word	0x20000f68
 8006490:	08007f3c 	.word	0x08007f3c
 8006494:	080065d1 	.word	0x080065d1
 8006498:	20000f6c 	.word	0x20000f6c

0800649c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
 80064a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80064aa:	2300      	movs	r3, #0
 80064ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10a      	bne.n	80064ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	623b      	str	r3, [r7, #32]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80064ca:	4b1a      	ldr	r3, [pc, #104]	; (8006534 <xTimerGenericCommand+0x98>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d02a      	beq.n	8006528 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b05      	cmp	r3, #5
 80064e2:	dc18      	bgt.n	8006516 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80064e4:	f7ff feb2 	bl	800624c <xTaskGetSchedulerState>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d109      	bne.n	8006502 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80064ee:	4b11      	ldr	r3, [pc, #68]	; (8006534 <xTimerGenericCommand+0x98>)
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	f107 0110 	add.w	r1, r7, #16
 80064f6:	2300      	movs	r3, #0
 80064f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fa:	f7fe fc77 	bl	8004dec <xQueueGenericSend>
 80064fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006500:	e012      	b.n	8006528 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006502:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <xTimerGenericCommand+0x98>)
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	f107 0110 	add.w	r1, r7, #16
 800650a:	2300      	movs	r3, #0
 800650c:	2200      	movs	r2, #0
 800650e:	f7fe fc6d 	bl	8004dec <xQueueGenericSend>
 8006512:	6278      	str	r0, [r7, #36]	; 0x24
 8006514:	e008      	b.n	8006528 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006516:	4b07      	ldr	r3, [pc, #28]	; (8006534 <xTimerGenericCommand+0x98>)
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	f107 0110 	add.w	r1, r7, #16
 800651e:	2300      	movs	r3, #0
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	f7fe fd61 	bl	8004fe8 <xQueueGenericSendFromISR>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800652a:	4618      	mov	r0, r3
 800652c:	3728      	adds	r7, #40	; 0x28
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	20000f68 	.word	0x20000f68

08006538 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b088      	sub	sp, #32
 800653c:	af02      	add	r7, sp, #8
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006542:	4b22      	ldr	r3, [pc, #136]	; (80065cc <prvProcessExpiredTimer+0x94>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	3304      	adds	r3, #4
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe fb1d 	bl	8004b90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800655c:	f003 0304 	and.w	r3, r3, #4
 8006560:	2b00      	cmp	r3, #0
 8006562:	d022      	beq.n	80065aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	699a      	ldr	r2, [r3, #24]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	18d1      	adds	r1, r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	6978      	ldr	r0, [r7, #20]
 8006572:	f000 f8d1 	bl	8006718 <prvInsertTimerInActiveList>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d01f      	beq.n	80065bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800657c:	2300      	movs	r3, #0
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	2300      	movs	r3, #0
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	2100      	movs	r1, #0
 8006586:	6978      	ldr	r0, [r7, #20]
 8006588:	f7ff ff88 	bl	800649c <xTimerGenericCommand>
 800658c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d113      	bne.n	80065bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	60fb      	str	r3, [r7, #12]
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065b0:	f023 0301 	bic.w	r3, r3, #1
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	6a1b      	ldr	r3, [r3, #32]
 80065c0:	6978      	ldr	r0, [r7, #20]
 80065c2:	4798      	blx	r3
}
 80065c4:	bf00      	nop
 80065c6:	3718      	adds	r7, #24
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20000f60 	.word	0x20000f60

080065d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065d8:	f107 0308 	add.w	r3, r7, #8
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 f857 	bl	8006690 <prvGetNextExpireTime>
 80065e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	4619      	mov	r1, r3
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f803 	bl	80065f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80065ee:	f000 f8d5 	bl	800679c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80065f2:	e7f1      	b.n	80065d8 <prvTimerTask+0x8>

080065f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80065fe:	f7ff fa39 	bl	8005a74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006602:	f107 0308 	add.w	r3, r7, #8
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f866 	bl	80066d8 <prvSampleTimeNow>
 800660c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d130      	bne.n	8006676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <prvProcessTimerOrBlockTask+0x3c>
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	429a      	cmp	r2, r3
 8006620:	d806      	bhi.n	8006630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006622:	f7ff fa35 	bl	8005a90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f7ff ff85 	bl	8006538 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800662e:	e024      	b.n	800667a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d008      	beq.n	8006648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006636:	4b13      	ldr	r3, [pc, #76]	; (8006684 <prvProcessTimerOrBlockTask+0x90>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <prvProcessTimerOrBlockTask+0x50>
 8006640:	2301      	movs	r3, #1
 8006642:	e000      	b.n	8006646 <prvProcessTimerOrBlockTask+0x52>
 8006644:	2300      	movs	r3, #0
 8006646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006648:	4b0f      	ldr	r3, [pc, #60]	; (8006688 <prvProcessTimerOrBlockTask+0x94>)
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	683a      	ldr	r2, [r7, #0]
 8006654:	4619      	mov	r1, r3
 8006656:	f7fe ff7d 	bl	8005554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800665a:	f7ff fa19 	bl	8005a90 <xTaskResumeAll>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <prvProcessTimerOrBlockTask+0x98>)
 8006666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800666a:	601a      	str	r2, [r3, #0]
 800666c:	f3bf 8f4f 	dsb	sy
 8006670:	f3bf 8f6f 	isb	sy
}
 8006674:	e001      	b.n	800667a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006676:	f7ff fa0b 	bl	8005a90 <xTaskResumeAll>
}
 800667a:	bf00      	nop
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000f64 	.word	0x20000f64
 8006688:	20000f68 	.word	0x20000f68
 800668c:	e000ed04 	.word	0xe000ed04

08006690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006698:	4b0e      	ldr	r3, [pc, #56]	; (80066d4 <prvGetNextExpireTime+0x44>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d101      	bne.n	80066a6 <prvGetNextExpireTime+0x16>
 80066a2:	2201      	movs	r2, #1
 80066a4:	e000      	b.n	80066a8 <prvGetNextExpireTime+0x18>
 80066a6:	2200      	movs	r2, #0
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d105      	bne.n	80066c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066b4:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <prvGetNextExpireTime+0x44>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68db      	ldr	r3, [r3, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e001      	b.n	80066c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80066c0:	2300      	movs	r3, #0
 80066c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80066c4:	68fb      	ldr	r3, [r7, #12]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20000f60 	.word	0x20000f60

080066d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80066e0:	f7ff fa74 	bl	8005bcc <xTaskGetTickCount>
 80066e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <prvSampleTimeNow+0x3c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d205      	bcs.n	80066fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80066f0:	f000 f936 	bl	8006960 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e002      	b.n	8006702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006702:	4a04      	ldr	r2, [pc, #16]	; (8006714 <prvSampleTimeNow+0x3c>)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006708:	68fb      	ldr	r3, [r7, #12]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	20000f70 	.word	0x20000f70

08006718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
 8006724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006726:	2300      	movs	r3, #0
 8006728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006736:	68ba      	ldr	r2, [r7, #8]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	429a      	cmp	r2, r3
 800673c:	d812      	bhi.n	8006764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800673e:	687a      	ldr	r2, [r7, #4]
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	1ad2      	subs	r2, r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	429a      	cmp	r2, r3
 800674a:	d302      	bcc.n	8006752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800674c:	2301      	movs	r3, #1
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	e01b      	b.n	800678a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006752:	4b10      	ldr	r3, [pc, #64]	; (8006794 <prvInsertTimerInActiveList+0x7c>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3304      	adds	r3, #4
 800675a:	4619      	mov	r1, r3
 800675c:	4610      	mov	r0, r2
 800675e:	f7fe f9de 	bl	8004b1e <vListInsert>
 8006762:	e012      	b.n	800678a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d206      	bcs.n	800677a <prvInsertTimerInActiveList+0x62>
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	429a      	cmp	r2, r3
 8006772:	d302      	bcc.n	800677a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006774:	2301      	movs	r3, #1
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	e007      	b.n	800678a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800677a:	4b07      	ldr	r3, [pc, #28]	; (8006798 <prvInsertTimerInActiveList+0x80>)
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	3304      	adds	r3, #4
 8006782:	4619      	mov	r1, r3
 8006784:	4610      	mov	r0, r2
 8006786:	f7fe f9ca 	bl	8004b1e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800678a:	697b      	ldr	r3, [r7, #20]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000f64 	.word	0x20000f64
 8006798:	20000f60 	.word	0x20000f60

0800679c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08e      	sub	sp, #56	; 0x38
 80067a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80067a2:	e0ca      	b.n	800693a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	da18      	bge.n	80067dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80067aa:	1d3b      	adds	r3, r7, #4
 80067ac:	3304      	adds	r3, #4
 80067ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80067b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80067b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ba:	f383 8811 	msr	BASEPRI, r3
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f3bf 8f4f 	dsb	sy
 80067c6:	61fb      	str	r3, [r7, #28]
}
 80067c8:	bf00      	nop
 80067ca:	e7fe      	b.n	80067ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80067cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d2:	6850      	ldr	r0, [r2, #4]
 80067d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067d6:	6892      	ldr	r2, [r2, #8]
 80067d8:	4611      	mov	r1, r2
 80067da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	f2c0 80ab 	blt.w	800693a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80067e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ea:	695b      	ldr	r3, [r3, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	3304      	adds	r3, #4
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fe f9cb 	bl	8004b90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067fa:	463b      	mov	r3, r7
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff ff6b 	bl	80066d8 <prvSampleTimeNow>
 8006802:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b09      	cmp	r3, #9
 8006808:	f200 8096 	bhi.w	8006938 <prvProcessReceivedCommands+0x19c>
 800680c:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <prvProcessReceivedCommands+0x78>)
 800680e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006812:	bf00      	nop
 8006814:	0800683d 	.word	0x0800683d
 8006818:	0800683d 	.word	0x0800683d
 800681c:	0800683d 	.word	0x0800683d
 8006820:	080068b1 	.word	0x080068b1
 8006824:	080068c5 	.word	0x080068c5
 8006828:	0800690f 	.word	0x0800690f
 800682c:	0800683d 	.word	0x0800683d
 8006830:	0800683d 	.word	0x0800683d
 8006834:	080068b1 	.word	0x080068b1
 8006838:	080068c5 	.word	0x080068c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006842:	f043 0301 	orr.w	r3, r3, #1
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	18d1      	adds	r1, r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800685a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800685c:	f7ff ff5c 	bl	8006718 <prvInsertTimerInActiveList>
 8006860:	4603      	mov	r3, r0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d069      	beq.n	800693a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800686c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d05e      	beq.n	800693a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	441a      	add	r2, r3
 8006884:	2300      	movs	r3, #0
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	2300      	movs	r3, #0
 800688a:	2100      	movs	r1, #0
 800688c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800688e:	f7ff fe05 	bl	800649c <xTimerGenericCommand>
 8006892:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006894:	6a3b      	ldr	r3, [r7, #32]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d14f      	bne.n	800693a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800689a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689e:	f383 8811 	msr	BASEPRI, r3
 80068a2:	f3bf 8f6f 	isb	sy
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	61bb      	str	r3, [r7, #24]
}
 80068ac:	bf00      	nop
 80068ae:	e7fe      	b.n	80068ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80068c2:	e03a      	b.n	800693a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80068dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10a      	bne.n	80068fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	617b      	str	r3, [r7, #20]
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	18d1      	adds	r1, r2, r3
 8006902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006908:	f7ff ff06 	bl	8006718 <prvInsertTimerInActiveList>
					break;
 800690c:	e015      	b.n	800693a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800691c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691e:	f000 fbdf 	bl	80070e0 <vPortFree>
 8006922:	e00a      	b.n	800693a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	b2da      	uxtb	r2, r3
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006936:	e000      	b.n	800693a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006938:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800693a:	4b08      	ldr	r3, [pc, #32]	; (800695c <prvProcessReceivedCommands+0x1c0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	1d39      	adds	r1, r7, #4
 8006940:	2200      	movs	r2, #0
 8006942:	4618      	mov	r0, r3
 8006944:	f7fe fbec 	bl	8005120 <xQueueReceive>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	f47f af2a 	bne.w	80067a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006950:	bf00      	nop
 8006952:	bf00      	nop
 8006954:	3730      	adds	r7, #48	; 0x30
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20000f68 	.word	0x20000f68

08006960 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b088      	sub	sp, #32
 8006964:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006966:	e048      	b.n	80069fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006968:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <prvSwitchTimerLists+0xc0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006972:	4b2b      	ldr	r3, [pc, #172]	; (8006a20 <prvSwitchTimerLists+0xc0>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3304      	adds	r3, #4
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe f905 	bl	8004b90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d02e      	beq.n	80069fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d90e      	bls.n	80069cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	68ba      	ldr	r2, [r7, #8]
 80069b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069ba:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <prvSwitchTimerLists+0xc0>)
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3304      	adds	r3, #4
 80069c2:	4619      	mov	r1, r3
 80069c4:	4610      	mov	r0, r2
 80069c6:	f7fe f8aa 	bl	8004b1e <vListInsert>
 80069ca:	e016      	b.n	80069fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069cc:	2300      	movs	r3, #0
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	2300      	movs	r3, #0
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	2100      	movs	r1, #0
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f7ff fd60 	bl	800649c <xTimerGenericCommand>
 80069dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	603b      	str	r3, [r7, #0]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80069fa:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <prvSwitchTimerLists+0xc0>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1b1      	bne.n	8006968 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <prvSwitchTimerLists+0xc0>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <prvSwitchTimerLists+0xc4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a04      	ldr	r2, [pc, #16]	; (8006a20 <prvSwitchTimerLists+0xc0>)
 8006a10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006a12:	4a04      	ldr	r2, [pc, #16]	; (8006a24 <prvSwitchTimerLists+0xc4>)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6013      	str	r3, [r2, #0]
}
 8006a18:	bf00      	nop
 8006a1a:	3718      	adds	r7, #24
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20000f60 	.word	0x20000f60
 8006a24:	20000f64 	.word	0x20000f64

08006a28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006a2e:	f000 f969 	bl	8006d04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006a32:	4b15      	ldr	r3, [pc, #84]	; (8006a88 <prvCheckForValidListAndQueue+0x60>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d120      	bne.n	8006a7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006a3a:	4814      	ldr	r0, [pc, #80]	; (8006a8c <prvCheckForValidListAndQueue+0x64>)
 8006a3c:	f7fe f81e 	bl	8004a7c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006a40:	4813      	ldr	r0, [pc, #76]	; (8006a90 <prvCheckForValidListAndQueue+0x68>)
 8006a42:	f7fe f81b 	bl	8004a7c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006a46:	4b13      	ldr	r3, [pc, #76]	; (8006a94 <prvCheckForValidListAndQueue+0x6c>)
 8006a48:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <prvCheckForValidListAndQueue+0x64>)
 8006a4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006a4c:	4b12      	ldr	r3, [pc, #72]	; (8006a98 <prvCheckForValidListAndQueue+0x70>)
 8006a4e:	4a10      	ldr	r2, [pc, #64]	; (8006a90 <prvCheckForValidListAndQueue+0x68>)
 8006a50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006a52:	2300      	movs	r3, #0
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <prvCheckForValidListAndQueue+0x74>)
 8006a58:	4a11      	ldr	r2, [pc, #68]	; (8006aa0 <prvCheckForValidListAndQueue+0x78>)
 8006a5a:	2110      	movs	r1, #16
 8006a5c:	200a      	movs	r0, #10
 8006a5e:	f7fe f929 	bl	8004cb4 <xQueueGenericCreateStatic>
 8006a62:	4603      	mov	r3, r0
 8006a64:	4a08      	ldr	r2, [pc, #32]	; (8006a88 <prvCheckForValidListAndQueue+0x60>)
 8006a66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <prvCheckForValidListAndQueue+0x60>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <prvCheckForValidListAndQueue+0x60>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	490b      	ldr	r1, [pc, #44]	; (8006aa4 <prvCheckForValidListAndQueue+0x7c>)
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fe fd42 	bl	8005500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a7c:	f000 f972 	bl	8006d64 <vPortExitCritical>
}
 8006a80:	bf00      	nop
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000f68 	.word	0x20000f68
 8006a8c:	20000f38 	.word	0x20000f38
 8006a90:	20000f4c 	.word	0x20000f4c
 8006a94:	20000f60 	.word	0x20000f60
 8006a98:	20000f64 	.word	0x20000f64
 8006a9c:	20001014 	.word	0x20001014
 8006aa0:	20000f74 	.word	0x20000f74
 8006aa4:	08007f44 	.word	0x08007f44

08006aa8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3b04      	subs	r3, #4
 8006ab8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b04      	subs	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	f023 0201 	bic.w	r2, r3, #1
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	3b04      	subs	r3, #4
 8006ad6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ad8:	4a0c      	ldr	r2, [pc, #48]	; (8006b0c <pxPortInitialiseStack+0x64>)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	3b14      	subs	r3, #20
 8006ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3b04      	subs	r3, #4
 8006aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f06f 0202 	mvn.w	r2, #2
 8006af6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3b20      	subs	r3, #32
 8006afc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	08006b11 	.word	0x08006b11

08006b10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006b16:	2300      	movs	r3, #0
 8006b18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006b1a:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <prvTaskExitError+0x54>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d00a      	beq.n	8006b3a <prvTaskExitError+0x2a>
	__asm volatile
 8006b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b28:	f383 8811 	msr	BASEPRI, r3
 8006b2c:	f3bf 8f6f 	isb	sy
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	60fb      	str	r3, [r7, #12]
}
 8006b36:	bf00      	nop
 8006b38:	e7fe      	b.n	8006b38 <prvTaskExitError+0x28>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	60bb      	str	r3, [r7, #8]
}
 8006b4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006b4e:	bf00      	nop
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0fc      	beq.n	8006b50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006b56:	bf00      	nop
 8006b58:	bf00      	nop
 8006b5a:	3714      	adds	r7, #20
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b62:	4770      	bx	lr
 8006b64:	2000000c 	.word	0x2000000c
	...

08006b70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006b70:	4b07      	ldr	r3, [pc, #28]	; (8006b90 <pxCurrentTCBConst2>)
 8006b72:	6819      	ldr	r1, [r3, #0]
 8006b74:	6808      	ldr	r0, [r1, #0]
 8006b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b7a:	f380 8809 	msr	PSP, r0
 8006b7e:	f3bf 8f6f 	isb	sy
 8006b82:	f04f 0000 	mov.w	r0, #0
 8006b86:	f380 8811 	msr	BASEPRI, r0
 8006b8a:	4770      	bx	lr
 8006b8c:	f3af 8000 	nop.w

08006b90 <pxCurrentTCBConst2>:
 8006b90:	20000a38 	.word	0x20000a38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop

08006b98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b98:	4808      	ldr	r0, [pc, #32]	; (8006bbc <prvPortStartFirstTask+0x24>)
 8006b9a:	6800      	ldr	r0, [r0, #0]
 8006b9c:	6800      	ldr	r0, [r0, #0]
 8006b9e:	f380 8808 	msr	MSP, r0
 8006ba2:	f04f 0000 	mov.w	r0, #0
 8006ba6:	f380 8814 	msr	CONTROL, r0
 8006baa:	b662      	cpsie	i
 8006bac:	b661      	cpsie	f
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	df00      	svc	0
 8006bb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006bba:	bf00      	nop
 8006bbc:	e000ed08 	.word	0xe000ed08

08006bc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006bc6:	4b46      	ldr	r3, [pc, #280]	; (8006ce0 <xPortStartScheduler+0x120>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a46      	ldr	r2, [pc, #280]	; (8006ce4 <xPortStartScheduler+0x124>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d10a      	bne.n	8006be6 <xPortStartScheduler+0x26>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	613b      	str	r3, [r7, #16]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006be6:	4b3e      	ldr	r3, [pc, #248]	; (8006ce0 <xPortStartScheduler+0x120>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a3f      	ldr	r2, [pc, #252]	; (8006ce8 <xPortStartScheduler+0x128>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d10a      	bne.n	8006c06 <xPortStartScheduler+0x46>
	__asm volatile
 8006bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf4:	f383 8811 	msr	BASEPRI, r3
 8006bf8:	f3bf 8f6f 	isb	sy
 8006bfc:	f3bf 8f4f 	dsb	sy
 8006c00:	60fb      	str	r3, [r7, #12]
}
 8006c02:	bf00      	nop
 8006c04:	e7fe      	b.n	8006c04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006c06:	4b39      	ldr	r3, [pc, #228]	; (8006cec <xPortStartScheduler+0x12c>)
 8006c08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	22ff      	movs	r2, #255	; 0xff
 8006c16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006c28:	b2da      	uxtb	r2, r3
 8006c2a:	4b31      	ldr	r3, [pc, #196]	; (8006cf0 <xPortStartScheduler+0x130>)
 8006c2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006c2e:	4b31      	ldr	r3, [pc, #196]	; (8006cf4 <xPortStartScheduler+0x134>)
 8006c30:	2207      	movs	r2, #7
 8006c32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c34:	e009      	b.n	8006c4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006c36:	4b2f      	ldr	r3, [pc, #188]	; (8006cf4 <xPortStartScheduler+0x134>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	4a2d      	ldr	r2, [pc, #180]	; (8006cf4 <xPortStartScheduler+0x134>)
 8006c3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	005b      	lsls	r3, r3, #1
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c52:	2b80      	cmp	r3, #128	; 0x80
 8006c54:	d0ef      	beq.n	8006c36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006c56:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <xPortStartScheduler+0x134>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f1c3 0307 	rsb	r3, r3, #7
 8006c5e:	2b04      	cmp	r3, #4
 8006c60:	d00a      	beq.n	8006c78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c66:	f383 8811 	msr	BASEPRI, r3
 8006c6a:	f3bf 8f6f 	isb	sy
 8006c6e:	f3bf 8f4f 	dsb	sy
 8006c72:	60bb      	str	r3, [r7, #8]
}
 8006c74:	bf00      	nop
 8006c76:	e7fe      	b.n	8006c76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006c78:	4b1e      	ldr	r3, [pc, #120]	; (8006cf4 <xPortStartScheduler+0x134>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	4a1d      	ldr	r2, [pc, #116]	; (8006cf4 <xPortStartScheduler+0x134>)
 8006c80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006c82:	4b1c      	ldr	r3, [pc, #112]	; (8006cf4 <xPortStartScheduler+0x134>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c8a:	4a1a      	ldr	r2, [pc, #104]	; (8006cf4 <xPortStartScheduler+0x134>)
 8006c8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c96:	4b18      	ldr	r3, [pc, #96]	; (8006cf8 <xPortStartScheduler+0x138>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <xPortStartScheduler+0x138>)
 8006c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ca2:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <xPortStartScheduler+0x138>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a14      	ldr	r2, [pc, #80]	; (8006cf8 <xPortStartScheduler+0x138>)
 8006ca8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006cac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006cae:	f000 f8dd 	bl	8006e6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006cb2:	4b12      	ldr	r3, [pc, #72]	; (8006cfc <xPortStartScheduler+0x13c>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006cb8:	f000 f8fc 	bl	8006eb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006cbc:	4b10      	ldr	r3, [pc, #64]	; (8006d00 <xPortStartScheduler+0x140>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a0f      	ldr	r2, [pc, #60]	; (8006d00 <xPortStartScheduler+0x140>)
 8006cc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006cc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006cc8:	f7ff ff66 	bl	8006b98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ccc:	f7ff f848 	bl	8005d60 <vTaskSwitchContext>
	prvTaskExitError();
 8006cd0:	f7ff ff1e 	bl	8006b10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3718      	adds	r7, #24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	e000ed00 	.word	0xe000ed00
 8006ce4:	410fc271 	.word	0x410fc271
 8006ce8:	410fc270 	.word	0x410fc270
 8006cec:	e000e400 	.word	0xe000e400
 8006cf0:	20001064 	.word	0x20001064
 8006cf4:	20001068 	.word	0x20001068
 8006cf8:	e000ed20 	.word	0xe000ed20
 8006cfc:	2000000c 	.word	0x2000000c
 8006d00:	e000ef34 	.word	0xe000ef34

08006d04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	607b      	str	r3, [r7, #4]
}
 8006d1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006d1e:	4b0f      	ldr	r3, [pc, #60]	; (8006d5c <vPortEnterCritical+0x58>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3301      	adds	r3, #1
 8006d24:	4a0d      	ldr	r2, [pc, #52]	; (8006d5c <vPortEnterCritical+0x58>)
 8006d26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006d28:	4b0c      	ldr	r3, [pc, #48]	; (8006d5c <vPortEnterCritical+0x58>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d10f      	bne.n	8006d50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <vPortEnterCritical+0x5c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <vPortEnterCritical+0x4c>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	603b      	str	r3, [r7, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vPortEnterCritical+0x4a>
	}
}
 8006d50:	bf00      	nop
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	2000000c 	.word	0x2000000c
 8006d60:	e000ed04 	.word	0xe000ed04

08006d64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006d6a:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <vPortExitCritical+0x50>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <vPortExitCritical+0x24>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	607b      	str	r3, [r7, #4]
}
 8006d84:	bf00      	nop
 8006d86:	e7fe      	b.n	8006d86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <vPortExitCritical+0x50>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <vPortExitCritical+0x50>)
 8006d90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d92:	4b08      	ldr	r3, [pc, #32]	; (8006db4 <vPortExitCritical+0x50>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d105      	bne.n	8006da6 <vPortExitCritical+0x42>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	f383 8811 	msr	BASEPRI, r3
}
 8006da4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	2000000c 	.word	0x2000000c
	...

08006dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006dc0:	f3ef 8009 	mrs	r0, PSP
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	4b15      	ldr	r3, [pc, #84]	; (8006e20 <pxCurrentTCBConst>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	f01e 0f10 	tst.w	lr, #16
 8006dd0:	bf08      	it	eq
 8006dd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006dd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dda:	6010      	str	r0, [r2, #0]
 8006ddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006de0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006de4:	f380 8811 	msr	BASEPRI, r0
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f7fe ffb6 	bl	8005d60 <vTaskSwitchContext>
 8006df4:	f04f 0000 	mov.w	r0, #0
 8006df8:	f380 8811 	msr	BASEPRI, r0
 8006dfc:	bc09      	pop	{r0, r3}
 8006dfe:	6819      	ldr	r1, [r3, #0]
 8006e00:	6808      	ldr	r0, [r1, #0]
 8006e02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e06:	f01e 0f10 	tst.w	lr, #16
 8006e0a:	bf08      	it	eq
 8006e0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006e10:	f380 8809 	msr	PSP, r0
 8006e14:	f3bf 8f6f 	isb	sy
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	f3af 8000 	nop.w

08006e20 <pxCurrentTCBConst>:
 8006e20:	20000a38 	.word	0x20000a38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006e24:	bf00      	nop
 8006e26:	bf00      	nop

08006e28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	607b      	str	r3, [r7, #4]
}
 8006e40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006e42:	f7fe fed3 	bl	8005bec <xTaskIncrementTick>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <xPortSysTickHandler+0x40>)
 8006e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	2300      	movs	r3, #0
 8006e56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f383 8811 	msr	BASEPRI, r3
}
 8006e5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006e60:	bf00      	nop
 8006e62:	3708      	adds	r7, #8
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	e000ed04 	.word	0xe000ed04

08006e6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006e70:	4b0b      	ldr	r3, [pc, #44]	; (8006ea0 <vPortSetupTimerInterrupt+0x34>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006e76:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <vPortSetupTimerInterrupt+0x38>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <vPortSetupTimerInterrupt+0x3c>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a0a      	ldr	r2, [pc, #40]	; (8006eac <vPortSetupTimerInterrupt+0x40>)
 8006e82:	fba2 2303 	umull	r2, r3, r2, r3
 8006e86:	099b      	lsrs	r3, r3, #6
 8006e88:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <vPortSetupTimerInterrupt+0x44>)
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006e8e:	4b04      	ldr	r3, [pc, #16]	; (8006ea0 <vPortSetupTimerInterrupt+0x34>)
 8006e90:	2207      	movs	r2, #7
 8006e92:	601a      	str	r2, [r3, #0]
}
 8006e94:	bf00      	nop
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	e000e010 	.word	0xe000e010
 8006ea4:	e000e018 	.word	0xe000e018
 8006ea8:	20000000 	.word	0x20000000
 8006eac:	10624dd3 	.word	0x10624dd3
 8006eb0:	e000e014 	.word	0xe000e014

08006eb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ec4 <vPortEnableVFP+0x10>
 8006eb8:	6801      	ldr	r1, [r0, #0]
 8006eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ebe:	6001      	str	r1, [r0, #0]
 8006ec0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ec2:	bf00      	nop
 8006ec4:	e000ed88 	.word	0xe000ed88

08006ec8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ece:	f3ef 8305 	mrs	r3, IPSR
 8006ed2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b0f      	cmp	r3, #15
 8006ed8:	d914      	bls.n	8006f04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006eda:	4a17      	ldr	r2, [pc, #92]	; (8006f38 <vPortValidateInterruptPriority+0x70>)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ee4:	4b15      	ldr	r3, [pc, #84]	; (8006f3c <vPortValidateInterruptPriority+0x74>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	7afa      	ldrb	r2, [r7, #11]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d20a      	bcs.n	8006f04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	f383 8811 	msr	BASEPRI, r3
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	f3bf 8f4f 	dsb	sy
 8006efe:	607b      	str	r3, [r7, #4]
}
 8006f00:	bf00      	nop
 8006f02:	e7fe      	b.n	8006f02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006f04:	4b0e      	ldr	r3, [pc, #56]	; (8006f40 <vPortValidateInterruptPriority+0x78>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006f0c:	4b0d      	ldr	r3, [pc, #52]	; (8006f44 <vPortValidateInterruptPriority+0x7c>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d90a      	bls.n	8006f2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	603b      	str	r3, [r7, #0]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <vPortValidateInterruptPriority+0x60>
	}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	e000e3f0 	.word	0xe000e3f0
 8006f3c:	20001064 	.word	0x20001064
 8006f40:	e000ed0c 	.word	0xe000ed0c
 8006f44:	20001068 	.word	0x20001068

08006f48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b08a      	sub	sp, #40	; 0x28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006f54:	f7fe fd8e 	bl	8005a74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006f58:	4b5b      	ldr	r3, [pc, #364]	; (80070c8 <pvPortMalloc+0x180>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006f60:	f000 f920 	bl	80071a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006f64:	4b59      	ldr	r3, [pc, #356]	; (80070cc <pvPortMalloc+0x184>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 8093 	bne.w	8007098 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d01d      	beq.n	8006fb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006f78:	2208      	movs	r2, #8
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d014      	beq.n	8006fb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f023 0307 	bic.w	r3, r3, #7
 8006f90:	3308      	adds	r3, #8
 8006f92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <pvPortMalloc+0x6c>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	617b      	str	r3, [r7, #20]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d06e      	beq.n	8007098 <pvPortMalloc+0x150>
 8006fba:	4b45      	ldr	r3, [pc, #276]	; (80070d0 <pvPortMalloc+0x188>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d869      	bhi.n	8007098 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006fc4:	4b43      	ldr	r3, [pc, #268]	; (80070d4 <pvPortMalloc+0x18c>)
 8006fc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006fc8:	4b42      	ldr	r3, [pc, #264]	; (80070d4 <pvPortMalloc+0x18c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fce:	e004      	b.n	8006fda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d903      	bls.n	8006fec <pvPortMalloc+0xa4>
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1f1      	bne.n	8006fd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006fec:	4b36      	ldr	r3, [pc, #216]	; (80070c8 <pvPortMalloc+0x180>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d050      	beq.n	8007098 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	2208      	movs	r2, #8
 8006ffc:	4413      	add	r3, r2
 8006ffe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	6a3b      	ldr	r3, [r7, #32]
 8007006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	1ad2      	subs	r2, r2, r3
 8007010:	2308      	movs	r3, #8
 8007012:	005b      	lsls	r3, r3, #1
 8007014:	429a      	cmp	r2, r3
 8007016:	d91f      	bls.n	8007058 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4413      	add	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00a      	beq.n	8007040 <pvPortMalloc+0xf8>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	613b      	str	r3, [r7, #16]
}
 800703c:	bf00      	nop
 800703e:	e7fe      	b.n	800703e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	1ad2      	subs	r2, r2, r3
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800704c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007052:	69b8      	ldr	r0, [r7, #24]
 8007054:	f000 f908 	bl	8007268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007058:	4b1d      	ldr	r3, [pc, #116]	; (80070d0 <pvPortMalloc+0x188>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	4a1b      	ldr	r2, [pc, #108]	; (80070d0 <pvPortMalloc+0x188>)
 8007064:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007066:	4b1a      	ldr	r3, [pc, #104]	; (80070d0 <pvPortMalloc+0x188>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	4b1b      	ldr	r3, [pc, #108]	; (80070d8 <pvPortMalloc+0x190>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d203      	bcs.n	800707a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007072:	4b17      	ldr	r3, [pc, #92]	; (80070d0 <pvPortMalloc+0x188>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a18      	ldr	r2, [pc, #96]	; (80070d8 <pvPortMalloc+0x190>)
 8007078:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	685a      	ldr	r2, [r3, #4]
 800707e:	4b13      	ldr	r3, [pc, #76]	; (80070cc <pvPortMalloc+0x184>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	431a      	orrs	r2, r3
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	2200      	movs	r2, #0
 800708c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800708e:	4b13      	ldr	r3, [pc, #76]	; (80070dc <pvPortMalloc+0x194>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	3301      	adds	r3, #1
 8007094:	4a11      	ldr	r2, [pc, #68]	; (80070dc <pvPortMalloc+0x194>)
 8007096:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007098:	f7fe fcfa 	bl	8005a90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	f003 0307 	and.w	r3, r3, #7
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00a      	beq.n	80070bc <pvPortMalloc+0x174>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	60fb      	str	r3, [r7, #12]
}
 80070b8:	bf00      	nop
 80070ba:	e7fe      	b.n	80070ba <pvPortMalloc+0x172>
	return pvReturn;
 80070bc:	69fb      	ldr	r3, [r7, #28]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3728      	adds	r7, #40	; 0x28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20004b0c 	.word	0x20004b0c
 80070cc:	20004b20 	.word	0x20004b20
 80070d0:	20004b10 	.word	0x20004b10
 80070d4:	20004b04 	.word	0x20004b04
 80070d8:	20004b14 	.word	0x20004b14
 80070dc:	20004b18 	.word	0x20004b18

080070e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d04d      	beq.n	800718e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80070f2:	2308      	movs	r3, #8
 80070f4:	425b      	negs	r3, r3
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4413      	add	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	685a      	ldr	r2, [r3, #4]
 8007104:	4b24      	ldr	r3, [pc, #144]	; (8007198 <vPortFree+0xb8>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4013      	ands	r3, r2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <vPortFree+0x44>
	__asm volatile
 800710e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007112:	f383 8811 	msr	BASEPRI, r3
 8007116:	f3bf 8f6f 	isb	sy
 800711a:	f3bf 8f4f 	dsb	sy
 800711e:	60fb      	str	r3, [r7, #12]
}
 8007120:	bf00      	nop
 8007122:	e7fe      	b.n	8007122 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <vPortFree+0x62>
	__asm volatile
 800712c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007130:	f383 8811 	msr	BASEPRI, r3
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	f3bf 8f4f 	dsb	sy
 800713c:	60bb      	str	r3, [r7, #8]
}
 800713e:	bf00      	nop
 8007140:	e7fe      	b.n	8007140 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <vPortFree+0xb8>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4013      	ands	r3, r2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d01e      	beq.n	800718e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d11a      	bne.n	800718e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	4b0e      	ldr	r3, [pc, #56]	; (8007198 <vPortFree+0xb8>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	43db      	mvns	r3, r3
 8007162:	401a      	ands	r2, r3
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007168:	f7fe fc84 	bl	8005a74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	4b0a      	ldr	r3, [pc, #40]	; (800719c <vPortFree+0xbc>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4413      	add	r3, r2
 8007176:	4a09      	ldr	r2, [pc, #36]	; (800719c <vPortFree+0xbc>)
 8007178:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800717a:	6938      	ldr	r0, [r7, #16]
 800717c:	f000 f874 	bl	8007268 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007180:	4b07      	ldr	r3, [pc, #28]	; (80071a0 <vPortFree+0xc0>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3301      	adds	r3, #1
 8007186:	4a06      	ldr	r2, [pc, #24]	; (80071a0 <vPortFree+0xc0>)
 8007188:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800718a:	f7fe fc81 	bl	8005a90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800718e:	bf00      	nop
 8007190:	3718      	adds	r7, #24
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20004b20 	.word	0x20004b20
 800719c:	20004b10 	.word	0x20004b10
 80071a0:	20004b1c 	.word	0x20004b1c

080071a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80071aa:	f643 2398 	movw	r3, #15000	; 0x3a98
 80071ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80071b0:	4b27      	ldr	r3, [pc, #156]	; (8007250 <prvHeapInit+0xac>)
 80071b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00c      	beq.n	80071d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3307      	adds	r3, #7
 80071c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 0307 	bic.w	r3, r3, #7
 80071ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	4a1f      	ldr	r2, [pc, #124]	; (8007250 <prvHeapInit+0xac>)
 80071d4:	4413      	add	r3, r2
 80071d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80071dc:	4a1d      	ldr	r2, [pc, #116]	; (8007254 <prvHeapInit+0xb0>)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80071e2:	4b1c      	ldr	r3, [pc, #112]	; (8007254 <prvHeapInit+0xb0>)
 80071e4:	2200      	movs	r2, #0
 80071e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	4413      	add	r3, r2
 80071ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80071f0:	2208      	movs	r2, #8
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	1a9b      	subs	r3, r3, r2
 80071f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f023 0307 	bic.w	r3, r3, #7
 80071fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4a15      	ldr	r2, [pc, #84]	; (8007258 <prvHeapInit+0xb4>)
 8007204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007206:	4b14      	ldr	r3, [pc, #80]	; (8007258 <prvHeapInit+0xb4>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2200      	movs	r2, #0
 800720c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800720e:	4b12      	ldr	r3, [pc, #72]	; (8007258 <prvHeapInit+0xb4>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2200      	movs	r2, #0
 8007214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007224:	4b0c      	ldr	r3, [pc, #48]	; (8007258 <prvHeapInit+0xb4>)
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	4a0a      	ldr	r2, [pc, #40]	; (800725c <prvHeapInit+0xb8>)
 8007232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	4a09      	ldr	r2, [pc, #36]	; (8007260 <prvHeapInit+0xbc>)
 800723a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800723c:	4b09      	ldr	r3, [pc, #36]	; (8007264 <prvHeapInit+0xc0>)
 800723e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007242:	601a      	str	r2, [r3, #0]
}
 8007244:	bf00      	nop
 8007246:	3714      	adds	r7, #20
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr
 8007250:	2000106c 	.word	0x2000106c
 8007254:	20004b04 	.word	0x20004b04
 8007258:	20004b0c 	.word	0x20004b0c
 800725c:	20004b14 	.word	0x20004b14
 8007260:	20004b10 	.word	0x20004b10
 8007264:	20004b20 	.word	0x20004b20

08007268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007270:	4b28      	ldr	r3, [pc, #160]	; (8007314 <prvInsertBlockIntoFreeList+0xac>)
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	e002      	b.n	800727c <prvInsertBlockIntoFreeList+0x14>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	60fb      	str	r3, [r7, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	429a      	cmp	r2, r3
 8007284:	d8f7      	bhi.n	8007276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	4413      	add	r3, r2
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d108      	bne.n	80072aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	441a      	add	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	441a      	add	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d118      	bne.n	80072f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	4b15      	ldr	r3, [pc, #84]	; (8007318 <prvInsertBlockIntoFreeList+0xb0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d00d      	beq.n	80072e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	441a      	add	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	601a      	str	r2, [r3, #0]
 80072e4:	e008      	b.n	80072f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80072e6:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <prvInsertBlockIntoFreeList+0xb0>)
 80072e8:	681a      	ldr	r2, [r3, #0]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	e003      	b.n	80072f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d002      	beq.n	8007306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007306:	bf00      	nop
 8007308:	3714      	adds	r7, #20
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	20004b04 	.word	0x20004b04
 8007318:	20004b0c 	.word	0x20004b0c

0800731c <_vsniprintf_r>:
 800731c:	b530      	push	{r4, r5, lr}
 800731e:	4614      	mov	r4, r2
 8007320:	2c00      	cmp	r4, #0
 8007322:	b09b      	sub	sp, #108	; 0x6c
 8007324:	4605      	mov	r5, r0
 8007326:	461a      	mov	r2, r3
 8007328:	da05      	bge.n	8007336 <_vsniprintf_r+0x1a>
 800732a:	238b      	movs	r3, #139	; 0x8b
 800732c:	6003      	str	r3, [r0, #0]
 800732e:	f04f 30ff 	mov.w	r0, #4294967295
 8007332:	b01b      	add	sp, #108	; 0x6c
 8007334:	bd30      	pop	{r4, r5, pc}
 8007336:	f44f 7302 	mov.w	r3, #520	; 0x208
 800733a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800733e:	bf14      	ite	ne
 8007340:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007344:	4623      	moveq	r3, r4
 8007346:	9302      	str	r3, [sp, #8]
 8007348:	9305      	str	r3, [sp, #20]
 800734a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800734e:	9100      	str	r1, [sp, #0]
 8007350:	9104      	str	r1, [sp, #16]
 8007352:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007356:	4669      	mov	r1, sp
 8007358:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800735a:	f000 fa03 	bl	8007764 <_svfiprintf_r>
 800735e:	1c43      	adds	r3, r0, #1
 8007360:	bfbc      	itt	lt
 8007362:	238b      	movlt	r3, #139	; 0x8b
 8007364:	602b      	strlt	r3, [r5, #0]
 8007366:	2c00      	cmp	r4, #0
 8007368:	d0e3      	beq.n	8007332 <_vsniprintf_r+0x16>
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
 8007370:	e7df      	b.n	8007332 <_vsniprintf_r+0x16>
	...

08007374 <vsniprintf>:
 8007374:	b507      	push	{r0, r1, r2, lr}
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	4613      	mov	r3, r2
 800737a:	460a      	mov	r2, r1
 800737c:	4601      	mov	r1, r0
 800737e:	4803      	ldr	r0, [pc, #12]	; (800738c <vsniprintf+0x18>)
 8007380:	6800      	ldr	r0, [r0, #0]
 8007382:	f7ff ffcb 	bl	800731c <_vsniprintf_r>
 8007386:	b003      	add	sp, #12
 8007388:	f85d fb04 	ldr.w	pc, [sp], #4
 800738c:	2000005c 	.word	0x2000005c

08007390 <memset>:
 8007390:	4402      	add	r2, r0
 8007392:	4603      	mov	r3, r0
 8007394:	4293      	cmp	r3, r2
 8007396:	d100      	bne.n	800739a <memset+0xa>
 8007398:	4770      	bx	lr
 800739a:	f803 1b01 	strb.w	r1, [r3], #1
 800739e:	e7f9      	b.n	8007394 <memset+0x4>

080073a0 <_reclaim_reent>:
 80073a0:	4b29      	ldr	r3, [pc, #164]	; (8007448 <_reclaim_reent+0xa8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4283      	cmp	r3, r0
 80073a6:	b570      	push	{r4, r5, r6, lr}
 80073a8:	4604      	mov	r4, r0
 80073aa:	d04b      	beq.n	8007444 <_reclaim_reent+0xa4>
 80073ac:	69c3      	ldr	r3, [r0, #28]
 80073ae:	b143      	cbz	r3, 80073c2 <_reclaim_reent+0x22>
 80073b0:	68db      	ldr	r3, [r3, #12]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d144      	bne.n	8007440 <_reclaim_reent+0xa0>
 80073b6:	69e3      	ldr	r3, [r4, #28]
 80073b8:	6819      	ldr	r1, [r3, #0]
 80073ba:	b111      	cbz	r1, 80073c2 <_reclaim_reent+0x22>
 80073bc:	4620      	mov	r0, r4
 80073be:	f000 f87f 	bl	80074c0 <_free_r>
 80073c2:	6961      	ldr	r1, [r4, #20]
 80073c4:	b111      	cbz	r1, 80073cc <_reclaim_reent+0x2c>
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 f87a 	bl	80074c0 <_free_r>
 80073cc:	69e1      	ldr	r1, [r4, #28]
 80073ce:	b111      	cbz	r1, 80073d6 <_reclaim_reent+0x36>
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 f875 	bl	80074c0 <_free_r>
 80073d6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80073d8:	b111      	cbz	r1, 80073e0 <_reclaim_reent+0x40>
 80073da:	4620      	mov	r0, r4
 80073dc:	f000 f870 	bl	80074c0 <_free_r>
 80073e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073e2:	b111      	cbz	r1, 80073ea <_reclaim_reent+0x4a>
 80073e4:	4620      	mov	r0, r4
 80073e6:	f000 f86b 	bl	80074c0 <_free_r>
 80073ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80073ec:	b111      	cbz	r1, 80073f4 <_reclaim_reent+0x54>
 80073ee:	4620      	mov	r0, r4
 80073f0:	f000 f866 	bl	80074c0 <_free_r>
 80073f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80073f6:	b111      	cbz	r1, 80073fe <_reclaim_reent+0x5e>
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 f861 	bl	80074c0 <_free_r>
 80073fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007400:	b111      	cbz	r1, 8007408 <_reclaim_reent+0x68>
 8007402:	4620      	mov	r0, r4
 8007404:	f000 f85c 	bl	80074c0 <_free_r>
 8007408:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800740a:	b111      	cbz	r1, 8007412 <_reclaim_reent+0x72>
 800740c:	4620      	mov	r0, r4
 800740e:	f000 f857 	bl	80074c0 <_free_r>
 8007412:	6a23      	ldr	r3, [r4, #32]
 8007414:	b1b3      	cbz	r3, 8007444 <_reclaim_reent+0xa4>
 8007416:	4620      	mov	r0, r4
 8007418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800741c:	4718      	bx	r3
 800741e:	5949      	ldr	r1, [r1, r5]
 8007420:	b941      	cbnz	r1, 8007434 <_reclaim_reent+0x94>
 8007422:	3504      	adds	r5, #4
 8007424:	69e3      	ldr	r3, [r4, #28]
 8007426:	2d80      	cmp	r5, #128	; 0x80
 8007428:	68d9      	ldr	r1, [r3, #12]
 800742a:	d1f8      	bne.n	800741e <_reclaim_reent+0x7e>
 800742c:	4620      	mov	r0, r4
 800742e:	f000 f847 	bl	80074c0 <_free_r>
 8007432:	e7c0      	b.n	80073b6 <_reclaim_reent+0x16>
 8007434:	680e      	ldr	r6, [r1, #0]
 8007436:	4620      	mov	r0, r4
 8007438:	f000 f842 	bl	80074c0 <_free_r>
 800743c:	4631      	mov	r1, r6
 800743e:	e7ef      	b.n	8007420 <_reclaim_reent+0x80>
 8007440:	2500      	movs	r5, #0
 8007442:	e7ef      	b.n	8007424 <_reclaim_reent+0x84>
 8007444:	bd70      	pop	{r4, r5, r6, pc}
 8007446:	bf00      	nop
 8007448:	2000005c 	.word	0x2000005c

0800744c <__errno>:
 800744c:	4b01      	ldr	r3, [pc, #4]	; (8007454 <__errno+0x8>)
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	2000005c 	.word	0x2000005c

08007458 <__libc_init_array>:
 8007458:	b570      	push	{r4, r5, r6, lr}
 800745a:	4d0d      	ldr	r5, [pc, #52]	; (8007490 <__libc_init_array+0x38>)
 800745c:	4c0d      	ldr	r4, [pc, #52]	; (8007494 <__libc_init_array+0x3c>)
 800745e:	1b64      	subs	r4, r4, r5
 8007460:	10a4      	asrs	r4, r4, #2
 8007462:	2600      	movs	r6, #0
 8007464:	42a6      	cmp	r6, r4
 8007466:	d109      	bne.n	800747c <__libc_init_array+0x24>
 8007468:	4d0b      	ldr	r5, [pc, #44]	; (8007498 <__libc_init_array+0x40>)
 800746a:	4c0c      	ldr	r4, [pc, #48]	; (800749c <__libc_init_array+0x44>)
 800746c:	f000 fc6a 	bl	8007d44 <_init>
 8007470:	1b64      	subs	r4, r4, r5
 8007472:	10a4      	asrs	r4, r4, #2
 8007474:	2600      	movs	r6, #0
 8007476:	42a6      	cmp	r6, r4
 8007478:	d105      	bne.n	8007486 <__libc_init_array+0x2e>
 800747a:	bd70      	pop	{r4, r5, r6, pc}
 800747c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007480:	4798      	blx	r3
 8007482:	3601      	adds	r6, #1
 8007484:	e7ee      	b.n	8007464 <__libc_init_array+0xc>
 8007486:	f855 3b04 	ldr.w	r3, [r5], #4
 800748a:	4798      	blx	r3
 800748c:	3601      	adds	r6, #1
 800748e:	e7f2      	b.n	8007476 <__libc_init_array+0x1e>
 8007490:	08008014 	.word	0x08008014
 8007494:	08008014 	.word	0x08008014
 8007498:	08008014 	.word	0x08008014
 800749c:	08008018 	.word	0x08008018

080074a0 <__retarget_lock_acquire_recursive>:
 80074a0:	4770      	bx	lr

080074a2 <__retarget_lock_release_recursive>:
 80074a2:	4770      	bx	lr

080074a4 <memcpy>:
 80074a4:	440a      	add	r2, r1
 80074a6:	4291      	cmp	r1, r2
 80074a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ac:	d100      	bne.n	80074b0 <memcpy+0xc>
 80074ae:	4770      	bx	lr
 80074b0:	b510      	push	{r4, lr}
 80074b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074ba:	4291      	cmp	r1, r2
 80074bc:	d1f9      	bne.n	80074b2 <memcpy+0xe>
 80074be:	bd10      	pop	{r4, pc}

080074c0 <_free_r>:
 80074c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074c2:	2900      	cmp	r1, #0
 80074c4:	d044      	beq.n	8007550 <_free_r+0x90>
 80074c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074ca:	9001      	str	r0, [sp, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f1a1 0404 	sub.w	r4, r1, #4
 80074d2:	bfb8      	it	lt
 80074d4:	18e4      	addlt	r4, r4, r3
 80074d6:	f000 f8df 	bl	8007698 <__malloc_lock>
 80074da:	4a1e      	ldr	r2, [pc, #120]	; (8007554 <_free_r+0x94>)
 80074dc:	9801      	ldr	r0, [sp, #4]
 80074de:	6813      	ldr	r3, [r2, #0]
 80074e0:	b933      	cbnz	r3, 80074f0 <_free_r+0x30>
 80074e2:	6063      	str	r3, [r4, #4]
 80074e4:	6014      	str	r4, [r2, #0]
 80074e6:	b003      	add	sp, #12
 80074e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074ec:	f000 b8da 	b.w	80076a4 <__malloc_unlock>
 80074f0:	42a3      	cmp	r3, r4
 80074f2:	d908      	bls.n	8007506 <_free_r+0x46>
 80074f4:	6825      	ldr	r5, [r4, #0]
 80074f6:	1961      	adds	r1, r4, r5
 80074f8:	428b      	cmp	r3, r1
 80074fa:	bf01      	itttt	eq
 80074fc:	6819      	ldreq	r1, [r3, #0]
 80074fe:	685b      	ldreq	r3, [r3, #4]
 8007500:	1949      	addeq	r1, r1, r5
 8007502:	6021      	streq	r1, [r4, #0]
 8007504:	e7ed      	b.n	80074e2 <_free_r+0x22>
 8007506:	461a      	mov	r2, r3
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	b10b      	cbz	r3, 8007510 <_free_r+0x50>
 800750c:	42a3      	cmp	r3, r4
 800750e:	d9fa      	bls.n	8007506 <_free_r+0x46>
 8007510:	6811      	ldr	r1, [r2, #0]
 8007512:	1855      	adds	r5, r2, r1
 8007514:	42a5      	cmp	r5, r4
 8007516:	d10b      	bne.n	8007530 <_free_r+0x70>
 8007518:	6824      	ldr	r4, [r4, #0]
 800751a:	4421      	add	r1, r4
 800751c:	1854      	adds	r4, r2, r1
 800751e:	42a3      	cmp	r3, r4
 8007520:	6011      	str	r1, [r2, #0]
 8007522:	d1e0      	bne.n	80074e6 <_free_r+0x26>
 8007524:	681c      	ldr	r4, [r3, #0]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	6053      	str	r3, [r2, #4]
 800752a:	440c      	add	r4, r1
 800752c:	6014      	str	r4, [r2, #0]
 800752e:	e7da      	b.n	80074e6 <_free_r+0x26>
 8007530:	d902      	bls.n	8007538 <_free_r+0x78>
 8007532:	230c      	movs	r3, #12
 8007534:	6003      	str	r3, [r0, #0]
 8007536:	e7d6      	b.n	80074e6 <_free_r+0x26>
 8007538:	6825      	ldr	r5, [r4, #0]
 800753a:	1961      	adds	r1, r4, r5
 800753c:	428b      	cmp	r3, r1
 800753e:	bf04      	itt	eq
 8007540:	6819      	ldreq	r1, [r3, #0]
 8007542:	685b      	ldreq	r3, [r3, #4]
 8007544:	6063      	str	r3, [r4, #4]
 8007546:	bf04      	itt	eq
 8007548:	1949      	addeq	r1, r1, r5
 800754a:	6021      	streq	r1, [r4, #0]
 800754c:	6054      	str	r4, [r2, #4]
 800754e:	e7ca      	b.n	80074e6 <_free_r+0x26>
 8007550:	b003      	add	sp, #12
 8007552:	bd30      	pop	{r4, r5, pc}
 8007554:	20004c64 	.word	0x20004c64

08007558 <sbrk_aligned>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	4e0e      	ldr	r6, [pc, #56]	; (8007594 <sbrk_aligned+0x3c>)
 800755c:	460c      	mov	r4, r1
 800755e:	6831      	ldr	r1, [r6, #0]
 8007560:	4605      	mov	r5, r0
 8007562:	b911      	cbnz	r1, 800756a <sbrk_aligned+0x12>
 8007564:	f000 fba6 	bl	8007cb4 <_sbrk_r>
 8007568:	6030      	str	r0, [r6, #0]
 800756a:	4621      	mov	r1, r4
 800756c:	4628      	mov	r0, r5
 800756e:	f000 fba1 	bl	8007cb4 <_sbrk_r>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	d00a      	beq.n	800758c <sbrk_aligned+0x34>
 8007576:	1cc4      	adds	r4, r0, #3
 8007578:	f024 0403 	bic.w	r4, r4, #3
 800757c:	42a0      	cmp	r0, r4
 800757e:	d007      	beq.n	8007590 <sbrk_aligned+0x38>
 8007580:	1a21      	subs	r1, r4, r0
 8007582:	4628      	mov	r0, r5
 8007584:	f000 fb96 	bl	8007cb4 <_sbrk_r>
 8007588:	3001      	adds	r0, #1
 800758a:	d101      	bne.n	8007590 <sbrk_aligned+0x38>
 800758c:	f04f 34ff 	mov.w	r4, #4294967295
 8007590:	4620      	mov	r0, r4
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	20004c68 	.word	0x20004c68

08007598 <_malloc_r>:
 8007598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800759c:	1ccd      	adds	r5, r1, #3
 800759e:	f025 0503 	bic.w	r5, r5, #3
 80075a2:	3508      	adds	r5, #8
 80075a4:	2d0c      	cmp	r5, #12
 80075a6:	bf38      	it	cc
 80075a8:	250c      	movcc	r5, #12
 80075aa:	2d00      	cmp	r5, #0
 80075ac:	4607      	mov	r7, r0
 80075ae:	db01      	blt.n	80075b4 <_malloc_r+0x1c>
 80075b0:	42a9      	cmp	r1, r5
 80075b2:	d905      	bls.n	80075c0 <_malloc_r+0x28>
 80075b4:	230c      	movs	r3, #12
 80075b6:	603b      	str	r3, [r7, #0]
 80075b8:	2600      	movs	r6, #0
 80075ba:	4630      	mov	r0, r6
 80075bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007694 <_malloc_r+0xfc>
 80075c4:	f000 f868 	bl	8007698 <__malloc_lock>
 80075c8:	f8d8 3000 	ldr.w	r3, [r8]
 80075cc:	461c      	mov	r4, r3
 80075ce:	bb5c      	cbnz	r4, 8007628 <_malloc_r+0x90>
 80075d0:	4629      	mov	r1, r5
 80075d2:	4638      	mov	r0, r7
 80075d4:	f7ff ffc0 	bl	8007558 <sbrk_aligned>
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	4604      	mov	r4, r0
 80075dc:	d155      	bne.n	800768a <_malloc_r+0xf2>
 80075de:	f8d8 4000 	ldr.w	r4, [r8]
 80075e2:	4626      	mov	r6, r4
 80075e4:	2e00      	cmp	r6, #0
 80075e6:	d145      	bne.n	8007674 <_malloc_r+0xdc>
 80075e8:	2c00      	cmp	r4, #0
 80075ea:	d048      	beq.n	800767e <_malloc_r+0xe6>
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	4631      	mov	r1, r6
 80075f0:	4638      	mov	r0, r7
 80075f2:	eb04 0903 	add.w	r9, r4, r3
 80075f6:	f000 fb5d 	bl	8007cb4 <_sbrk_r>
 80075fa:	4581      	cmp	r9, r0
 80075fc:	d13f      	bne.n	800767e <_malloc_r+0xe6>
 80075fe:	6821      	ldr	r1, [r4, #0]
 8007600:	1a6d      	subs	r5, r5, r1
 8007602:	4629      	mov	r1, r5
 8007604:	4638      	mov	r0, r7
 8007606:	f7ff ffa7 	bl	8007558 <sbrk_aligned>
 800760a:	3001      	adds	r0, #1
 800760c:	d037      	beq.n	800767e <_malloc_r+0xe6>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	442b      	add	r3, r5
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	f8d8 3000 	ldr.w	r3, [r8]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d038      	beq.n	800768e <_malloc_r+0xf6>
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	42a2      	cmp	r2, r4
 8007620:	d12b      	bne.n	800767a <_malloc_r+0xe2>
 8007622:	2200      	movs	r2, #0
 8007624:	605a      	str	r2, [r3, #4]
 8007626:	e00f      	b.n	8007648 <_malloc_r+0xb0>
 8007628:	6822      	ldr	r2, [r4, #0]
 800762a:	1b52      	subs	r2, r2, r5
 800762c:	d41f      	bmi.n	800766e <_malloc_r+0xd6>
 800762e:	2a0b      	cmp	r2, #11
 8007630:	d917      	bls.n	8007662 <_malloc_r+0xca>
 8007632:	1961      	adds	r1, r4, r5
 8007634:	42a3      	cmp	r3, r4
 8007636:	6025      	str	r5, [r4, #0]
 8007638:	bf18      	it	ne
 800763a:	6059      	strne	r1, [r3, #4]
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	bf08      	it	eq
 8007640:	f8c8 1000 	streq.w	r1, [r8]
 8007644:	5162      	str	r2, [r4, r5]
 8007646:	604b      	str	r3, [r1, #4]
 8007648:	4638      	mov	r0, r7
 800764a:	f104 060b 	add.w	r6, r4, #11
 800764e:	f000 f829 	bl	80076a4 <__malloc_unlock>
 8007652:	f026 0607 	bic.w	r6, r6, #7
 8007656:	1d23      	adds	r3, r4, #4
 8007658:	1af2      	subs	r2, r6, r3
 800765a:	d0ae      	beq.n	80075ba <_malloc_r+0x22>
 800765c:	1b9b      	subs	r3, r3, r6
 800765e:	50a3      	str	r3, [r4, r2]
 8007660:	e7ab      	b.n	80075ba <_malloc_r+0x22>
 8007662:	42a3      	cmp	r3, r4
 8007664:	6862      	ldr	r2, [r4, #4]
 8007666:	d1dd      	bne.n	8007624 <_malloc_r+0x8c>
 8007668:	f8c8 2000 	str.w	r2, [r8]
 800766c:	e7ec      	b.n	8007648 <_malloc_r+0xb0>
 800766e:	4623      	mov	r3, r4
 8007670:	6864      	ldr	r4, [r4, #4]
 8007672:	e7ac      	b.n	80075ce <_malloc_r+0x36>
 8007674:	4634      	mov	r4, r6
 8007676:	6876      	ldr	r6, [r6, #4]
 8007678:	e7b4      	b.n	80075e4 <_malloc_r+0x4c>
 800767a:	4613      	mov	r3, r2
 800767c:	e7cc      	b.n	8007618 <_malloc_r+0x80>
 800767e:	230c      	movs	r3, #12
 8007680:	603b      	str	r3, [r7, #0]
 8007682:	4638      	mov	r0, r7
 8007684:	f000 f80e 	bl	80076a4 <__malloc_unlock>
 8007688:	e797      	b.n	80075ba <_malloc_r+0x22>
 800768a:	6025      	str	r5, [r4, #0]
 800768c:	e7dc      	b.n	8007648 <_malloc_r+0xb0>
 800768e:	605b      	str	r3, [r3, #4]
 8007690:	deff      	udf	#255	; 0xff
 8007692:	bf00      	nop
 8007694:	20004c64 	.word	0x20004c64

08007698 <__malloc_lock>:
 8007698:	4801      	ldr	r0, [pc, #4]	; (80076a0 <__malloc_lock+0x8>)
 800769a:	f7ff bf01 	b.w	80074a0 <__retarget_lock_acquire_recursive>
 800769e:	bf00      	nop
 80076a0:	20004c60 	.word	0x20004c60

080076a4 <__malloc_unlock>:
 80076a4:	4801      	ldr	r0, [pc, #4]	; (80076ac <__malloc_unlock+0x8>)
 80076a6:	f7ff befc 	b.w	80074a2 <__retarget_lock_release_recursive>
 80076aa:	bf00      	nop
 80076ac:	20004c60 	.word	0x20004c60

080076b0 <__ssputs_r>:
 80076b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	688e      	ldr	r6, [r1, #8]
 80076b6:	461f      	mov	r7, r3
 80076b8:	42be      	cmp	r6, r7
 80076ba:	680b      	ldr	r3, [r1, #0]
 80076bc:	4682      	mov	sl, r0
 80076be:	460c      	mov	r4, r1
 80076c0:	4690      	mov	r8, r2
 80076c2:	d82c      	bhi.n	800771e <__ssputs_r+0x6e>
 80076c4:	898a      	ldrh	r2, [r1, #12]
 80076c6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80076ca:	d026      	beq.n	800771a <__ssputs_r+0x6a>
 80076cc:	6965      	ldr	r5, [r4, #20]
 80076ce:	6909      	ldr	r1, [r1, #16]
 80076d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076d4:	eba3 0901 	sub.w	r9, r3, r1
 80076d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076dc:	1c7b      	adds	r3, r7, #1
 80076de:	444b      	add	r3, r9
 80076e0:	106d      	asrs	r5, r5, #1
 80076e2:	429d      	cmp	r5, r3
 80076e4:	bf38      	it	cc
 80076e6:	461d      	movcc	r5, r3
 80076e8:	0553      	lsls	r3, r2, #21
 80076ea:	d527      	bpl.n	800773c <__ssputs_r+0x8c>
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7ff ff53 	bl	8007598 <_malloc_r>
 80076f2:	4606      	mov	r6, r0
 80076f4:	b360      	cbz	r0, 8007750 <__ssputs_r+0xa0>
 80076f6:	6921      	ldr	r1, [r4, #16]
 80076f8:	464a      	mov	r2, r9
 80076fa:	f7ff fed3 	bl	80074a4 <memcpy>
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007708:	81a3      	strh	r3, [r4, #12]
 800770a:	6126      	str	r6, [r4, #16]
 800770c:	6165      	str	r5, [r4, #20]
 800770e:	444e      	add	r6, r9
 8007710:	eba5 0509 	sub.w	r5, r5, r9
 8007714:	6026      	str	r6, [r4, #0]
 8007716:	60a5      	str	r5, [r4, #8]
 8007718:	463e      	mov	r6, r7
 800771a:	42be      	cmp	r6, r7
 800771c:	d900      	bls.n	8007720 <__ssputs_r+0x70>
 800771e:	463e      	mov	r6, r7
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	4632      	mov	r2, r6
 8007724:	4641      	mov	r1, r8
 8007726:	f000 faab 	bl	8007c80 <memmove>
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	1b9b      	subs	r3, r3, r6
 800772e:	60a3      	str	r3, [r4, #8]
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	4433      	add	r3, r6
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	2000      	movs	r0, #0
 8007738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773c:	462a      	mov	r2, r5
 800773e:	f000 fac9 	bl	8007cd4 <_realloc_r>
 8007742:	4606      	mov	r6, r0
 8007744:	2800      	cmp	r0, #0
 8007746:	d1e0      	bne.n	800770a <__ssputs_r+0x5a>
 8007748:	6921      	ldr	r1, [r4, #16]
 800774a:	4650      	mov	r0, sl
 800774c:	f7ff feb8 	bl	80074c0 <_free_r>
 8007750:	230c      	movs	r3, #12
 8007752:	f8ca 3000 	str.w	r3, [sl]
 8007756:	89a3      	ldrh	r3, [r4, #12]
 8007758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800775c:	81a3      	strh	r3, [r4, #12]
 800775e:	f04f 30ff 	mov.w	r0, #4294967295
 8007762:	e7e9      	b.n	8007738 <__ssputs_r+0x88>

08007764 <_svfiprintf_r>:
 8007764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007768:	4698      	mov	r8, r3
 800776a:	898b      	ldrh	r3, [r1, #12]
 800776c:	061b      	lsls	r3, r3, #24
 800776e:	b09d      	sub	sp, #116	; 0x74
 8007770:	4607      	mov	r7, r0
 8007772:	460d      	mov	r5, r1
 8007774:	4614      	mov	r4, r2
 8007776:	d50e      	bpl.n	8007796 <_svfiprintf_r+0x32>
 8007778:	690b      	ldr	r3, [r1, #16]
 800777a:	b963      	cbnz	r3, 8007796 <_svfiprintf_r+0x32>
 800777c:	2140      	movs	r1, #64	; 0x40
 800777e:	f7ff ff0b 	bl	8007598 <_malloc_r>
 8007782:	6028      	str	r0, [r5, #0]
 8007784:	6128      	str	r0, [r5, #16]
 8007786:	b920      	cbnz	r0, 8007792 <_svfiprintf_r+0x2e>
 8007788:	230c      	movs	r3, #12
 800778a:	603b      	str	r3, [r7, #0]
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e0d0      	b.n	8007934 <_svfiprintf_r+0x1d0>
 8007792:	2340      	movs	r3, #64	; 0x40
 8007794:	616b      	str	r3, [r5, #20]
 8007796:	2300      	movs	r3, #0
 8007798:	9309      	str	r3, [sp, #36]	; 0x24
 800779a:	2320      	movs	r3, #32
 800779c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80077a4:	2330      	movs	r3, #48	; 0x30
 80077a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800794c <_svfiprintf_r+0x1e8>
 80077aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077ae:	f04f 0901 	mov.w	r9, #1
 80077b2:	4623      	mov	r3, r4
 80077b4:	469a      	mov	sl, r3
 80077b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ba:	b10a      	cbz	r2, 80077c0 <_svfiprintf_r+0x5c>
 80077bc:	2a25      	cmp	r2, #37	; 0x25
 80077be:	d1f9      	bne.n	80077b4 <_svfiprintf_r+0x50>
 80077c0:	ebba 0b04 	subs.w	fp, sl, r4
 80077c4:	d00b      	beq.n	80077de <_svfiprintf_r+0x7a>
 80077c6:	465b      	mov	r3, fp
 80077c8:	4622      	mov	r2, r4
 80077ca:	4629      	mov	r1, r5
 80077cc:	4638      	mov	r0, r7
 80077ce:	f7ff ff6f 	bl	80076b0 <__ssputs_r>
 80077d2:	3001      	adds	r0, #1
 80077d4:	f000 80a9 	beq.w	800792a <_svfiprintf_r+0x1c6>
 80077d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077da:	445a      	add	r2, fp
 80077dc:	9209      	str	r2, [sp, #36]	; 0x24
 80077de:	f89a 3000 	ldrb.w	r3, [sl]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80a1 	beq.w	800792a <_svfiprintf_r+0x1c6>
 80077e8:	2300      	movs	r3, #0
 80077ea:	f04f 32ff 	mov.w	r2, #4294967295
 80077ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077f2:	f10a 0a01 	add.w	sl, sl, #1
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	9307      	str	r3, [sp, #28]
 80077fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007800:	4654      	mov	r4, sl
 8007802:	2205      	movs	r2, #5
 8007804:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007808:	4850      	ldr	r0, [pc, #320]	; (800794c <_svfiprintf_r+0x1e8>)
 800780a:	f7f8 fce9 	bl	80001e0 <memchr>
 800780e:	9a04      	ldr	r2, [sp, #16]
 8007810:	b9d8      	cbnz	r0, 800784a <_svfiprintf_r+0xe6>
 8007812:	06d0      	lsls	r0, r2, #27
 8007814:	bf44      	itt	mi
 8007816:	2320      	movmi	r3, #32
 8007818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800781c:	0711      	lsls	r1, r2, #28
 800781e:	bf44      	itt	mi
 8007820:	232b      	movmi	r3, #43	; 0x2b
 8007822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007826:	f89a 3000 	ldrb.w	r3, [sl]
 800782a:	2b2a      	cmp	r3, #42	; 0x2a
 800782c:	d015      	beq.n	800785a <_svfiprintf_r+0xf6>
 800782e:	9a07      	ldr	r2, [sp, #28]
 8007830:	4654      	mov	r4, sl
 8007832:	2000      	movs	r0, #0
 8007834:	f04f 0c0a 	mov.w	ip, #10
 8007838:	4621      	mov	r1, r4
 800783a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800783e:	3b30      	subs	r3, #48	; 0x30
 8007840:	2b09      	cmp	r3, #9
 8007842:	d94d      	bls.n	80078e0 <_svfiprintf_r+0x17c>
 8007844:	b1b0      	cbz	r0, 8007874 <_svfiprintf_r+0x110>
 8007846:	9207      	str	r2, [sp, #28]
 8007848:	e014      	b.n	8007874 <_svfiprintf_r+0x110>
 800784a:	eba0 0308 	sub.w	r3, r0, r8
 800784e:	fa09 f303 	lsl.w	r3, r9, r3
 8007852:	4313      	orrs	r3, r2
 8007854:	9304      	str	r3, [sp, #16]
 8007856:	46a2      	mov	sl, r4
 8007858:	e7d2      	b.n	8007800 <_svfiprintf_r+0x9c>
 800785a:	9b03      	ldr	r3, [sp, #12]
 800785c:	1d19      	adds	r1, r3, #4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	9103      	str	r1, [sp, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	bfbb      	ittet	lt
 8007866:	425b      	neglt	r3, r3
 8007868:	f042 0202 	orrlt.w	r2, r2, #2
 800786c:	9307      	strge	r3, [sp, #28]
 800786e:	9307      	strlt	r3, [sp, #28]
 8007870:	bfb8      	it	lt
 8007872:	9204      	strlt	r2, [sp, #16]
 8007874:	7823      	ldrb	r3, [r4, #0]
 8007876:	2b2e      	cmp	r3, #46	; 0x2e
 8007878:	d10c      	bne.n	8007894 <_svfiprintf_r+0x130>
 800787a:	7863      	ldrb	r3, [r4, #1]
 800787c:	2b2a      	cmp	r3, #42	; 0x2a
 800787e:	d134      	bne.n	80078ea <_svfiprintf_r+0x186>
 8007880:	9b03      	ldr	r3, [sp, #12]
 8007882:	1d1a      	adds	r2, r3, #4
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	9203      	str	r2, [sp, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	bfb8      	it	lt
 800788c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007890:	3402      	adds	r4, #2
 8007892:	9305      	str	r3, [sp, #20]
 8007894:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800795c <_svfiprintf_r+0x1f8>
 8007898:	7821      	ldrb	r1, [r4, #0]
 800789a:	2203      	movs	r2, #3
 800789c:	4650      	mov	r0, sl
 800789e:	f7f8 fc9f 	bl	80001e0 <memchr>
 80078a2:	b138      	cbz	r0, 80078b4 <_svfiprintf_r+0x150>
 80078a4:	9b04      	ldr	r3, [sp, #16]
 80078a6:	eba0 000a 	sub.w	r0, r0, sl
 80078aa:	2240      	movs	r2, #64	; 0x40
 80078ac:	4082      	lsls	r2, r0
 80078ae:	4313      	orrs	r3, r2
 80078b0:	3401      	adds	r4, #1
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078b8:	4825      	ldr	r0, [pc, #148]	; (8007950 <_svfiprintf_r+0x1ec>)
 80078ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078be:	2206      	movs	r2, #6
 80078c0:	f7f8 fc8e 	bl	80001e0 <memchr>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d038      	beq.n	800793a <_svfiprintf_r+0x1d6>
 80078c8:	4b22      	ldr	r3, [pc, #136]	; (8007954 <_svfiprintf_r+0x1f0>)
 80078ca:	bb1b      	cbnz	r3, 8007914 <_svfiprintf_r+0x1b0>
 80078cc:	9b03      	ldr	r3, [sp, #12]
 80078ce:	3307      	adds	r3, #7
 80078d0:	f023 0307 	bic.w	r3, r3, #7
 80078d4:	3308      	adds	r3, #8
 80078d6:	9303      	str	r3, [sp, #12]
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	4433      	add	r3, r6
 80078dc:	9309      	str	r3, [sp, #36]	; 0x24
 80078de:	e768      	b.n	80077b2 <_svfiprintf_r+0x4e>
 80078e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80078e4:	460c      	mov	r4, r1
 80078e6:	2001      	movs	r0, #1
 80078e8:	e7a6      	b.n	8007838 <_svfiprintf_r+0xd4>
 80078ea:	2300      	movs	r3, #0
 80078ec:	3401      	adds	r4, #1
 80078ee:	9305      	str	r3, [sp, #20]
 80078f0:	4619      	mov	r1, r3
 80078f2:	f04f 0c0a 	mov.w	ip, #10
 80078f6:	4620      	mov	r0, r4
 80078f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078fc:	3a30      	subs	r2, #48	; 0x30
 80078fe:	2a09      	cmp	r2, #9
 8007900:	d903      	bls.n	800790a <_svfiprintf_r+0x1a6>
 8007902:	2b00      	cmp	r3, #0
 8007904:	d0c6      	beq.n	8007894 <_svfiprintf_r+0x130>
 8007906:	9105      	str	r1, [sp, #20]
 8007908:	e7c4      	b.n	8007894 <_svfiprintf_r+0x130>
 800790a:	fb0c 2101 	mla	r1, ip, r1, r2
 800790e:	4604      	mov	r4, r0
 8007910:	2301      	movs	r3, #1
 8007912:	e7f0      	b.n	80078f6 <_svfiprintf_r+0x192>
 8007914:	ab03      	add	r3, sp, #12
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	462a      	mov	r2, r5
 800791a:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <_svfiprintf_r+0x1f4>)
 800791c:	a904      	add	r1, sp, #16
 800791e:	4638      	mov	r0, r7
 8007920:	f3af 8000 	nop.w
 8007924:	1c42      	adds	r2, r0, #1
 8007926:	4606      	mov	r6, r0
 8007928:	d1d6      	bne.n	80078d8 <_svfiprintf_r+0x174>
 800792a:	89ab      	ldrh	r3, [r5, #12]
 800792c:	065b      	lsls	r3, r3, #25
 800792e:	f53f af2d 	bmi.w	800778c <_svfiprintf_r+0x28>
 8007932:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007934:	b01d      	add	sp, #116	; 0x74
 8007936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793a:	ab03      	add	r3, sp, #12
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	462a      	mov	r2, r5
 8007940:	4b05      	ldr	r3, [pc, #20]	; (8007958 <_svfiprintf_r+0x1f4>)
 8007942:	a904      	add	r1, sp, #16
 8007944:	4638      	mov	r0, r7
 8007946:	f000 f879 	bl	8007a3c <_printf_i>
 800794a:	e7eb      	b.n	8007924 <_svfiprintf_r+0x1c0>
 800794c:	08007fd8 	.word	0x08007fd8
 8007950:	08007fe2 	.word	0x08007fe2
 8007954:	00000000 	.word	0x00000000
 8007958:	080076b1 	.word	0x080076b1
 800795c:	08007fde 	.word	0x08007fde

08007960 <_printf_common>:
 8007960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007964:	4616      	mov	r6, r2
 8007966:	4699      	mov	r9, r3
 8007968:	688a      	ldr	r2, [r1, #8]
 800796a:	690b      	ldr	r3, [r1, #16]
 800796c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007970:	4293      	cmp	r3, r2
 8007972:	bfb8      	it	lt
 8007974:	4613      	movlt	r3, r2
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800797c:	4607      	mov	r7, r0
 800797e:	460c      	mov	r4, r1
 8007980:	b10a      	cbz	r2, 8007986 <_printf_common+0x26>
 8007982:	3301      	adds	r3, #1
 8007984:	6033      	str	r3, [r6, #0]
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	0699      	lsls	r1, r3, #26
 800798a:	bf42      	ittt	mi
 800798c:	6833      	ldrmi	r3, [r6, #0]
 800798e:	3302      	addmi	r3, #2
 8007990:	6033      	strmi	r3, [r6, #0]
 8007992:	6825      	ldr	r5, [r4, #0]
 8007994:	f015 0506 	ands.w	r5, r5, #6
 8007998:	d106      	bne.n	80079a8 <_printf_common+0x48>
 800799a:	f104 0a19 	add.w	sl, r4, #25
 800799e:	68e3      	ldr	r3, [r4, #12]
 80079a0:	6832      	ldr	r2, [r6, #0]
 80079a2:	1a9b      	subs	r3, r3, r2
 80079a4:	42ab      	cmp	r3, r5
 80079a6:	dc26      	bgt.n	80079f6 <_printf_common+0x96>
 80079a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079ac:	1e13      	subs	r3, r2, #0
 80079ae:	6822      	ldr	r2, [r4, #0]
 80079b0:	bf18      	it	ne
 80079b2:	2301      	movne	r3, #1
 80079b4:	0692      	lsls	r2, r2, #26
 80079b6:	d42b      	bmi.n	8007a10 <_printf_common+0xb0>
 80079b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079bc:	4649      	mov	r1, r9
 80079be:	4638      	mov	r0, r7
 80079c0:	47c0      	blx	r8
 80079c2:	3001      	adds	r0, #1
 80079c4:	d01e      	beq.n	8007a04 <_printf_common+0xa4>
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	6922      	ldr	r2, [r4, #16]
 80079ca:	f003 0306 	and.w	r3, r3, #6
 80079ce:	2b04      	cmp	r3, #4
 80079d0:	bf02      	ittt	eq
 80079d2:	68e5      	ldreq	r5, [r4, #12]
 80079d4:	6833      	ldreq	r3, [r6, #0]
 80079d6:	1aed      	subeq	r5, r5, r3
 80079d8:	68a3      	ldr	r3, [r4, #8]
 80079da:	bf0c      	ite	eq
 80079dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079e0:	2500      	movne	r5, #0
 80079e2:	4293      	cmp	r3, r2
 80079e4:	bfc4      	itt	gt
 80079e6:	1a9b      	subgt	r3, r3, r2
 80079e8:	18ed      	addgt	r5, r5, r3
 80079ea:	2600      	movs	r6, #0
 80079ec:	341a      	adds	r4, #26
 80079ee:	42b5      	cmp	r5, r6
 80079f0:	d11a      	bne.n	8007a28 <_printf_common+0xc8>
 80079f2:	2000      	movs	r0, #0
 80079f4:	e008      	b.n	8007a08 <_printf_common+0xa8>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4652      	mov	r2, sl
 80079fa:	4649      	mov	r1, r9
 80079fc:	4638      	mov	r0, r7
 80079fe:	47c0      	blx	r8
 8007a00:	3001      	adds	r0, #1
 8007a02:	d103      	bne.n	8007a0c <_printf_common+0xac>
 8007a04:	f04f 30ff 	mov.w	r0, #4294967295
 8007a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a0c:	3501      	adds	r5, #1
 8007a0e:	e7c6      	b.n	800799e <_printf_common+0x3e>
 8007a10:	18e1      	adds	r1, r4, r3
 8007a12:	1c5a      	adds	r2, r3, #1
 8007a14:	2030      	movs	r0, #48	; 0x30
 8007a16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a1a:	4422      	add	r2, r4
 8007a1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a24:	3302      	adds	r3, #2
 8007a26:	e7c7      	b.n	80079b8 <_printf_common+0x58>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	4638      	mov	r0, r7
 8007a30:	47c0      	blx	r8
 8007a32:	3001      	adds	r0, #1
 8007a34:	d0e6      	beq.n	8007a04 <_printf_common+0xa4>
 8007a36:	3601      	adds	r6, #1
 8007a38:	e7d9      	b.n	80079ee <_printf_common+0x8e>
	...

08007a3c <_printf_i>:
 8007a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a40:	7e0f      	ldrb	r7, [r1, #24]
 8007a42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a44:	2f78      	cmp	r7, #120	; 0x78
 8007a46:	4691      	mov	r9, r2
 8007a48:	4680      	mov	r8, r0
 8007a4a:	460c      	mov	r4, r1
 8007a4c:	469a      	mov	sl, r3
 8007a4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a52:	d807      	bhi.n	8007a64 <_printf_i+0x28>
 8007a54:	2f62      	cmp	r7, #98	; 0x62
 8007a56:	d80a      	bhi.n	8007a6e <_printf_i+0x32>
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	f000 80d4 	beq.w	8007c06 <_printf_i+0x1ca>
 8007a5e:	2f58      	cmp	r7, #88	; 0x58
 8007a60:	f000 80c0 	beq.w	8007be4 <_printf_i+0x1a8>
 8007a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a6c:	e03a      	b.n	8007ae4 <_printf_i+0xa8>
 8007a6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a72:	2b15      	cmp	r3, #21
 8007a74:	d8f6      	bhi.n	8007a64 <_printf_i+0x28>
 8007a76:	a101      	add	r1, pc, #4	; (adr r1, 8007a7c <_printf_i+0x40>)
 8007a78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a7c:	08007ad5 	.word	0x08007ad5
 8007a80:	08007ae9 	.word	0x08007ae9
 8007a84:	08007a65 	.word	0x08007a65
 8007a88:	08007a65 	.word	0x08007a65
 8007a8c:	08007a65 	.word	0x08007a65
 8007a90:	08007a65 	.word	0x08007a65
 8007a94:	08007ae9 	.word	0x08007ae9
 8007a98:	08007a65 	.word	0x08007a65
 8007a9c:	08007a65 	.word	0x08007a65
 8007aa0:	08007a65 	.word	0x08007a65
 8007aa4:	08007a65 	.word	0x08007a65
 8007aa8:	08007bed 	.word	0x08007bed
 8007aac:	08007b15 	.word	0x08007b15
 8007ab0:	08007ba7 	.word	0x08007ba7
 8007ab4:	08007a65 	.word	0x08007a65
 8007ab8:	08007a65 	.word	0x08007a65
 8007abc:	08007c0f 	.word	0x08007c0f
 8007ac0:	08007a65 	.word	0x08007a65
 8007ac4:	08007b15 	.word	0x08007b15
 8007ac8:	08007a65 	.word	0x08007a65
 8007acc:	08007a65 	.word	0x08007a65
 8007ad0:	08007baf 	.word	0x08007baf
 8007ad4:	682b      	ldr	r3, [r5, #0]
 8007ad6:	1d1a      	adds	r2, r3, #4
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	602a      	str	r2, [r5, #0]
 8007adc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ae0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e09f      	b.n	8007c28 <_printf_i+0x1ec>
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	682b      	ldr	r3, [r5, #0]
 8007aec:	0607      	lsls	r7, r0, #24
 8007aee:	f103 0104 	add.w	r1, r3, #4
 8007af2:	6029      	str	r1, [r5, #0]
 8007af4:	d501      	bpl.n	8007afa <_printf_i+0xbe>
 8007af6:	681e      	ldr	r6, [r3, #0]
 8007af8:	e003      	b.n	8007b02 <_printf_i+0xc6>
 8007afa:	0646      	lsls	r6, r0, #25
 8007afc:	d5fb      	bpl.n	8007af6 <_printf_i+0xba>
 8007afe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b02:	2e00      	cmp	r6, #0
 8007b04:	da03      	bge.n	8007b0e <_printf_i+0xd2>
 8007b06:	232d      	movs	r3, #45	; 0x2d
 8007b08:	4276      	negs	r6, r6
 8007b0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b0e:	485a      	ldr	r0, [pc, #360]	; (8007c78 <_printf_i+0x23c>)
 8007b10:	230a      	movs	r3, #10
 8007b12:	e012      	b.n	8007b3a <_printf_i+0xfe>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	6820      	ldr	r0, [r4, #0]
 8007b18:	1d19      	adds	r1, r3, #4
 8007b1a:	6029      	str	r1, [r5, #0]
 8007b1c:	0605      	lsls	r5, r0, #24
 8007b1e:	d501      	bpl.n	8007b24 <_printf_i+0xe8>
 8007b20:	681e      	ldr	r6, [r3, #0]
 8007b22:	e002      	b.n	8007b2a <_printf_i+0xee>
 8007b24:	0641      	lsls	r1, r0, #25
 8007b26:	d5fb      	bpl.n	8007b20 <_printf_i+0xe4>
 8007b28:	881e      	ldrh	r6, [r3, #0]
 8007b2a:	4853      	ldr	r0, [pc, #332]	; (8007c78 <_printf_i+0x23c>)
 8007b2c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b2e:	bf0c      	ite	eq
 8007b30:	2308      	moveq	r3, #8
 8007b32:	230a      	movne	r3, #10
 8007b34:	2100      	movs	r1, #0
 8007b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b3a:	6865      	ldr	r5, [r4, #4]
 8007b3c:	60a5      	str	r5, [r4, #8]
 8007b3e:	2d00      	cmp	r5, #0
 8007b40:	bfa2      	ittt	ge
 8007b42:	6821      	ldrge	r1, [r4, #0]
 8007b44:	f021 0104 	bicge.w	r1, r1, #4
 8007b48:	6021      	strge	r1, [r4, #0]
 8007b4a:	b90e      	cbnz	r6, 8007b50 <_printf_i+0x114>
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	d04b      	beq.n	8007be8 <_printf_i+0x1ac>
 8007b50:	4615      	mov	r5, r2
 8007b52:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b56:	fb03 6711 	mls	r7, r3, r1, r6
 8007b5a:	5dc7      	ldrb	r7, [r0, r7]
 8007b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b60:	4637      	mov	r7, r6
 8007b62:	42bb      	cmp	r3, r7
 8007b64:	460e      	mov	r6, r1
 8007b66:	d9f4      	bls.n	8007b52 <_printf_i+0x116>
 8007b68:	2b08      	cmp	r3, #8
 8007b6a:	d10b      	bne.n	8007b84 <_printf_i+0x148>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	07de      	lsls	r6, r3, #31
 8007b70:	d508      	bpl.n	8007b84 <_printf_i+0x148>
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	6861      	ldr	r1, [r4, #4]
 8007b76:	4299      	cmp	r1, r3
 8007b78:	bfde      	ittt	le
 8007b7a:	2330      	movle	r3, #48	; 0x30
 8007b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b84:	1b52      	subs	r2, r2, r5
 8007b86:	6122      	str	r2, [r4, #16]
 8007b88:	f8cd a000 	str.w	sl, [sp]
 8007b8c:	464b      	mov	r3, r9
 8007b8e:	aa03      	add	r2, sp, #12
 8007b90:	4621      	mov	r1, r4
 8007b92:	4640      	mov	r0, r8
 8007b94:	f7ff fee4 	bl	8007960 <_printf_common>
 8007b98:	3001      	adds	r0, #1
 8007b9a:	d14a      	bne.n	8007c32 <_printf_i+0x1f6>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	b004      	add	sp, #16
 8007ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	f043 0320 	orr.w	r3, r3, #32
 8007bac:	6023      	str	r3, [r4, #0]
 8007bae:	4833      	ldr	r0, [pc, #204]	; (8007c7c <_printf_i+0x240>)
 8007bb0:	2778      	movs	r7, #120	; 0x78
 8007bb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	6829      	ldr	r1, [r5, #0]
 8007bba:	061f      	lsls	r7, r3, #24
 8007bbc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bc0:	d402      	bmi.n	8007bc8 <_printf_i+0x18c>
 8007bc2:	065f      	lsls	r7, r3, #25
 8007bc4:	bf48      	it	mi
 8007bc6:	b2b6      	uxthmi	r6, r6
 8007bc8:	07df      	lsls	r7, r3, #31
 8007bca:	bf48      	it	mi
 8007bcc:	f043 0320 	orrmi.w	r3, r3, #32
 8007bd0:	6029      	str	r1, [r5, #0]
 8007bd2:	bf48      	it	mi
 8007bd4:	6023      	strmi	r3, [r4, #0]
 8007bd6:	b91e      	cbnz	r6, 8007be0 <_printf_i+0x1a4>
 8007bd8:	6823      	ldr	r3, [r4, #0]
 8007bda:	f023 0320 	bic.w	r3, r3, #32
 8007bde:	6023      	str	r3, [r4, #0]
 8007be0:	2310      	movs	r3, #16
 8007be2:	e7a7      	b.n	8007b34 <_printf_i+0xf8>
 8007be4:	4824      	ldr	r0, [pc, #144]	; (8007c78 <_printf_i+0x23c>)
 8007be6:	e7e4      	b.n	8007bb2 <_printf_i+0x176>
 8007be8:	4615      	mov	r5, r2
 8007bea:	e7bd      	b.n	8007b68 <_printf_i+0x12c>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	6826      	ldr	r6, [r4, #0]
 8007bf0:	6961      	ldr	r1, [r4, #20]
 8007bf2:	1d18      	adds	r0, r3, #4
 8007bf4:	6028      	str	r0, [r5, #0]
 8007bf6:	0635      	lsls	r5, r6, #24
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	d501      	bpl.n	8007c00 <_printf_i+0x1c4>
 8007bfc:	6019      	str	r1, [r3, #0]
 8007bfe:	e002      	b.n	8007c06 <_printf_i+0x1ca>
 8007c00:	0670      	lsls	r0, r6, #25
 8007c02:	d5fb      	bpl.n	8007bfc <_printf_i+0x1c0>
 8007c04:	8019      	strh	r1, [r3, #0]
 8007c06:	2300      	movs	r3, #0
 8007c08:	6123      	str	r3, [r4, #16]
 8007c0a:	4615      	mov	r5, r2
 8007c0c:	e7bc      	b.n	8007b88 <_printf_i+0x14c>
 8007c0e:	682b      	ldr	r3, [r5, #0]
 8007c10:	1d1a      	adds	r2, r3, #4
 8007c12:	602a      	str	r2, [r5, #0]
 8007c14:	681d      	ldr	r5, [r3, #0]
 8007c16:	6862      	ldr	r2, [r4, #4]
 8007c18:	2100      	movs	r1, #0
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	f7f8 fae0 	bl	80001e0 <memchr>
 8007c20:	b108      	cbz	r0, 8007c26 <_printf_i+0x1ea>
 8007c22:	1b40      	subs	r0, r0, r5
 8007c24:	6060      	str	r0, [r4, #4]
 8007c26:	6863      	ldr	r3, [r4, #4]
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c30:	e7aa      	b.n	8007b88 <_printf_i+0x14c>
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	462a      	mov	r2, r5
 8007c36:	4649      	mov	r1, r9
 8007c38:	4640      	mov	r0, r8
 8007c3a:	47d0      	blx	sl
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d0ad      	beq.n	8007b9c <_printf_i+0x160>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	079b      	lsls	r3, r3, #30
 8007c44:	d413      	bmi.n	8007c6e <_printf_i+0x232>
 8007c46:	68e0      	ldr	r0, [r4, #12]
 8007c48:	9b03      	ldr	r3, [sp, #12]
 8007c4a:	4298      	cmp	r0, r3
 8007c4c:	bfb8      	it	lt
 8007c4e:	4618      	movlt	r0, r3
 8007c50:	e7a6      	b.n	8007ba0 <_printf_i+0x164>
 8007c52:	2301      	movs	r3, #1
 8007c54:	4632      	mov	r2, r6
 8007c56:	4649      	mov	r1, r9
 8007c58:	4640      	mov	r0, r8
 8007c5a:	47d0      	blx	sl
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d09d      	beq.n	8007b9c <_printf_i+0x160>
 8007c60:	3501      	adds	r5, #1
 8007c62:	68e3      	ldr	r3, [r4, #12]
 8007c64:	9903      	ldr	r1, [sp, #12]
 8007c66:	1a5b      	subs	r3, r3, r1
 8007c68:	42ab      	cmp	r3, r5
 8007c6a:	dcf2      	bgt.n	8007c52 <_printf_i+0x216>
 8007c6c:	e7eb      	b.n	8007c46 <_printf_i+0x20a>
 8007c6e:	2500      	movs	r5, #0
 8007c70:	f104 0619 	add.w	r6, r4, #25
 8007c74:	e7f5      	b.n	8007c62 <_printf_i+0x226>
 8007c76:	bf00      	nop
 8007c78:	08007fe9 	.word	0x08007fe9
 8007c7c:	08007ffa 	.word	0x08007ffa

08007c80 <memmove>:
 8007c80:	4288      	cmp	r0, r1
 8007c82:	b510      	push	{r4, lr}
 8007c84:	eb01 0402 	add.w	r4, r1, r2
 8007c88:	d902      	bls.n	8007c90 <memmove+0x10>
 8007c8a:	4284      	cmp	r4, r0
 8007c8c:	4623      	mov	r3, r4
 8007c8e:	d807      	bhi.n	8007ca0 <memmove+0x20>
 8007c90:	1e43      	subs	r3, r0, #1
 8007c92:	42a1      	cmp	r1, r4
 8007c94:	d008      	beq.n	8007ca8 <memmove+0x28>
 8007c96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c9e:	e7f8      	b.n	8007c92 <memmove+0x12>
 8007ca0:	4402      	add	r2, r0
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	428a      	cmp	r2, r1
 8007ca6:	d100      	bne.n	8007caa <memmove+0x2a>
 8007ca8:	bd10      	pop	{r4, pc}
 8007caa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007cb2:	e7f7      	b.n	8007ca4 <memmove+0x24>

08007cb4 <_sbrk_r>:
 8007cb4:	b538      	push	{r3, r4, r5, lr}
 8007cb6:	4d06      	ldr	r5, [pc, #24]	; (8007cd0 <_sbrk_r+0x1c>)
 8007cb8:	2300      	movs	r3, #0
 8007cba:	4604      	mov	r4, r0
 8007cbc:	4608      	mov	r0, r1
 8007cbe:	602b      	str	r3, [r5, #0]
 8007cc0:	f7f9 f9d8 	bl	8001074 <_sbrk>
 8007cc4:	1c43      	adds	r3, r0, #1
 8007cc6:	d102      	bne.n	8007cce <_sbrk_r+0x1a>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	b103      	cbz	r3, 8007cce <_sbrk_r+0x1a>
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	bd38      	pop	{r3, r4, r5, pc}
 8007cd0:	20004c5c 	.word	0x20004c5c

08007cd4 <_realloc_r>:
 8007cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd8:	4680      	mov	r8, r0
 8007cda:	4614      	mov	r4, r2
 8007cdc:	460e      	mov	r6, r1
 8007cde:	b921      	cbnz	r1, 8007cea <_realloc_r+0x16>
 8007ce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	f7ff bc57 	b.w	8007598 <_malloc_r>
 8007cea:	b92a      	cbnz	r2, 8007cf8 <_realloc_r+0x24>
 8007cec:	f7ff fbe8 	bl	80074c0 <_free_r>
 8007cf0:	4625      	mov	r5, r4
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cf8:	f000 f81b 	bl	8007d32 <_malloc_usable_size_r>
 8007cfc:	4284      	cmp	r4, r0
 8007cfe:	4607      	mov	r7, r0
 8007d00:	d802      	bhi.n	8007d08 <_realloc_r+0x34>
 8007d02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007d06:	d812      	bhi.n	8007d2e <_realloc_r+0x5a>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4640      	mov	r0, r8
 8007d0c:	f7ff fc44 	bl	8007598 <_malloc_r>
 8007d10:	4605      	mov	r5, r0
 8007d12:	2800      	cmp	r0, #0
 8007d14:	d0ed      	beq.n	8007cf2 <_realloc_r+0x1e>
 8007d16:	42bc      	cmp	r4, r7
 8007d18:	4622      	mov	r2, r4
 8007d1a:	4631      	mov	r1, r6
 8007d1c:	bf28      	it	cs
 8007d1e:	463a      	movcs	r2, r7
 8007d20:	f7ff fbc0 	bl	80074a4 <memcpy>
 8007d24:	4631      	mov	r1, r6
 8007d26:	4640      	mov	r0, r8
 8007d28:	f7ff fbca 	bl	80074c0 <_free_r>
 8007d2c:	e7e1      	b.n	8007cf2 <_realloc_r+0x1e>
 8007d2e:	4635      	mov	r5, r6
 8007d30:	e7df      	b.n	8007cf2 <_realloc_r+0x1e>

08007d32 <_malloc_usable_size_r>:
 8007d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d36:	1f18      	subs	r0, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bfbc      	itt	lt
 8007d3c:	580b      	ldrlt	r3, [r1, r0]
 8007d3e:	18c0      	addlt	r0, r0, r3
 8007d40:	4770      	bx	lr
	...

08007d44 <_init>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr

08007d50 <_fini>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr
